Command line: target_pprofile.py
Total duration: 1.079s
File: target_pprofile.py
File duration: 63.2832s (5864.99%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# pprofile --include target_pprofile.py target_pprofile.py
     2|         0|            0|            0|  0.00%|
     3|         2|  4.69685e-05|  2.34842e-05|  0.00%|import time
     4|         1|  2.81334e-05|  2.81334e-05|  0.00%|from concurrent.futures import ThreadPoolExecutor
(call)|         1|   0.00706506|   0.00706506|  0.65%|# <frozen importlib._bootstrap>:1009 _handle_fromlist
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|# from multiprocessing import Process
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|# @profile
    10|         2|   1.4782e-05|  7.39098e-06|  0.00%|def longtask():
    11|         1|   0.00146294|   0.00146294|  0.14%|    print("  start longtask")
    12|        11|  0.000198603|  1.80548e-05|  0.02%|    for i in range(10):
    13|        10|      1.04174|     0.104174| 96.55%|        time.sleep(100 / 1000)
    14|         1|   4.1008e-05|   4.1008e-05|  0.00%|    print("  longtask done")
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|# @profile
    18|      1001|   0.00445771|  4.45326e-06|  0.41%|def shorttask():
    19|      1000|      28.8314|    0.0288314|2672.05%|    print("  start short task")
    20|      1000|      11.4741|    0.0114741|1063.40%|    time.sleep(10 / 1000)
    21|      1000|      21.8832|    0.0218832|2028.10%|    print("  short task done")
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         2|  1.69277e-05|  8.46386e-06|  0.00%|def run():
    25|         1|  8.10623e-06|  8.10623e-06|  0.00%|    tasks = []
    26|         1|  8.10623e-06|  8.10623e-06|  0.00%|    tasks.append(longtask)
    27|      1001|   0.00625038|  6.24414e-06|  0.58%|    for i in range(1000):
    28|      1000|    0.0064435|   6.4435e-06|  0.60%|        tasks.append(shorttask)
    29|         0|            0|            0|  0.00%|    # runInParallel(*tasks)
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|    # default worker count:
    32|         0|            0|            0|  0.00%|    # Python 3.7 or below ... os.cpu_count() x 5
    33|         0|            0|            0|  0.00%|    # Python 3.8 or above ... min(32, os.cpu_count() + 4)
    34|         1|  4.60148e-05|  4.60148e-05|  0.00%|    with ThreadPoolExecutor() as executor:
(call)|         1|  0.000176907|  0.000176907|  0.02%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:113 __init__
(call)|         1|  3.50475e-05|  3.50475e-05|  0.00%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py:619 __enter__
    35|         1|  9.05991e-06|  9.05991e-06|  0.00%|        res = []
    36|      1002|    0.0058198|  5.80818e-06|  0.54%|        for t in tasks:
(call)|         1|     0.559325|     0.559325| 51.84%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py:622 __exit__
    37|      1001|     0.018415|  1.83966e-05|  1.71%|            f = executor.submit(t)
(call)|      1001|      0.46084|  0.000460379| 42.71%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:145 submit
    38|      1001|   0.00625968|  6.25343e-06|  0.58%|            res.append(f)
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|    # retrieve results
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         1|  8.10623e-06|  8.10623e-06|  0.00%|if __name__ == '__main__':
    44|         1|   6.8903e-05|   6.8903e-05|  0.01%|    print("start tasks")
    45|         1|   0.00313926|   0.00313926|  0.29%|    run()
(call)|         1|      1.06364|      1.06364| 98.58%|# target_pprofile.py:24 run
(call)|        80|   0.00243616|   3.0452e-05|  0.23%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/weakref.py:358 remove
(call)|        80|   0.00237179|  2.96474e-05|  0.22%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/_weakrefset.py:38 _remove
    46|         1|    4.673e-05|    4.673e-05|  0.00%|    print("all tasks done")
File: /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py
File duration: 8.63532s (800.31%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Copyright 2009 Brian Quinlan. All Rights Reserved.
     2|         0|            0|            0|  0.00%|# Licensed to PSF under a Contributor Agreement.
     3|         0|            0|            0|  0.00%|
     4|         2|  3.93391e-05|  1.96695e-05|  0.00%|"""Implements ThreadPoolExecutor."""
     5|         0|            0|            0|  0.00%|
     6|         1|  8.82149e-06|  8.82149e-06|  0.00%|__author__ = 'Brian Quinlan (brian@sweetapp.com)'
     7|         0|            0|            0|  0.00%|
     8|         1|  1.38283e-05|  1.38283e-05|  0.00%|import atexit
     9|         1|  3.83854e-05|  3.83854e-05|  0.00%|from concurrent.futures import _base
(call)|         1|  6.38962e-05|  6.38962e-05|  0.01%|# <frozen importlib._bootstrap>:1009 _handle_fromlist
    10|         1|   1.4782e-05|   1.4782e-05|  0.00%|import itertools
    11|         1|   1.3113e-05|   1.3113e-05|  0.00%|import queue
    12|         1|  1.28746e-05|  1.28746e-05|  0.00%|import threading
    13|         1|  1.40667e-05|  1.40667e-05|  0.00%|import weakref
    14|         1|  1.21593e-05|  1.21593e-05|  0.00%|import os
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|# Workers are created as daemon threads. This is done to allow the interpreter
    17|         0|            0|            0|  0.00%|# to exit when there are still idle threads in a ThreadPoolExecutor's thread
    18|         0|            0|            0|  0.00%|# pool (i.e. shutdown() was not called). However, allowing workers to die with
    19|         0|            0|            0|  0.00%|# the interpreter has two undesirable properties:
    20|         0|            0|            0|  0.00%|#   - The workers would still be running during interpreter shutdown,
    21|         0|            0|            0|  0.00%|#     meaning that they would fail in unpredictable ways.
    22|         0|            0|            0|  0.00%|#   - The workers could be killed while evaluating a work item, which could
    23|         0|            0|            0|  0.00%|#     be bad if the callable being evaluated has external side-effects e.g.
    24|         0|            0|            0|  0.00%|#     writing to a file.
    25|         0|            0|            0|  0.00%|#
    26|         0|            0|            0|  0.00%|# To work around this problem, an exit handler is installed which tells the
    27|         0|            0|            0|  0.00%|# workers to exit when their work queues are empty and then waits until the
    28|         0|            0|            0|  0.00%|# threads finish.
    29|         0|            0|            0|  0.00%|
    30|         1|  3.67165e-05|  3.67165e-05|  0.00%|_threads_queues = weakref.WeakKeyDictionary()
(call)|         1|  0.000100136|  0.000100136|  0.01%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/weakref.py:356 __init__
    31|         1|  1.28746e-05|  1.28746e-05|  0.00%|_shutdown = False
    32|         0|            0|            0|  0.00%|
    33|         1|   1.3113e-05|   1.3113e-05|  0.00%|def _python_exit():
    34|         0|            0|            0|  0.00%|    global _shutdown
    35|         0|            0|            0|  0.00%|    _shutdown = True
    36|         0|            0|            0|  0.00%|    items = list(_threads_queues.items())
    37|         0|            0|            0|  0.00%|    for t, q in items:
    38|         0|            0|            0|  0.00%|        q.put(None)
    39|         0|            0|            0|  0.00%|    for t, q in items:
    40|         0|            0|            0|  0.00%|        t.join()
    41|         0|            0|            0|  0.00%|
    42|         1|  1.71661e-05|  1.71661e-05|  0.00%|atexit.register(_python_exit)
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         3|  8.29697e-05|  2.76566e-05|  0.01%|class _WorkItem(object):
(call)|         1|   3.8147e-05|   3.8147e-05|  0.00%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:45 _WorkItem
    46|      1002|   0.00451422|  4.50521e-06|  0.42%|    def __init__(self, future, fn, args, kwargs):
    47|      1001|   0.00642419|  6.41777e-06|  0.60%|        self.future = future
    48|      1001|   0.00589609|   5.8902e-06|  0.55%|        self.fn = fn
    49|      1001|   0.00567913|  5.67346e-06|  0.53%|        self.args = args
    50|      1001|   0.00580549|  5.79969e-06|  0.54%|        self.kwargs = kwargs
    51|         0|            0|            0|  0.00%|
    52|      1002|   0.00520444|  5.19405e-06|  0.48%|    def run(self):
    53|      1001|    0.0190539|  1.90349e-05|  1.77%|        if not self.future.set_running_or_notify_cancel():
(call)|      1001|    0.0881057|  8.80177e-05|  8.17%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py:473 set_running_or_notify_cancel
    54|         0|            0|            0|  0.00%|            return
    55|         0|            0|            0|  0.00%|
    56|      1001|   0.00651145|  6.50494e-06|  0.60%|        try:
    57|      1001|    0.0299644|  2.99345e-05|  2.78%|            result = self.fn(*self.args, **self.kwargs)
(call)|         1|      1.04345|      1.04345| 96.71%|# target_pprofile.py:10 longtask
(call)|      1000|      62.1931|    0.0621931|5763.96%|# target_pprofile.py:18 shorttask
    58|         0|            0|            0|  0.00%|        except BaseException as exc:
    59|         0|            0|            0|  0.00%|            self.future.set_exception(exc)
    60|         0|            0|            0|  0.00%|            # Break a reference cycle with the exception 'exc'
    61|         0|            0|            0|  0.00%|            self = None
    62|         0|            0|            0|  0.00%|        else:
    63|      1001|     0.020345|  2.03246e-05|  1.89%|            self.future.set_result(result)
(call)|      1001|     0.198745|  0.000198547| 18.42%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py:513 set_result
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|
    66|        81|   0.00069809|  8.61839e-06|  0.06%|def _worker(executor_reference, work_queue, initializer, initargs):
    67|        80|   0.00129628|  1.62035e-05|  0.12%|    if initializer is not None:
    68|         0|            0|            0|  0.00%|        try:
    69|         0|            0|            0|  0.00%|            initializer(*initargs)
    70|         0|            0|            0|  0.00%|        except BaseException:
    71|         0|            0|            0|  0.00%|            _base.LOGGER.critical('Exception in initializer:', exc_info=True)
    72|         0|            0|            0|  0.00%|            executor = executor_reference()
    73|         0|            0|            0|  0.00%|            if executor is not None:
    74|         0|            0|            0|  0.00%|                executor._initializer_failed()
    75|         0|            0|            0|  0.00%|            return
    76|        80|  0.000761271|  9.51588e-06|  0.07%|    try:
    77|        80|  0.000808716|  1.01089e-05|  0.07%|        while True:
    78|      1081|      8.31642|   0.00769327|770.75%|            work_item = work_queue.get(block=True)
    79|      1081|   0.00869131|  8.04007e-06|  0.81%|            if work_item is not None:
    80|      1001|     0.020128|  2.01079e-05|  1.87%|                work_item.run()
(call)|      1001|      63.6045|     0.063541|5894.76%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:52 run
    81|         0|            0|            0|  0.00%|                # Delete references to object. See issue16284
    82|      1001|   0.00786638|  7.85852e-06|  0.73%|                del work_item
    83|      1001|    0.0072391|  7.23187e-06|  0.67%|                continue
    84|        80|  0.000568628|  7.10785e-06|  0.05%|            executor = executor_reference()
    85|         0|            0|            0|  0.00%|            # Exit if:
    86|         0|            0|            0|  0.00%|            #   - The interpreter is shutting down OR
    87|         0|            0|            0|  0.00%|            #   - The executor that owns the worker has been collected OR
    88|         0|            0|            0|  0.00%|            #   - The executor that owns the worker has been shutdown.
    89|        80|  0.000849247|  1.06156e-05|  0.08%|            if _shutdown or executor is None or executor._shutdown:
    90|         0|            0|            0|  0.00%|                # Flag the executor as shutting down as early as possible if it
    91|         0|            0|            0|  0.00%|                # is not gc-ed yet.
    92|        80|   0.00073576|    9.197e-06|  0.07%|                if executor is not None:
    93|        80|  0.000698805|  8.73506e-06|  0.06%|                    executor._shutdown = True
    94|         0|            0|            0|  0.00%|                # Notice other workers
    95|        80|  0.000780106|  9.75132e-06|  0.07%|                work_queue.put(None)
    96|        80|  0.000745296|  9.31621e-06|  0.07%|                return
    97|         0|            0|            0|  0.00%|            del executor
    98|         0|            0|            0|  0.00%|    except BaseException:
    99|         0|            0|            0|  0.00%|        _base.LOGGER.critical('Exception in worker', exc_info=True)
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|
   102|         3|  8.01086e-05|  2.67029e-05|  0.01%|class BrokenThreadPool(_base.BrokenExecutor):
(call)|         1|  2.47955e-05|  2.47955e-05|  0.00%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:102 BrokenThreadPool
   103|         0|            0|            0|  0.00%|    """
   104|         0|            0|            0|  0.00%|    Raised when a worker thread in a ThreadPoolExecutor failed initializing.
   105|         1|  5.96046e-06|  5.96046e-06|  0.00%|    """
   106|         0|            0|            0|  0.00%|
   107|         0|            0|            0|  0.00%|
   108|         3|  8.60691e-05|  2.86897e-05|  0.01%|class ThreadPoolExecutor(_base.Executor):
(call)|         1|  0.000130177|  0.000130177|  0.01%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:108 ThreadPoolExecutor
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|    # Used to assign unique thread names when thread_name_prefix is not supplied.
   111|         1|   1.3113e-05|   1.3113e-05|  0.00%|    _counter = itertools.count().__next__
   112|         0|            0|            0|  0.00%|
   113|         1|  1.09673e-05|  1.09673e-05|  0.00%|    def __init__(self, max_workers=None, thread_name_prefix='',
   114|         1|  1.09673e-05|  1.09673e-05|  0.00%|                 initializer=None, initargs=()):
   115|         0|            0|            0|  0.00%|        """Initializes a new ThreadPoolExecutor instance.
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|        Args:
   118|         0|            0|            0|  0.00%|            max_workers: The maximum number of threads that can be used to
   119|         0|            0|            0|  0.00%|                execute the given calls.
   120|         0|            0|            0|  0.00%|            thread_name_prefix: An optional name prefix to give our threads.
   121|         0|            0|            0|  0.00%|            initializer: A callable used to initialize worker threads.
   122|         0|            0|            0|  0.00%|            initargs: A tuple of arguments to pass to the initializer.
   123|         0|            0|            0|  0.00%|        """
   124|         1|  1.00136e-05|  1.00136e-05|  0.00%|        if max_workers is None:
   125|         0|            0|            0|  0.00%|            # Use this number because ThreadPoolExecutor is often
   126|         0|            0|            0|  0.00%|            # used to overlap I/O instead of CPU work.
   127|         1|  1.69277e-05|  1.69277e-05|  0.00%|            max_workers = (os.cpu_count() or 1) * 5
   128|         1|  1.00136e-05|  1.00136e-05|  0.00%|        if max_workers <= 0:
   129|         0|            0|            0|  0.00%|            raise ValueError("max_workers must be greater than 0")
   130|         0|            0|            0|  0.00%|
   131|         1|   1.3113e-05|   1.3113e-05|  0.00%|        if initializer is not None and not callable(initializer):
   132|         0|            0|            0|  0.00%|            raise TypeError("initializer must be a callable")
   133|         0|            0|            0|  0.00%|
   134|         1|  8.82149e-06|  8.82149e-06|  0.00%|        self._max_workers = max_workers
   135|         1|   2.5034e-05|   2.5034e-05|  0.00%|        self._work_queue = queue.SimpleQueue()
   136|         1|   1.5974e-05|   1.5974e-05|  0.00%|        self._threads = set()
   137|         1|  8.82149e-06|  8.82149e-06|  0.00%|        self._broken = False
   138|         1|  9.29832e-06|  9.29832e-06|  0.00%|        self._shutdown = False
   139|         1|  1.00136e-05|  1.00136e-05|  0.00%|        self._shutdown_lock = threading.Lock()
   140|         1|  9.05991e-06|  9.05991e-06|  0.00%|        self._thread_name_prefix = (thread_name_prefix or
   141|         1|  1.19209e-05|  1.19209e-05|  0.00%|                                    ("ThreadPoolExecutor-%d" % self._counter()))
   142|         1|  9.05991e-06|  9.05991e-06|  0.00%|        self._initializer = initializer
   143|         1|  7.86781e-06|  7.86781e-06|  0.00%|        self._initargs = initargs
   144|         0|            0|            0|  0.00%|
   145|      1002|    0.0048902|  4.88044e-06|  0.45%|    def submit(*args, **kwargs):
   146|      1001|   0.00708842|  7.08134e-06|  0.66%|        if len(args) >= 2:
   147|      1001|   0.00823498|  8.22675e-06|  0.76%|            self, fn, *args = args
   148|         0|            0|            0|  0.00%|        elif not args:
   149|         0|            0|            0|  0.00%|            raise TypeError("descriptor 'submit' of 'ThreadPoolExecutor' object "
   150|         0|            0|            0|  0.00%|                            "needs an argument")
   151|         0|            0|            0|  0.00%|        elif 'fn' in kwargs:
   152|         0|            0|            0|  0.00%|            fn = kwargs.pop('fn')
   153|         0|            0|            0|  0.00%|            self, *args = args
   154|         0|            0|            0|  0.00%|        else:
   155|         0|            0|            0|  0.00%|            raise TypeError('submit expected at least 1 positional argument, '
   156|         0|            0|            0|  0.00%|                            'got %d' % (len(args)-1))
   157|         0|            0|            0|  0.00%|
   158|      1001|   0.00722837|  7.22115e-06|  0.67%|        with self._shutdown_lock:
   159|      1001|   0.00635839|  6.35203e-06|  0.59%|            if self._broken:
   160|         0|            0|            0|  0.00%|                raise BrokenThreadPool(self._broken)
   161|         0|            0|            0|  0.00%|
   162|      1001|   0.00626755|  6.26129e-06|  0.58%|            if self._shutdown:
   163|         0|            0|            0|  0.00%|                raise RuntimeError('cannot schedule new futures after shutdown')
   164|      1001|     0.006145|  6.13886e-06|  0.57%|            if _shutdown:
   165|         0|            0|            0|  0.00%|                raise RuntimeError('cannot schedule new futures after '
   166|         0|            0|            0|  0.00%|                                   'interpreter shutdown')
   167|         0|            0|            0|  0.00%|
   168|      1001|    0.0189447|  1.89258e-05|  1.76%|            f = _base.Future()
(call)|      1001|     0.163276|  0.000163113| 15.13%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py:312 __init__
   169|      1001|    0.0191278|  1.91087e-05|  1.77%|            w = _WorkItem(f, fn, args, kwargs)
(call)|      1001|    0.0283132|  2.82849e-05|  2.62%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:46 __init__
   170|         0|            0|            0|  0.00%|
   171|      1001|   0.00741053|  7.40312e-06|  0.69%|            self._work_queue.put(w)
   172|      1001|    0.0195134|  1.94939e-05|  1.81%|            self._adjust_thread_count()
(call)|      1001|     0.150942|  0.000150792| 13.99%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:176 _adjust_thread_count
   173|      1001|   0.00711036|  7.10325e-06|  0.66%|            return f
   174|         1|  2.09808e-05|  2.09808e-05|  0.00%|    submit.__doc__ = _base.Executor.submit.__doc__
   175|         0|            0|            0|  0.00%|
   176|      1002|   0.00515604|  5.14575e-06|  0.48%|    def _adjust_thread_count(self):
   177|         0|            0|            0|  0.00%|        # When the executor gets lost, the weakref callback will wake up
   178|         0|            0|            0|  0.00%|        # the worker threads.
   179|      1001|    0.0072875|  7.28022e-06|  0.68%|        def weakref_cb(_, q=self._work_queue):
   180|         0|            0|            0|  0.00%|            q.put(None)
   181|         0|            0|            0|  0.00%|        # TODO(bquinlan): Should avoid creating new threads if there are more
   182|         0|            0|            0|  0.00%|        # idle threads than items in the work queue.
   183|      1001|    0.0069499|  6.94296e-06|  0.64%|        num_threads = len(self._threads)
   184|      1001|   0.00648046|  6.47398e-06|  0.60%|        if num_threads < self._max_workers:
   185|        80|  0.000551701|  6.89626e-06|  0.05%|            thread_name = '%s_%d' % (self._thread_name_prefix or self,
   186|        80|  0.000654697|  8.18372e-06|  0.06%|                                     num_threads)
   187|        80|   0.00136685|  1.70857e-05|  0.13%|            t = threading.Thread(name=thread_name, target=_worker,
   188|        80|  0.000561953|  7.02441e-06|  0.05%|                                 args=(weakref.ref(self, weakref_cb),
   189|        80|  0.000517845|  6.47306e-06|  0.05%|                                       self._work_queue,
   190|        80|  0.000487566|  6.09457e-06|  0.05%|                                       self._initializer,
   191|        80|   0.00165439|  2.06798e-05|  0.15%|                                       self._initargs))
(call)|        80|    0.0275276|  0.000344095|  2.55%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:763 __init__
   192|        80|   0.00136328|   1.7041e-05|  0.13%|            t.daemon = True
(call)|        80|   0.00335526|  4.19408e-05|  0.31%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1131 daemon
   193|        80|   0.00150418|  1.88023e-05|  0.14%|            t.start()
(call)|        80|    0.0823457|   0.00102932|  7.63%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:834 start
   194|        80|   0.00059557|  7.44462e-06|  0.06%|            self._threads.add(t)
   195|        80|   0.00152922|  1.91152e-05|  0.14%|            _threads_queues[t] = self._work_queue
(call)|        80|   0.00107098|  1.33872e-05|  0.10%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/weakref.py:408 __setitem__
   196|         0|            0|            0|  0.00%|
   197|         1|  1.09673e-05|  1.09673e-05|  0.00%|    def _initializer_failed(self):
   198|         0|            0|            0|  0.00%|        with self._shutdown_lock:
   199|         0|            0|            0|  0.00%|            self._broken = ('A thread initializer failed, the thread pool '
   200|         0|            0|            0|  0.00%|                            'is not usable anymore')
   201|         0|            0|            0|  0.00%|            # Drain work queue and mark pending futures failed
   202|         0|            0|            0|  0.00%|            while True:
   203|         0|            0|            0|  0.00%|                try:
   204|         0|            0|            0|  0.00%|                    work_item = self._work_queue.get_nowait()
   205|         0|            0|            0|  0.00%|                except queue.Empty:
   206|         0|            0|            0|  0.00%|                    break
   207|         0|            0|            0|  0.00%|                if work_item is not None:
   208|         0|            0|            0|  0.00%|                    work_item.future.set_exception(BrokenThreadPool(self._broken))
   209|         0|            0|            0|  0.00%|
   210|         2|   1.5974e-05|  7.98702e-06|  0.00%|    def shutdown(self, wait=True):
   211|         1|  7.15256e-06|  7.15256e-06|  0.00%|        with self._shutdown_lock:
   212|         1|  7.86781e-06|  7.86781e-06|  0.00%|            self._shutdown = True
   213|         1|  7.86781e-06|  7.86781e-06|  0.00%|            self._work_queue.put(None)
   214|         1|  7.39098e-06|  7.39098e-06|  0.00%|        if wait:
   215|        81|  0.000492573|  6.08115e-06|  0.05%|            for t in self._threads:
   216|        80|   0.00136805|  1.71006e-05|  0.13%|                t.join()
(call)|        80|     0.557378|   0.00696723| 51.66%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1012 join
   217|         1|  1.09673e-05|  1.09673e-05|  0.00%|    shutdown.__doc__ = _base.Executor.shutdown.__doc__
File: /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py
File duration: 0.902639s (83.66%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""Thread module emulating a subset of Java's threading model."""
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|import os as _os
     4|         0|            0|            0|  0.00%|import sys as _sys
     5|         0|            0|            0|  0.00%|import _thread
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|from time import monotonic as _time
     8|         0|            0|            0|  0.00%|from traceback import format_exc as _format_exc
     9|         0|            0|            0|  0.00%|from _weakrefset import WeakSet
    10|         0|            0|            0|  0.00%|from itertools import islice as _islice, count as _count
    11|         0|            0|            0|  0.00%|try:
    12|         0|            0|            0|  0.00%|    from _collections import deque as _deque
    13|         0|            0|            0|  0.00%|except ImportError:
    14|         0|            0|            0|  0.00%|    from collections import deque as _deque
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|# Note regarding PEP 8 compliant names
    17|         0|            0|            0|  0.00%|#  This threading model was originally inspired by Java, and inherited
    18|         0|            0|            0|  0.00%|# the convention of camelCase function and method names from that
    19|         0|            0|            0|  0.00%|# language. Those original names are not in any imminent danger of
    20|         0|            0|            0|  0.00%|# being deprecated (even for Py3k),so this module provides them as an
    21|         0|            0|            0|  0.00%|# alias for the PEP 8 compliant names
    22|         0|            0|            0|  0.00%|# Note that using the new PEP 8 compliant names facilitates substitution
    23|         0|            0|            0|  0.00%|# with the multiprocessing module, which doesn't provide the old
    24|         0|            0|            0|  0.00%|# Java inspired names.
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|__all__ = ['get_ident', 'active_count', 'Condition', 'current_thread',
    27|         0|            0|            0|  0.00%|           'enumerate', 'main_thread', 'TIMEOUT_MAX',
    28|         0|            0|            0|  0.00%|           'Event', 'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread',
    29|         0|            0|            0|  0.00%|           'Barrier', 'BrokenBarrierError', 'Timer', 'ThreadError',
    30|         0|            0|            0|  0.00%|           'setprofile', 'settrace', 'local', 'stack_size']
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|# Rename some stuff so "from threading import *" is safe
    33|         0|            0|            0|  0.00%|_start_new_thread = _thread.start_new_thread
    34|         0|            0|            0|  0.00%|_allocate_lock = _thread.allocate_lock
    35|         0|            0|            0|  0.00%|_set_sentinel = _thread._set_sentinel
    36|         0|            0|            0|  0.00%|get_ident = _thread.get_ident
    37|         0|            0|            0|  0.00%|ThreadError = _thread.error
    38|         0|            0|            0|  0.00%|try:
    39|         0|            0|            0|  0.00%|    _CRLock = _thread.RLock
    40|         0|            0|            0|  0.00%|except AttributeError:
    41|         0|            0|            0|  0.00%|    _CRLock = None
    42|         0|            0|            0|  0.00%|TIMEOUT_MAX = _thread.TIMEOUT_MAX
    43|         0|            0|            0|  0.00%|del _thread
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|# Support for profile and trace hooks
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|_profile_hook = None
    49|         0|            0|            0|  0.00%|_trace_hook = None
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|def setprofile(func):
    52|         0|            0|            0|  0.00%|    """Set a profile function for all threads started from the threading module.
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|    The func will be passed to sys.setprofile() for each thread, before its
    55|         0|            0|            0|  0.00%|    run() method is called.
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|    """
    58|         0|            0|            0|  0.00%|    global _profile_hook
    59|         0|            0|            0|  0.00%|    _profile_hook = func
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|def settrace(func):
    62|         0|            0|            0|  0.00%|    """Set a trace function for all threads started from the threading module.
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|    The func will be passed to sys.settrace() for each thread, before its run()
    65|         0|            0|            0|  0.00%|    method is called.
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|    """
    68|         0|            0|            0|  0.00%|    global _trace_hook
    69|         0|            0|            0|  0.00%|    _trace_hook = func
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|# Synchronization classes
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|Lock = _allocate_lock
    74|         0|            0|            0|  0.00%|
    75|      1001|   0.00462437|  4.61975e-06|  0.43%|def RLock(*args, **kwargs):
    76|         0|            0|            0|  0.00%|    """Factory function that returns a new reentrant lock.
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    A reentrant lock must be released by the thread that acquired it. Once a
    79|         0|            0|            0|  0.00%|    thread has acquired a reentrant lock, the same thread may acquire it again
    80|         0|            0|            0|  0.00%|    without blocking; the thread must release it once for each time it has
    81|         0|            0|            0|  0.00%|    acquired it.
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|    """
    84|      1001|   0.00566936|  5.66369e-06|  0.53%|    if _CRLock is None:
    85|         0|            0|            0|  0.00%|        return _PyRLock(*args, **kwargs)
    86|      1001|   0.00732183|  7.31452e-06|  0.68%|    return _CRLock(*args, **kwargs)
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|class _RLock:
    89|         0|            0|            0|  0.00%|    """This class implements reentrant lock objects.
    90|         0|            0|            0|  0.00%|
    91|         0|            0|            0|  0.00%|    A reentrant lock must be released by the thread that acquired it. Once a
    92|         0|            0|            0|  0.00%|    thread has acquired a reentrant lock, the same thread may acquire it
    93|         0|            0|            0|  0.00%|    again without blocking; the thread must release it once for each time it
    94|         0|            0|            0|  0.00%|    has acquired it.
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|    """
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|    def __init__(self):
    99|         0|            0|            0|  0.00%|        self._block = _allocate_lock()
   100|         0|            0|            0|  0.00%|        self._owner = None
   101|         0|            0|            0|  0.00%|        self._count = 0
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|    def __repr__(self):
   104|         0|            0|            0|  0.00%|        owner = self._owner
   105|         0|            0|            0|  0.00%|        try:
   106|         0|            0|            0|  0.00%|            owner = _active[owner].name
   107|         0|            0|            0|  0.00%|        except KeyError:
   108|         0|            0|            0|  0.00%|            pass
   109|         0|            0|            0|  0.00%|        return "<%s %s.%s object owner=%r count=%d at %s>" % (
   110|         0|            0|            0|  0.00%|            "locked" if self._block.locked() else "unlocked",
   111|         0|            0|            0|  0.00%|            self.__class__.__module__,
   112|         0|            0|            0|  0.00%|            self.__class__.__qualname__,
   113|         0|            0|            0|  0.00%|            owner,
   114|         0|            0|            0|  0.00%|            self._count,
   115|         0|            0|            0|  0.00%|            hex(id(self))
   116|         0|            0|            0|  0.00%|        )
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|    def acquire(self, blocking=True, timeout=-1):
   119|         0|            0|            0|  0.00%|        """Acquire a lock, blocking or non-blocking.
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|        When invoked without arguments: if this thread already owns the lock,
   122|         0|            0|            0|  0.00%|        increment the recursion level by one, and return immediately. Otherwise,
   123|         0|            0|            0|  0.00%|        if another thread owns the lock, block until the lock is unlocked. Once
   124|         0|            0|            0|  0.00%|        the lock is unlocked (not owned by any thread), then grab ownership, set
   125|         0|            0|            0|  0.00%|        the recursion level to one, and return. If more than one thread is
   126|         0|            0|            0|  0.00%|        blocked waiting until the lock is unlocked, only one at a time will be
   127|         0|            0|            0|  0.00%|        able to grab ownership of the lock. There is no return value in this
   128|         0|            0|            0|  0.00%|        case.
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|        When invoked with the blocking argument set to true, do the same thing
   131|         0|            0|            0|  0.00%|        as when called without arguments, and return true.
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|        When invoked with the blocking argument set to false, do not block. If a
   134|         0|            0|            0|  0.00%|        call without an argument would block, return false immediately;
   135|         0|            0|            0|  0.00%|        otherwise, do the same thing as when called without arguments, and
   136|         0|            0|            0|  0.00%|        return true.
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|        When invoked with the floating-point timeout argument set to a positive
   139|         0|            0|            0|  0.00%|        value, block for at most the number of seconds specified by timeout
   140|         0|            0|            0|  0.00%|        and as long as the lock cannot be acquired.  Return true if the lock has
   141|         0|            0|            0|  0.00%|        been acquired, false if the timeout has elapsed.
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|        """
   144|         0|            0|            0|  0.00%|        me = get_ident()
   145|         0|            0|            0|  0.00%|        if self._owner == me:
   146|         0|            0|            0|  0.00%|            self._count += 1
   147|         0|            0|            0|  0.00%|            return 1
   148|         0|            0|            0|  0.00%|        rc = self._block.acquire(blocking, timeout)
   149|         0|            0|            0|  0.00%|        if rc:
   150|         0|            0|            0|  0.00%|            self._owner = me
   151|         0|            0|            0|  0.00%|            self._count = 1
   152|         0|            0|            0|  0.00%|        return rc
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|    __enter__ = acquire
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|    def release(self):
   157|         0|            0|            0|  0.00%|        """Release a lock, decrementing the recursion level.
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|        If after the decrement it is zero, reset the lock to unlocked (not owned
   160|         0|            0|            0|  0.00%|        by any thread), and if any other threads are blocked waiting for the
   161|         0|            0|            0|  0.00%|        lock to become unlocked, allow exactly one of them to proceed. If after
   162|         0|            0|            0|  0.00%|        the decrement the recursion level is still nonzero, the lock remains
   163|         0|            0|            0|  0.00%|        locked and owned by the calling thread.
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|        Only call this method when the calling thread owns the lock. A
   166|         0|            0|            0|  0.00%|        RuntimeError is raised if this method is called when the lock is
   167|         0|            0|            0|  0.00%|        unlocked.
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|        There is no return value.
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|        """
   172|         0|            0|            0|  0.00%|        if self._owner != get_ident():
   173|         0|            0|            0|  0.00%|            raise RuntimeError("cannot release un-acquired lock")
   174|         0|            0|            0|  0.00%|        self._count = count = self._count - 1
   175|         0|            0|            0|  0.00%|        if not count:
   176|         0|            0|            0|  0.00%|            self._owner = None
   177|         0|            0|            0|  0.00%|            self._block.release()
   178|         0|            0|            0|  0.00%|
   179|         0|            0|            0|  0.00%|    def __exit__(self, t, v, tb):
   180|         0|            0|            0|  0.00%|        self.release()
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|    # Internal methods used by condition variables
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|    def _acquire_restore(self, state):
   185|         0|            0|            0|  0.00%|        self._block.acquire()
   186|         0|            0|            0|  0.00%|        self._count, self._owner = state
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|    def _release_save(self):
   189|         0|            0|            0|  0.00%|        if self._count == 0:
   190|         0|            0|            0|  0.00%|            raise RuntimeError("cannot release un-acquired lock")
   191|         0|            0|            0|  0.00%|        count = self._count
   192|         0|            0|            0|  0.00%|        self._count = 0
   193|         0|            0|            0|  0.00%|        owner = self._owner
   194|         0|            0|            0|  0.00%|        self._owner = None
   195|         0|            0|            0|  0.00%|        self._block.release()
   196|         0|            0|            0|  0.00%|        return (count, owner)
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|    def _is_owned(self):
   199|         0|            0|            0|  0.00%|        return self._owner == get_ident()
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|_PyRLock = _RLock
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|class Condition:
   205|         0|            0|            0|  0.00%|    """Class that implements a condition variable.
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|    A condition variable allows one or more threads to wait until they are
   208|         0|            0|            0|  0.00%|    notified by another thread.
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|    If the lock argument is given and not None, it must be a Lock or RLock
   211|         0|            0|            0|  0.00%|    object, and it is used as the underlying lock. Otherwise, a new RLock object
   212|         0|            0|            0|  0.00%|    is created and used as the underlying lock.
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|    """
   215|         0|            0|            0|  0.00%|
   216|      1081|   0.00479913|  4.43953e-06|  0.44%|    def __init__(self, lock=None):
   217|      1081|   0.00626397|  5.79461e-06|  0.58%|        if lock is None:
   218|      1001|    0.0179708|  1.79528e-05|  1.67%|            lock = RLock()
(call)|      1001|    0.0176156|   1.7598e-05|  1.63%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:75 RLock
   219|      1081|   0.00640178|  5.92209e-06|  0.59%|        self._lock = lock
   220|         0|            0|            0|  0.00%|        # Export the lock's acquire() and release() methods
   221|      1081|   0.00631809|  5.84467e-06|  0.59%|        self.acquire = lock.acquire
   222|      1081|   0.00734806|  6.79747e-06|  0.68%|        self.release = lock.release
   223|         0|            0|            0|  0.00%|        # If the lock defines _release_save() and/or _acquire_restore(),
   224|         0|            0|            0|  0.00%|        # these override the default implementations (which just call
   225|         0|            0|            0|  0.00%|        # release() and acquire() on the lock).  Ditto for _is_owned().
   226|      1081|   0.00723672|  6.69447e-06|  0.67%|        try:
   227|      1081|   0.00734782|  6.79725e-06|  0.68%|            self._release_save = lock._release_save
   228|        80|  0.000528097|  6.60121e-06|  0.05%|        except AttributeError:
   229|        80|  0.000579119|  7.23898e-06|  0.05%|            pass
   230|      1081|   0.00751305|  6.95009e-06|  0.70%|        try:
   231|      1081|   0.00770855|  7.13094e-06|  0.71%|            self._acquire_restore = lock._acquire_restore
   232|        80|  0.000483751|  6.04689e-06|  0.04%|        except AttributeError:
   233|        80|  0.000467539|  5.84424e-06|  0.04%|            pass
   234|      1081|   0.00591683|  5.47348e-06|  0.55%|        try:
   235|      1081|   0.00745559|  6.89694e-06|  0.69%|            self._is_owned = lock._is_owned
   236|        80|  0.000502586|  6.28233e-06|  0.05%|        except AttributeError:
   237|        80|  0.000445366|  5.56707e-06|  0.04%|            pass
   238|      1081|   0.00720859|  6.66844e-06|  0.67%|        self._waiters = _deque()
   239|         0|            0|            0|  0.00%|
   240|      2082|   0.00964999|  4.63496e-06|  0.89%|    def __enter__(self):
   241|      2082|    0.0155094|  7.44926e-06|  1.44%|        return self._lock.__enter__()
   242|         0|            0|            0|  0.00%|
   243|      2082|   0.00969577|  4.65695e-06|  0.90%|    def __exit__(self, *args):
   244|      2082|    0.0143588|  6.89662e-06|  1.33%|        return self._lock.__exit__(*args)
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    def __repr__(self):
   247|         0|            0|            0|  0.00%|        return "<Condition(%s, %d)>" % (self._lock, len(self._waiters))
   248|         0|            0|            0|  0.00%|
   249|        80|  0.000329256|   4.1157e-06|  0.03%|    def _release_save(self):
   250|        80|  0.000494957|  6.18696e-06|  0.05%|        self._lock.release()           # No state to save
   251|         0|            0|            0|  0.00%|
   252|        80|  0.000453472|   5.6684e-06|  0.04%|    def _acquire_restore(self, x):
   253|        80|  0.000552893|  6.91116e-06|  0.05%|        self._lock.acquire()           # Ignore saved state
   254|         0|            0|            0|  0.00%|
   255|        80|  0.000333309|  4.16636e-06|  0.03%|    def _is_owned(self):
   256|         0|            0|            0|  0.00%|        # Return True if lock is owned by current_thread.
   257|         0|            0|            0|  0.00%|        # This method is called only if _lock doesn't have _is_owned().
   258|        80|  0.000511169|  6.38962e-06|  0.05%|        if self._lock.acquire(0):
   259|         0|            0|            0|  0.00%|            self._lock.release()
   260|         0|            0|            0|  0.00%|            return False
   261|         0|            0|            0|  0.00%|        else:
   262|        80|  0.000492573|  6.15716e-06|  0.05%|            return True
   263|         0|            0|            0|  0.00%|
   264|        80|  0.000381231|  4.76539e-06|  0.04%|    def wait(self, timeout=None):
   265|         0|            0|            0|  0.00%|        """Wait until notified or until a timeout occurs.
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|        If the calling thread has not acquired the lock when this method is
   268|         0|            0|            0|  0.00%|        called, a RuntimeError is raised.
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|        This method releases the underlying lock, and then blocks until it is
   271|         0|            0|            0|  0.00%|        awakened by a notify() or notify_all() call for the same condition
   272|         0|            0|            0|  0.00%|        variable in another thread, or until the optional timeout occurs. Once
   273|         0|            0|            0|  0.00%|        awakened or timed out, it re-acquires the lock and returns.
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|        When the timeout argument is present and not None, it should be a
   276|         0|            0|            0|  0.00%|        floating point number specifying a timeout for the operation in seconds
   277|         0|            0|            0|  0.00%|        (or fractions thereof).
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|        When the underlying lock is an RLock, it is not released using its
   280|         0|            0|            0|  0.00%|        release() method, since this may not actually unlock the lock when it
   281|         0|            0|            0|  0.00%|        was acquired multiple times recursively. Instead, an internal interface
   282|         0|            0|            0|  0.00%|        of the RLock class is used, which really unlocks it even when it has
   283|         0|            0|            0|  0.00%|        been recursively acquired several times. Another internal interface is
   284|         0|            0|            0|  0.00%|        then used to restore the recursion level when the lock is reacquired.
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|        """
   287|        80|   0.00138593|  1.73241e-05|  0.13%|        if not self._is_owned():
(call)|        80|   0.00133705|  1.67131e-05|  0.12%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:255 _is_owned
   288|         0|            0|            0|  0.00%|            raise RuntimeError("cannot wait on un-acquired lock")
   289|        80|  0.000632048|   7.9006e-06|  0.06%|        waiter = _allocate_lock()
   290|        80|  0.000533819|  6.67274e-06|  0.05%|        waiter.acquire()
   291|        80|  0.000651598|  8.14497e-06|  0.06%|        self._waiters.append(waiter)
   292|        80|   0.00132775|  1.65969e-05|  0.12%|        saved_state = self._release_save()
(call)|        80|  0.000824213|  1.03027e-05|  0.08%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:249 _release_save
   293|        80|  0.000505209|  6.31511e-06|  0.05%|        gotit = False
   294|        80|  0.000495434|  6.19292e-06|  0.05%|        try:    # restore state no matter what (e.g., KeyboardInterrupt)
   295|        80|  0.000446558|  5.58197e-06|  0.04%|            if timeout is None:
   296|        80|    0.0527046|  0.000658807|  4.88%|                waiter.acquire()
   297|        80|   0.00100732|  1.25915e-05|  0.09%|                gotit = True
   298|         0|            0|            0|  0.00%|            else:
   299|         0|            0|            0|  0.00%|                if timeout > 0:
   300|         0|            0|            0|  0.00%|                    gotit = waiter.acquire(True, timeout)
   301|         0|            0|            0|  0.00%|                else:
   302|         0|            0|            0|  0.00%|                    gotit = waiter.acquire(False)
   303|        80|  0.000517607|  6.47008e-06|  0.05%|            return gotit
   304|         0|            0|            0|  0.00%|        finally:
   305|        80|   0.00155592|   1.9449e-05|  0.14%|            self._acquire_restore(saved_state)
(call)|        80|   0.00100636|  1.25796e-05|  0.09%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:252 _acquire_restore
   306|        80|  0.000509024|   6.3628e-06|  0.05%|            if not gotit:
   307|         0|            0|            0|  0.00%|                try:
   308|         0|            0|            0|  0.00%|                    self._waiters.remove(waiter)
   309|         0|            0|            0|  0.00%|                except ValueError:
   310|         0|            0|            0|  0.00%|                    pass
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|    def wait_for(self, predicate, timeout=None):
   313|         0|            0|            0|  0.00%|        """Wait until a condition evaluates to True.
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|        predicate should be a callable which result will be interpreted as a
   316|         0|            0|            0|  0.00%|        boolean value.  A timeout may be provided giving the maximum time to
   317|         0|            0|            0|  0.00%|        wait.
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|        """
   320|         0|            0|            0|  0.00%|        endtime = None
   321|         0|            0|            0|  0.00%|        waittime = timeout
   322|         0|            0|            0|  0.00%|        result = predicate()
   323|         0|            0|            0|  0.00%|        while not result:
   324|         0|            0|            0|  0.00%|            if waittime is not None:
   325|         0|            0|            0|  0.00%|                if endtime is None:
   326|         0|            0|            0|  0.00%|                    endtime = _time() + waittime
   327|         0|            0|            0|  0.00%|                else:
   328|         0|            0|            0|  0.00%|                    waittime = endtime - _time()
   329|         0|            0|            0|  0.00%|                    if waittime <= 0:
   330|         0|            0|            0|  0.00%|                        break
   331|         0|            0|            0|  0.00%|            self.wait(waittime)
   332|         0|            0|            0|  0.00%|            result = predicate()
   333|         0|            0|            0|  0.00%|        return result
   334|         0|            0|            0|  0.00%|
   335|      1001|   0.00525641|  5.25116e-06|  0.49%|    def notify(self, n=1):
   336|         0|            0|            0|  0.00%|        """Wake up one or more threads waiting on this condition, if any.
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|        If the calling thread has not acquired the lock when this method is
   339|         0|            0|            0|  0.00%|        called, a RuntimeError is raised.
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|        This method wakes up at most n of the threads waiting for the condition
   342|         0|            0|            0|  0.00%|        variable; it is a no-op if no threads are waiting.
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|        """
   345|      1001|   0.00770235|  7.69466e-06|  0.71%|        if not self._is_owned():
   346|         0|            0|            0|  0.00%|            raise RuntimeError("cannot notify on un-acquired lock")
   347|      1001|   0.00687838|   6.8715e-06|  0.64%|        all_waiters = self._waiters
   348|      1001|    0.0085566|  8.54806e-06|  0.79%|        waiters_to_notify = _deque(_islice(all_waiters, n))
   349|      1001|   0.00705433|  7.04728e-06|  0.65%|        if not waiters_to_notify:
   350|      1001|    0.0066216|  6.61498e-06|  0.61%|            return
   351|         0|            0|            0|  0.00%|        for waiter in waiters_to_notify:
   352|         0|            0|            0|  0.00%|            waiter.release()
   353|         0|            0|            0|  0.00%|            try:
   354|         0|            0|            0|  0.00%|                all_waiters.remove(waiter)
   355|         0|            0|            0|  0.00%|            except ValueError:
   356|         0|            0|            0|  0.00%|                pass
   357|         0|            0|            0|  0.00%|
   358|      1001|   0.00457358|  4.56901e-06|  0.42%|    def notify_all(self):
   359|         0|            0|            0|  0.00%|        """Wake up all threads waiting on this condition.
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|        If the calling thread has not acquired the lock when this method
   362|         0|            0|            0|  0.00%|        is called, a RuntimeError is raised.
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|        """
   365|      1001|    0.0202947|  2.02744e-05|  1.88%|        self.notify(len(self._waiters))
(call)|      1001|    0.0420697|  4.20276e-05|  3.90%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:335 notify
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|    notifyAll = notify_all
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|class Semaphore:
   371|         0|            0|            0|  0.00%|    """This class implements semaphore objects.
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|    Semaphores manage a counter representing the number of release() calls minus
   374|         0|            0|            0|  0.00%|    the number of acquire() calls, plus an initial value. The acquire() method
   375|         0|            0|            0|  0.00%|    blocks if necessary until it can return without making the counter
   376|         0|            0|            0|  0.00%|    negative. If not given, value defaults to 1.
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|    """
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|    # After Tim Peters' semaphore class, but not quite the same (no maximum)
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|    def __init__(self, value=1):
   383|         0|            0|            0|  0.00%|        if value < 0:
   384|         0|            0|            0|  0.00%|            raise ValueError("semaphore initial value must be >= 0")
   385|         0|            0|            0|  0.00%|        self._cond = Condition(Lock())
   386|         0|            0|            0|  0.00%|        self._value = value
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|    def acquire(self, blocking=True, timeout=None):
   389|         0|            0|            0|  0.00%|        """Acquire a semaphore, decrementing the internal counter by one.
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|        When invoked without arguments: if the internal counter is larger than
   392|         0|            0|            0|  0.00%|        zero on entry, decrement it by one and return immediately. If it is zero
   393|         0|            0|            0|  0.00%|        on entry, block, waiting until some other thread has called release() to
   394|         0|            0|            0|  0.00%|        make it larger than zero. This is done with proper interlocking so that
   395|         0|            0|            0|  0.00%|        if multiple acquire() calls are blocked, release() will wake exactly one
   396|         0|            0|            0|  0.00%|        of them up. The implementation may pick one at random, so the order in
   397|         0|            0|            0|  0.00%|        which blocked threads are awakened should not be relied on. There is no
   398|         0|            0|            0|  0.00%|        return value in this case.
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|        When invoked with blocking set to true, do the same thing as when called
   401|         0|            0|            0|  0.00%|        without arguments, and return true.
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|        When invoked with blocking set to false, do not block. If a call without
   404|         0|            0|            0|  0.00%|        an argument would block, return false immediately; otherwise, do the
   405|         0|            0|            0|  0.00%|        same thing as when called without arguments, and return true.
   406|         0|            0|            0|  0.00%|
   407|         0|            0|            0|  0.00%|        When invoked with a timeout other than None, it will block for at
   408|         0|            0|            0|  0.00%|        most timeout seconds.  If acquire does not complete successfully in
   409|         0|            0|            0|  0.00%|        that interval, return false.  Return true otherwise.
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|        """
   412|         0|            0|            0|  0.00%|        if not blocking and timeout is not None:
   413|         0|            0|            0|  0.00%|            raise ValueError("can't specify timeout for non-blocking acquire")
   414|         0|            0|            0|  0.00%|        rc = False
   415|         0|            0|            0|  0.00%|        endtime = None
   416|         0|            0|            0|  0.00%|        with self._cond:
   417|         0|            0|            0|  0.00%|            while self._value == 0:
   418|         0|            0|            0|  0.00%|                if not blocking:
   419|         0|            0|            0|  0.00%|                    break
   420|         0|            0|            0|  0.00%|                if timeout is not None:
   421|         0|            0|            0|  0.00%|                    if endtime is None:
   422|         0|            0|            0|  0.00%|                        endtime = _time() + timeout
   423|         0|            0|            0|  0.00%|                    else:
   424|         0|            0|            0|  0.00%|                        timeout = endtime - _time()
   425|         0|            0|            0|  0.00%|                        if timeout <= 0:
   426|         0|            0|            0|  0.00%|                            break
   427|         0|            0|            0|  0.00%|                self._cond.wait(timeout)
   428|         0|            0|            0|  0.00%|            else:
   429|         0|            0|            0|  0.00%|                self._value -= 1
   430|         0|            0|            0|  0.00%|                rc = True
   431|         0|            0|            0|  0.00%|        return rc
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|    __enter__ = acquire
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|    def release(self):
   436|         0|            0|            0|  0.00%|        """Release a semaphore, incrementing the internal counter by one.
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|        When the counter is zero on entry and another thread is waiting for it
   439|         0|            0|            0|  0.00%|        to become larger than zero again, wake up that thread.
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|        """
   442|         0|            0|            0|  0.00%|        with self._cond:
   443|         0|            0|            0|  0.00%|            self._value += 1
   444|         0|            0|            0|  0.00%|            self._cond.notify()
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|    def __exit__(self, t, v, tb):
   447|         0|            0|            0|  0.00%|        self.release()
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|class BoundedSemaphore(Semaphore):
   451|         0|            0|            0|  0.00%|    """Implements a bounded semaphore.
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|    A bounded semaphore checks to make sure its current value doesn't exceed its
   454|         0|            0|            0|  0.00%|    initial value. If it does, ValueError is raised. In most situations
   455|         0|            0|            0|  0.00%|    semaphores are used to guard resources with limited capacity.
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|    If the semaphore is released too many times it's a sign of a bug. If not
   458|         0|            0|            0|  0.00%|    given, value defaults to 1.
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|    Like regular semaphores, bounded semaphores manage a counter representing
   461|         0|            0|            0|  0.00%|    the number of release() calls minus the number of acquire() calls, plus an
   462|         0|            0|            0|  0.00%|    initial value. The acquire() method blocks if necessary until it can return
   463|         0|            0|            0|  0.00%|    without making the counter negative. If not given, value defaults to 1.
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|    """
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|    def __init__(self, value=1):
   468|         0|            0|            0|  0.00%|        Semaphore.__init__(self, value)
   469|         0|            0|            0|  0.00%|        self._initial_value = value
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|    def release(self):
   472|         0|            0|            0|  0.00%|        """Release a semaphore, incrementing the internal counter by one.
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|        When the counter is zero on entry and another thread is waiting for it
   475|         0|            0|            0|  0.00%|        to become larger than zero again, wake up that thread.
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|        If the number of releases exceeds the number of acquires,
   478|         0|            0|            0|  0.00%|        raise a ValueError.
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|        """
   481|         0|            0|            0|  0.00%|        with self._cond:
   482|         0|            0|            0|  0.00%|            if self._value >= self._initial_value:
   483|         0|            0|            0|  0.00%|                raise ValueError("Semaphore released too many times")
   484|         0|            0|            0|  0.00%|            self._value += 1
   485|         0|            0|            0|  0.00%|            self._cond.notify()
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|class Event:
   489|         0|            0|            0|  0.00%|    """Class implementing event objects.
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|    Events manage a flag that can be set to true with the set() method and reset
   492|         0|            0|            0|  0.00%|    to false with the clear() method. The wait() method blocks until the flag is
   493|         0|            0|            0|  0.00%|    true.  The flag is initially false.
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|    """
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|    # After Tim Peters' event class (without is_posted())
   498|         0|            0|            0|  0.00%|
   499|        80|  0.000343084|  4.28855e-06|  0.03%|    def __init__(self):
   500|        80|     0.001513|  1.89126e-05|  0.14%|        self._cond = Condition(Lock())
(call)|        80|   0.00914335|  0.000114292|  0.85%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:216 __init__
   501|        80|  0.000474453|  5.93066e-06|  0.04%|        self._flag = False
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|    def _reset_internal_locks(self):
   504|         0|            0|            0|  0.00%|        # private!  called by Thread._reset_internal_locks by _after_fork()
   505|         0|            0|            0|  0.00%|        self._cond.__init__(Lock())
   506|         0|            0|            0|  0.00%|
   507|       240|   0.00099802|  4.15842e-06|  0.09%|    def is_set(self):
   508|         0|            0|            0|  0.00%|        """Return true if and only if the internal flag is true."""
   509|       240|    0.0014441|  6.01709e-06|  0.13%|        return self._flag
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|    isSet = is_set
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|    def set(self):
   514|         0|            0|            0|  0.00%|        """Set the internal flag to true.
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|        All threads waiting for it to become true are awakened. Threads
   517|         0|            0|            0|  0.00%|        that call wait() once the flag is true will not block at all.
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|        """
   520|         0|            0|            0|  0.00%|        with self._cond:
   521|         0|            0|            0|  0.00%|            self._flag = True
   522|         0|            0|            0|  0.00%|            self._cond.notify_all()
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|    def clear(self):
   525|         0|            0|            0|  0.00%|        """Reset the internal flag to false.
   526|         0|            0|            0|  0.00%|
   527|         0|            0|            0|  0.00%|        Subsequently, threads calling wait() will block until set() is called to
   528|         0|            0|            0|  0.00%|        set the internal flag to true again.
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|        """
   531|         0|            0|            0|  0.00%|        with self._cond:
   532|         0|            0|            0|  0.00%|            self._flag = False
   533|         0|            0|            0|  0.00%|
   534|        80|  0.000402689|  5.03361e-06|  0.04%|    def wait(self, timeout=None):
   535|         0|            0|            0|  0.00%|        """Block until the internal flag is true.
   536|         0|            0|            0|  0.00%|
   537|         0|            0|            0|  0.00%|        If the internal flag is true on entry, return immediately. Otherwise,
   538|         0|            0|            0|  0.00%|        block until another thread calls set() to set the flag to true, or until
   539|         0|            0|            0|  0.00%|        the optional timeout occurs.
   540|         0|            0|            0|  0.00%|
   541|         0|            0|            0|  0.00%|        When the timeout argument is present and not None, it should be a
   542|         0|            0|            0|  0.00%|        floating point number specifying a timeout for the operation in seconds
   543|         0|            0|            0|  0.00%|        (or fractions thereof).
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|        This method returns the internal flag on exit, so it will always return
   546|         0|            0|            0|  0.00%|        True except if a timeout is given and the operation times out.
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|        """
   549|        80|   0.00136232|   1.7029e-05|  0.13%|        with self._cond:
(call)|        80|  0.000842094|  1.05262e-05|  0.08%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:240 __enter__
   550|        80|  0.000473976|   5.9247e-06|  0.04%|            signaled = self._flag
   551|        80|  0.000467539|  5.84424e-06|  0.04%|            if not signaled:
   552|        80|   0.00152254|  1.90318e-05|  0.14%|                signaled = self._cond.wait(timeout)
(call)|        80|    0.0658216|  0.000822771|  6.10%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:264 wait
   553|        80|   0.00144267|  1.80334e-05|  0.13%|            return signaled
(call)|        80|  0.000866175|  1.08272e-05|  0.08%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:243 __exit__
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|# A barrier class.  Inspired in part by the pthread_barrier_* api and
   557|         0|            0|            0|  0.00%|# the CyclicBarrier class from Java.  See
   558|         0|            0|            0|  0.00%|# http://sourceware.org/pthreads-win32/manual/pthread_barrier_init.html and
   559|         0|            0|            0|  0.00%|# http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/
   560|         0|            0|            0|  0.00%|#        CyclicBarrier.html
   561|         0|            0|            0|  0.00%|# for information.
   562|         0|            0|            0|  0.00%|# We maintain two main states, 'filling' and 'draining' enabling the barrier
   563|         0|            0|            0|  0.00%|# to be cyclic.  Threads are not allowed into it until it has fully drained
   564|         0|            0|            0|  0.00%|# since the previous cycle.  In addition, a 'resetting' state exists which is
   565|         0|            0|            0|  0.00%|# similar to 'draining' except that threads leave with a BrokenBarrierError,
   566|         0|            0|            0|  0.00%|# and a 'broken' state in which all threads get the exception.
   567|         0|            0|            0|  0.00%|class Barrier:
   568|         0|            0|            0|  0.00%|    """Implements a Barrier.
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|    Useful for synchronizing a fixed number of threads at known synchronization
   571|         0|            0|            0|  0.00%|    points.  Threads block on 'wait()' and are simultaneously awoken once they
   572|         0|            0|            0|  0.00%|    have all made that call.
   573|         0|            0|            0|  0.00%|
   574|         0|            0|            0|  0.00%|    """
   575|         0|            0|            0|  0.00%|
   576|         0|            0|            0|  0.00%|    def __init__(self, parties, action=None, timeout=None):
   577|         0|            0|            0|  0.00%|        """Create a barrier, initialised to 'parties' threads.
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|        'action' is a callable which, when supplied, will be called by one of
   580|         0|            0|            0|  0.00%|        the threads after they have all entered the barrier and just prior to
   581|         0|            0|            0|  0.00%|        releasing them all. If a 'timeout' is provided, it is used as the
   582|         0|            0|            0|  0.00%|        default for all subsequent 'wait()' calls.
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|        """
   585|         0|            0|            0|  0.00%|        self._cond = Condition(Lock())
   586|         0|            0|            0|  0.00%|        self._action = action
   587|         0|            0|            0|  0.00%|        self._timeout = timeout
   588|         0|            0|            0|  0.00%|        self._parties = parties
   589|         0|            0|            0|  0.00%|        self._state = 0 #0 filling, 1, draining, -1 resetting, -2 broken
   590|         0|            0|            0|  0.00%|        self._count = 0
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|    def wait(self, timeout=None):
   593|         0|            0|            0|  0.00%|        """Wait for the barrier.
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|        When the specified number of threads have started waiting, they are all
   596|         0|            0|            0|  0.00%|        simultaneously awoken. If an 'action' was provided for the barrier, one
   597|         0|            0|            0|  0.00%|        of the threads will have executed that callback prior to returning.
   598|         0|            0|            0|  0.00%|        Returns an individual index number from 0 to 'parties-1'.
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|        """
   601|         0|            0|            0|  0.00%|        if timeout is None:
   602|         0|            0|            0|  0.00%|            timeout = self._timeout
   603|         0|            0|            0|  0.00%|        with self._cond:
   604|         0|            0|            0|  0.00%|            self._enter() # Block while the barrier drains.
   605|         0|            0|            0|  0.00%|            index = self._count
   606|         0|            0|            0|  0.00%|            self._count += 1
   607|         0|            0|            0|  0.00%|            try:
   608|         0|            0|            0|  0.00%|                if index + 1 == self._parties:
   609|         0|            0|            0|  0.00%|                    # We release the barrier
   610|         0|            0|            0|  0.00%|                    self._release()
   611|         0|            0|            0|  0.00%|                else:
   612|         0|            0|            0|  0.00%|                    # We wait until someone releases us
   613|         0|            0|            0|  0.00%|                    self._wait(timeout)
   614|         0|            0|            0|  0.00%|                return index
   615|         0|            0|            0|  0.00%|            finally:
   616|         0|            0|            0|  0.00%|                self._count -= 1
   617|         0|            0|            0|  0.00%|                # Wake up any threads waiting for barrier to drain.
   618|         0|            0|            0|  0.00%|                self._exit()
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|    # Block until the barrier is ready for us, or raise an exception
   621|         0|            0|            0|  0.00%|    # if it is broken.
   622|         0|            0|            0|  0.00%|    def _enter(self):
   623|         0|            0|            0|  0.00%|        while self._state in (-1, 1):
   624|         0|            0|            0|  0.00%|            # It is draining or resetting, wait until done
   625|         0|            0|            0|  0.00%|            self._cond.wait()
   626|         0|            0|            0|  0.00%|        #see if the barrier is in a broken state
   627|         0|            0|            0|  0.00%|        if self._state < 0:
   628|         0|            0|            0|  0.00%|            raise BrokenBarrierError
   629|         0|            0|            0|  0.00%|        assert self._state == 0
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|    # Optionally run the 'action' and release the threads waiting
   632|         0|            0|            0|  0.00%|    # in the barrier.
   633|         0|            0|            0|  0.00%|    def _release(self):
   634|         0|            0|            0|  0.00%|        try:
   635|         0|            0|            0|  0.00%|            if self._action:
   636|         0|            0|            0|  0.00%|                self._action()
   637|         0|            0|            0|  0.00%|            # enter draining state
   638|         0|            0|            0|  0.00%|            self._state = 1
   639|         0|            0|            0|  0.00%|            self._cond.notify_all()
   640|         0|            0|            0|  0.00%|        except:
   641|         0|            0|            0|  0.00%|            #an exception during the _action handler.  Break and reraise
   642|         0|            0|            0|  0.00%|            self._break()
   643|         0|            0|            0|  0.00%|            raise
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|    # Wait in the barrier until we are released.  Raise an exception
   646|         0|            0|            0|  0.00%|    # if the barrier is reset or broken.
   647|         0|            0|            0|  0.00%|    def _wait(self, timeout):
   648|         0|            0|            0|  0.00%|        if not self._cond.wait_for(lambda : self._state != 0, timeout):
   649|         0|            0|            0|  0.00%|            #timed out.  Break the barrier
   650|         0|            0|            0|  0.00%|            self._break()
   651|         0|            0|            0|  0.00%|            raise BrokenBarrierError
   652|         0|            0|            0|  0.00%|        if self._state < 0:
   653|         0|            0|            0|  0.00%|            raise BrokenBarrierError
   654|         0|            0|            0|  0.00%|        assert self._state == 1
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|    # If we are the last thread to exit the barrier, signal any threads
   657|         0|            0|            0|  0.00%|    # waiting for the barrier to drain.
   658|         0|            0|            0|  0.00%|    def _exit(self):
   659|         0|            0|            0|  0.00%|        if self._count == 0:
   660|         0|            0|            0|  0.00%|            if self._state in (-1, 1):
   661|         0|            0|            0|  0.00%|                #resetting or draining
   662|         0|            0|            0|  0.00%|                self._state = 0
   663|         0|            0|            0|  0.00%|                self._cond.notify_all()
   664|         0|            0|            0|  0.00%|
   665|         0|            0|            0|  0.00%|    def reset(self):
   666|         0|            0|            0|  0.00%|        """Reset the barrier to the initial state.
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|        Any threads currently waiting will get the BrokenBarrier exception
   669|         0|            0|            0|  0.00%|        raised.
   670|         0|            0|            0|  0.00%|
   671|         0|            0|            0|  0.00%|        """
   672|         0|            0|            0|  0.00%|        with self._cond:
   673|         0|            0|            0|  0.00%|            if self._count > 0:
   674|         0|            0|            0|  0.00%|                if self._state == 0:
   675|         0|            0|            0|  0.00%|                    #reset the barrier, waking up threads
   676|         0|            0|            0|  0.00%|                    self._state = -1
   677|         0|            0|            0|  0.00%|                elif self._state == -2:
   678|         0|            0|            0|  0.00%|                    #was broken, set it to reset state
   679|         0|            0|            0|  0.00%|                    #which clears when the last thread exits
   680|         0|            0|            0|  0.00%|                    self._state = -1
   681|         0|            0|            0|  0.00%|            else:
   682|         0|            0|            0|  0.00%|                self._state = 0
   683|         0|            0|            0|  0.00%|            self._cond.notify_all()
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|    def abort(self):
   686|         0|            0|            0|  0.00%|        """Place the barrier into a 'broken' state.
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|        Useful in case of error.  Any currently waiting threads and threads
   689|         0|            0|            0|  0.00%|        attempting to 'wait()' will have BrokenBarrierError raised.
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|        """
   692|         0|            0|            0|  0.00%|        with self._cond:
   693|         0|            0|            0|  0.00%|            self._break()
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|    def _break(self):
   696|         0|            0|            0|  0.00%|        # An internal error was detected.  The barrier is set to
   697|         0|            0|            0|  0.00%|        # a broken state all parties awakened.
   698|         0|            0|            0|  0.00%|        self._state = -2
   699|         0|            0|            0|  0.00%|        self._cond.notify_all()
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|    @property
   702|         0|            0|            0|  0.00%|    def parties(self):
   703|         0|            0|            0|  0.00%|        """Return the number of threads required to trip the barrier."""
   704|         0|            0|            0|  0.00%|        return self._parties
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|    @property
   707|         0|            0|            0|  0.00%|    def n_waiting(self):
   708|         0|            0|            0|  0.00%|        """Return the number of threads currently waiting at the barrier."""
   709|         0|            0|            0|  0.00%|        # We don't need synchronization here since this is an ephemeral result
   710|         0|            0|            0|  0.00%|        # anyway.  It returns the correct value in the steady state.
   711|         0|            0|            0|  0.00%|        if self._state == 0:
   712|         0|            0|            0|  0.00%|            return self._count
   713|         0|            0|            0|  0.00%|        return 0
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|    @property
   716|         0|            0|            0|  0.00%|    def broken(self):
   717|         0|            0|            0|  0.00%|        """Return True if the barrier is in a broken state."""
   718|         0|            0|            0|  0.00%|        return self._state == -2
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|# exception raised by the Barrier class
   721|         0|            0|            0|  0.00%|class BrokenBarrierError(RuntimeError):
   722|         0|            0|            0|  0.00%|    pass
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|# Helper to generate new thread names
   726|         0|            0|            0|  0.00%|_counter = _count().__next__
   727|         0|            0|            0|  0.00%|_counter() # Consume 0 so first non-main thread has id 1.
   728|         0|            0|            0|  0.00%|def _newname(template="Thread-%d"):
   729|         0|            0|            0|  0.00%|    return template % _counter()
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|# Active thread administration
   732|         0|            0|            0|  0.00%|_active_limbo_lock = _allocate_lock()
   733|         0|            0|            0|  0.00%|_active = {}    # maps thread id to Thread object
   734|         0|            0|            0|  0.00%|_limbo = {}
   735|         0|            0|            0|  0.00%|_dangling = WeakSet()
   736|         0|            0|            0|  0.00%|# Set of Thread._tstate_lock locks of non-daemon threads used by _shutdown()
   737|         0|            0|            0|  0.00%|# to wait until all Python thread states get deleted:
   738|         0|            0|            0|  0.00%|# see Thread._set_tstate_lock().
   739|         0|            0|            0|  0.00%|_shutdown_locks_lock = _allocate_lock()
   740|         0|            0|            0|  0.00%|_shutdown_locks = set()
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|# Main class for threads
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|class Thread:
   745|         0|            0|            0|  0.00%|    """A class that represents a thread of control.
   746|         0|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|    This class can be safely subclassed in a limited fashion. There are two ways
   748|         0|            0|            0|  0.00%|    to specify the activity: by passing a callable object to the constructor, or
   749|         0|            0|            0|  0.00%|    by overriding the run() method in a subclass.
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    """
   752|         0|            0|            0|  0.00%|
   753|         0|            0|            0|  0.00%|    _initialized = False
   754|         0|            0|            0|  0.00%|    # Need to store a reference to sys.exc_info for printing
   755|         0|            0|            0|  0.00%|    # out exceptions when a thread tries to use a global var. during interp.
   756|         0|            0|            0|  0.00%|    # shutdown and thus raises an exception about trying to perform some
   757|         0|            0|            0|  0.00%|    # operation on/with a NoneType
   758|         0|            0|            0|  0.00%|    _exc_info = _sys.exc_info
   759|         0|            0|            0|  0.00%|    # Keep sys.exc_clear too to clear the exception just before
   760|         0|            0|            0|  0.00%|    # allowing .join() to return.
   761|         0|            0|            0|  0.00%|    #XXX __exc_clear = _sys.exc_clear
   762|         0|            0|            0|  0.00%|
   763|        80|  0.000449657|  5.62072e-06|  0.04%|    def __init__(self, group=None, target=None, name=None,
   764|         0|            0|            0|  0.00%|                 args=(), kwargs=None, *, daemon=None):
   765|         0|            0|            0|  0.00%|        """This constructor should always be called with keyword arguments. Arguments are:
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|        *group* should be None; reserved for future extension when a ThreadGroup
   768|         0|            0|            0|  0.00%|        class is implemented.
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|        *target* is the callable object to be invoked by the run()
   771|         0|            0|            0|  0.00%|        method. Defaults to None, meaning nothing is called.
   772|         0|            0|            0|  0.00%|
   773|         0|            0|            0|  0.00%|        *name* is the thread name. By default, a unique name is constructed of
   774|         0|            0|            0|  0.00%|        the form "Thread-N" where N is a small decimal number.
   775|         0|            0|            0|  0.00%|
   776|         0|            0|            0|  0.00%|        *args* is the argument tuple for the target invocation. Defaults to ().
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|        *kwargs* is a dictionary of keyword arguments for the target
   779|         0|            0|            0|  0.00%|        invocation. Defaults to {}.
   780|         0|            0|            0|  0.00%|
   781|         0|            0|            0|  0.00%|        If a subclass overrides the constructor, it must make sure to invoke
   782|         0|            0|            0|  0.00%|        the base class constructor (Thread.__init__()) before doing anything
   783|         0|            0|            0|  0.00%|        else to the thread.
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|        """
   786|        80|  0.000511885|  6.39856e-06|  0.05%|        assert group is None, "group argument must be None for now"
   787|        80|  0.000514746|  6.43432e-06|  0.05%|        if kwargs is None:
   788|        80|  0.000506639|  6.33299e-06|  0.05%|            kwargs = {}
   789|        80|  0.000530005|  6.62506e-06|  0.05%|        self._target = target
   790|        80|  0.000561237|  7.01547e-06|  0.05%|        self._name = str(name or _newname())
   791|        80|  0.000499487|  6.24359e-06|  0.05%|        self._args = args
   792|        80|  0.000489712|   6.1214e-06|  0.05%|        self._kwargs = kwargs
   793|        80|  0.000488997|  6.11246e-06|  0.05%|        if daemon is not None:
   794|         0|            0|            0|  0.00%|            self._daemonic = daemon
   795|         0|            0|            0|  0.00%|        else:
   796|        80|   0.00219011|  2.73764e-05|  0.20%|            self._daemonic = current_thread().daemon
(call)|        80|   0.00134659|  1.68324e-05|  0.12%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1225 current_thread
(call)|        80|   0.00127482|  1.59353e-05|  0.12%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1116 daemon
   797|        80|  0.000487804|  6.09756e-06|  0.05%|        self._ident = None
   798|        80|  0.000498772|  6.23465e-06|  0.05%|        self._tstate_lock = None
   799|        80|   0.00141358|  1.76698e-05|  0.13%|        self._started = Event()
(call)|        80|    0.0114739|  0.000143424|  1.06%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:499 __init__
   800|        80|  0.000485659|  6.07073e-06|  0.05%|        self._is_stopped = False
   801|        80|  0.000535727|  6.69658e-06|  0.05%|        self._initialized = True
   802|         0|            0|            0|  0.00%|        # sys.stderr is not stored in the class like
   803|         0|            0|            0|  0.00%|        # sys.exc_info since it can be changed between instances
   804|        80|  0.000507116|  6.33895e-06|  0.05%|        self._stderr = _sys.stderr
   805|         0|            0|            0|  0.00%|        # For debugging and _after_fork()
   806|        80|   0.00135803|  1.69754e-05|  0.13%|        _dangling.add(self)
(call)|        80|   0.00140309|  1.75387e-05|  0.13%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/_weakrefset.py:81 add
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|    def _reset_internal_locks(self, is_alive):
   809|         0|            0|            0|  0.00%|        # private!  Called by _after_fork() to reset our internal locks as
   810|         0|            0|            0|  0.00%|        # they may be in an invalid state leading to a deadlock or crash.
   811|         0|            0|            0|  0.00%|        self._started._reset_internal_locks()
   812|         0|            0|            0|  0.00%|        if is_alive:
   813|         0|            0|            0|  0.00%|            self._set_tstate_lock()
   814|         0|            0|            0|  0.00%|        else:
   815|         0|            0|            0|  0.00%|            # The thread isn't alive after fork: it doesn't have a tstate
   816|         0|            0|            0|  0.00%|            # anymore.
   817|         0|            0|            0|  0.00%|            self._is_stopped = True
   818|         0|            0|            0|  0.00%|            self._tstate_lock = None
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|    def __repr__(self):
   821|         0|            0|            0|  0.00%|        assert self._initialized, "Thread.__init__() was not called"
   822|         0|            0|            0|  0.00%|        status = "initial"
   823|         0|            0|            0|  0.00%|        if self._started.is_set():
   824|         0|            0|            0|  0.00%|            status = "started"
   825|         0|            0|            0|  0.00%|        self.is_alive() # easy way to get ._is_stopped set when appropriate
   826|         0|            0|            0|  0.00%|        if self._is_stopped:
   827|         0|            0|            0|  0.00%|            status = "stopped"
   828|         0|            0|            0|  0.00%|        if self._daemonic:
   829|         0|            0|            0|  0.00%|            status += " daemon"
   830|         0|            0|            0|  0.00%|        if self._ident is not None:
   831|         0|            0|            0|  0.00%|            status += " %s" % self._ident
   832|         0|            0|            0|  0.00%|        return "<%s(%s, %s)>" % (self.__class__.__name__, self._name, status)
   833|         0|            0|            0|  0.00%|
   834|        80|  0.000335455|  4.19319e-06|  0.03%|    def start(self):
   835|         0|            0|            0|  0.00%|        """Start the thread's activity.
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|        It must be called at most once per thread object. It arranges for the
   838|         0|            0|            0|  0.00%|        object's run() method to be invoked in a separate thread of control.
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|        This method will raise a RuntimeError if called more than once on the
   841|         0|            0|            0|  0.00%|        same thread object.
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|        """
   844|        80|  0.000477076|  5.96344e-06|  0.04%|        if not self._initialized:
   845|         0|            0|            0|  0.00%|            raise RuntimeError("thread.__init__() not called")
   846|         0|            0|            0|  0.00%|
   847|        80|   0.00125408|   1.5676e-05|  0.12%|        if self._started.is_set():
(call)|        80|  0.000762939|  9.53674e-06|  0.07%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:507 is_set
   848|         0|            0|            0|  0.00%|            raise RuntimeError("threads can only be started once")
   849|        80|  0.000527859|  6.59823e-06|  0.05%|        with _active_limbo_lock:
   850|        80|  0.000510693|  6.38366e-06|  0.05%|            _limbo[self] = self
   851|        80|  0.000437737|  5.47171e-06|  0.04%|        try:
   852|        80|   0.00298023|  3.72529e-05|  0.28%|            _start_new_thread(self._bootstrap, ())
   853|         0|            0|            0|  0.00%|        except Exception:
   854|         0|            0|            0|  0.00%|            with _active_limbo_lock:
   855|         0|            0|            0|  0.00%|                del _limbo[self]
   856|         0|            0|            0|  0.00%|            raise
   857|        80|     0.001858|  2.32249e-05|  0.17%|        self._started.wait()
(call)|        80|    0.0732017|  0.000915021|  6.78%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:534 wait
   858|         0|            0|            0|  0.00%|
   859|        80|   0.00207734|  2.59668e-05|  0.19%|    def run(self):
   860|         0|            0|            0|  0.00%|        """Method representing the thread's activity.
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|        You may override this method in a subclass. The standard run() method
   863|         0|            0|            0|  0.00%|        invokes the callable object passed to the object's constructor as the
   864|         0|            0|            0|  0.00%|        target argument, if any, with sequential and keyword arguments taken
   865|         0|            0|            0|  0.00%|        from the args and kwargs arguments, respectively.
   866|         0|            0|            0|  0.00%|
   867|         0|            0|            0|  0.00%|        """
   868|        80|   0.00201964|  2.52455e-05|  0.19%|        try:
   869|        80|  0.000737906|  9.22382e-06|  0.07%|            if self._target:
   870|        80|   0.00224948|  2.81185e-05|  0.21%|                self._target(*self._args, **self._kwargs)
(call)|        80|      71.9728|      0.89966|6670.32%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:66 _worker
   871|         0|            0|            0|  0.00%|        finally:
   872|         0|            0|            0|  0.00%|            # Avoid a refcycle if the thread is running a function with
   873|         0|            0|            0|  0.00%|            # an argument that has a member that points to the thread.
   874|        80|  0.000939369|  1.17421e-05|  0.09%|            del self._target, self._args, self._kwargs
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|    def _bootstrap(self):
   877|         0|            0|            0|  0.00%|        # Wrapper around the real bootstrap code that ignores
   878|         0|            0|            0|  0.00%|        # exceptions during interpreter cleanup.  Those typically
   879|         0|            0|            0|  0.00%|        # happen when a daemon thread wakes up at an unfortunate
   880|         0|            0|            0|  0.00%|        # moment, finds the world around it destroyed, and raises some
   881|         0|            0|            0|  0.00%|        # random exception *** while trying to report the exception in
   882|         0|            0|            0|  0.00%|        # _bootstrap_inner() below ***.  Those random exceptions
   883|         0|            0|            0|  0.00%|        # don't help anybody, and they confuse users, so we suppress
   884|         0|            0|            0|  0.00%|        # them.  We suppress them only when it appears that the world
   885|         0|            0|            0|  0.00%|        # indeed has already been destroyed, so that exceptions in
   886|         0|            0|            0|  0.00%|        # _bootstrap_inner() during normal business hours are properly
   887|         0|            0|            0|  0.00%|        # reported.  Also, we only suppress them for daemonic threads;
   888|         0|            0|            0|  0.00%|        # if a non-daemonic encounters this, something else is wrong.
   889|         0|            0|            0|  0.00%|        try:
   890|         0|            0|            0|  0.00%|            self._bootstrap_inner()
   891|         0|            0|            0|  0.00%|        except:
   892|         0|            0|            0|  0.00%|            if self._daemonic and _sys is None:
   893|         0|            0|            0|  0.00%|                return
   894|         0|            0|            0|  0.00%|            raise
   895|         0|            0|            0|  0.00%|
   896|         0|            0|            0|  0.00%|    def _set_ident(self):
   897|         0|            0|            0|  0.00%|        self._ident = get_ident()
   898|         0|            0|            0|  0.00%|
   899|         0|            0|            0|  0.00%|    def _set_tstate_lock(self):
   900|         0|            0|            0|  0.00%|        """
   901|         0|            0|            0|  0.00%|        Set a lock object which will be released by the interpreter when
   902|         0|            0|            0|  0.00%|        the underlying thread state (see pystate.h) gets deleted.
   903|         0|            0|            0|  0.00%|        """
   904|         0|            0|            0|  0.00%|        self._tstate_lock = _set_sentinel()
   905|         0|            0|            0|  0.00%|        self._tstate_lock.acquire()
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|        if not self.daemon:
   908|         0|            0|            0|  0.00%|            with _shutdown_locks_lock:
   909|         0|            0|            0|  0.00%|                _shutdown_locks.add(self._tstate_lock)
   910|         0|            0|            0|  0.00%|
   911|         0|            0|            0|  0.00%|    def _bootstrap_inner(self):
   912|         0|            0|            0|  0.00%|        try:
   913|         0|            0|            0|  0.00%|            self._set_ident()
   914|         0|            0|            0|  0.00%|            self._set_tstate_lock()
   915|         0|            0|            0|  0.00%|            self._started.set()
   916|         0|            0|            0|  0.00%|            with _active_limbo_lock:
   917|         0|            0|            0|  0.00%|                _active[self._ident] = self
   918|         0|            0|            0|  0.00%|                del _limbo[self]
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|            if _trace_hook:
   921|         0|            0|            0|  0.00%|                _sys.settrace(_trace_hook)
   922|         0|            0|            0|  0.00%|            if _profile_hook:
   923|         0|            0|            0|  0.00%|                _sys.setprofile(_profile_hook)
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|            try:
   926|         0|            0|            0|  0.00%|                self.run()
(call)|        80|      71.9808|      0.89976|6671.07%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:859 run
   927|         0|            0|            0|  0.00%|            except SystemExit:
   928|         0|            0|            0|  0.00%|                pass
   929|         0|            0|            0|  0.00%|            except:
   930|         0|            0|            0|  0.00%|                # If sys.stderr is no more (most likely from interpreter
   931|         0|            0|            0|  0.00%|                # shutdown) use self._stderr.  Otherwise still use sys (as in
   932|         0|            0|            0|  0.00%|                # _sys) in case sys.stderr was redefined since the creation of
   933|         0|            0|            0|  0.00%|                # self.
   934|         0|            0|            0|  0.00%|                if _sys and _sys.stderr is not None:
   935|         0|            0|            0|  0.00%|                    print("Exception in thread %s:\n%s" %
   936|         0|            0|            0|  0.00%|                          (self.name, _format_exc()), file=_sys.stderr)
   937|         0|            0|            0|  0.00%|                elif self._stderr is not None:
   938|         0|            0|            0|  0.00%|                    # Do the best job possible w/o a huge amt. of code to
   939|         0|            0|            0|  0.00%|                    # approximate a traceback (code ideas from
   940|         0|            0|            0|  0.00%|                    # Lib/traceback.py)
   941|         0|            0|            0|  0.00%|                    exc_type, exc_value, exc_tb = self._exc_info()
   942|         0|            0|            0|  0.00%|                    try:
   943|         0|            0|            0|  0.00%|                        print((
   944|         0|            0|            0|  0.00%|                            "Exception in thread " + self.name +
   945|         0|            0|            0|  0.00%|                            " (most likely raised during interpreter shutdown):"), file=self._stderr)
   946|         0|            0|            0|  0.00%|                        print((
   947|         0|            0|            0|  0.00%|                            "Traceback (most recent call last):"), file=self._stderr)
   948|         0|            0|            0|  0.00%|                        while exc_tb:
   949|         0|            0|            0|  0.00%|                            print((
   950|         0|            0|            0|  0.00%|                                '  File "%s", line %s, in %s' %
   951|         0|            0|            0|  0.00%|                                (exc_tb.tb_frame.f_code.co_filename,
   952|         0|            0|            0|  0.00%|                                    exc_tb.tb_lineno,
   953|         0|            0|            0|  0.00%|                                    exc_tb.tb_frame.f_code.co_name)), file=self._stderr)
   954|         0|            0|            0|  0.00%|                            exc_tb = exc_tb.tb_next
   955|         0|            0|            0|  0.00%|                        print(("%s: %s" % (exc_type, exc_value)), file=self._stderr)
   956|         0|            0|            0|  0.00%|                        self._stderr.flush()
   957|         0|            0|            0|  0.00%|                    # Make sure that exc_tb gets deleted since it is a memory
   958|         0|            0|            0|  0.00%|                    # hog; deleting everything else is just for thoroughness
   959|         0|            0|            0|  0.00%|                    finally:
   960|         0|            0|            0|  0.00%|                        del exc_type, exc_value, exc_tb
   961|         0|            0|            0|  0.00%|            finally:
   962|         0|            0|            0|  0.00%|                # Prevent a race in
   963|         0|            0|            0|  0.00%|                # test_threading.test_no_refcycle_through_target when
   964|         0|            0|            0|  0.00%|                # the exception keeps the target alive past when we
   965|         0|            0|            0|  0.00%|                # assert that it's dead.
   966|         0|            0|            0|  0.00%|                #XXX self._exc_clear()
   967|         0|            0|            0|  0.00%|                pass
   968|         0|            0|            0|  0.00%|        finally:
   969|         0|            0|            0|  0.00%|            with _active_limbo_lock:
   970|         0|            0|            0|  0.00%|                try:
   971|         0|            0|            0|  0.00%|                    # We don't call self._delete() because it also
   972|         0|            0|            0|  0.00%|                    # grabs _active_limbo_lock.
   973|         0|            0|            0|  0.00%|                    del _active[get_ident()]
   974|         0|            0|            0|  0.00%|                except:
   975|         0|            0|            0|  0.00%|                    pass
   976|         0|            0|            0|  0.00%|
   977|        80|  0.000359774|  4.49717e-06|  0.03%|    def _stop(self):
   978|         0|            0|            0|  0.00%|        # After calling ._stop(), .is_alive() returns False and .join() returns
   979|         0|            0|            0|  0.00%|        # immediately.  ._tstate_lock must be released before calling ._stop().
   980|         0|            0|            0|  0.00%|        #
   981|         0|            0|            0|  0.00%|        # Normal case:  C code at the end of the thread's life
   982|         0|            0|            0|  0.00%|        # (release_sentinel in _threadmodule.c) releases ._tstate_lock, and
   983|         0|            0|            0|  0.00%|        # that's detected by our ._wait_for_tstate_lock(), called by .join()
   984|         0|            0|            0|  0.00%|        # and .is_alive().  Any number of threads _may_ call ._stop()
   985|         0|            0|            0|  0.00%|        # simultaneously (for example, if multiple threads are blocked in
   986|         0|            0|            0|  0.00%|        # .join() calls), and they're not serialized.  That's harmless -
   987|         0|            0|            0|  0.00%|        # they'll just make redundant rebindings of ._is_stopped and
   988|         0|            0|            0|  0.00%|        # ._tstate_lock.  Obscure:  we rebind ._tstate_lock last so that the
   989|         0|            0|            0|  0.00%|        # "assert self._is_stopped" in ._wait_for_tstate_lock() always works
   990|         0|            0|            0|  0.00%|        # (the assert is executed only if ._tstate_lock is None).
   991|         0|            0|            0|  0.00%|        #
   992|         0|            0|            0|  0.00%|        # Special case:  _main_thread releases ._tstate_lock via this
   993|         0|            0|            0|  0.00%|        # module's _shutdown() function.
   994|        80|  0.000486851|  6.08563e-06|  0.05%|        lock = self._tstate_lock
   995|        80|  0.000491619|  6.14524e-06|  0.05%|        if lock is not None:
   996|        80|   0.00048852|   6.1065e-06|  0.05%|            assert not lock.locked()
   997|        80|  0.000457525|  5.71907e-06|  0.04%|        self._is_stopped = True
   998|        80|  0.000469208|   5.8651e-06|  0.04%|        self._tstate_lock = None
   999|        80|   0.00131726|  1.64658e-05|  0.12%|        if not self.daemon:
(call)|        80|   0.00125909|  1.57386e-05|  0.12%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1116 daemon
  1000|         0|            0|            0|  0.00%|            with _shutdown_locks_lock:
  1001|         0|            0|            0|  0.00%|                _shutdown_locks.discard(lock)
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|    def _delete(self):
  1004|         0|            0|            0|  0.00%|        "Remove current thread from the dict of currently running threads."
  1005|         0|            0|            0|  0.00%|        with _active_limbo_lock:
  1006|         0|            0|            0|  0.00%|            del _active[get_ident()]
  1007|         0|            0|            0|  0.00%|            # There must not be any python code between the previous line
  1008|         0|            0|            0|  0.00%|            # and after the lock is released.  Otherwise a tracing function
  1009|         0|            0|            0|  0.00%|            # could try to acquire the lock again in the same thread, (in
  1010|         0|            0|            0|  0.00%|            # current_thread()), and would block.
  1011|         0|            0|            0|  0.00%|
  1012|        80|  0.000327587|  4.09484e-06|  0.03%|    def join(self, timeout=None):
  1013|         0|            0|            0|  0.00%|        """Wait until the thread terminates.
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|        This blocks the calling thread until the thread whose join() method is
  1016|         0|            0|            0|  0.00%|        called terminates -- either normally or through an unhandled exception
  1017|         0|            0|            0|  0.00%|        or until the optional timeout occurs.
  1018|         0|            0|            0|  0.00%|
  1019|         0|            0|            0|  0.00%|        When the timeout argument is present and not None, it should be a
  1020|         0|            0|            0|  0.00%|        floating point number specifying a timeout for the operation in seconds
  1021|         0|            0|            0|  0.00%|        (or fractions thereof). As join() always returns None, you must call
  1022|         0|            0|            0|  0.00%|        is_alive() after join() to decide whether a timeout happened -- if the
  1023|         0|            0|            0|  0.00%|        thread is still alive, the join() call timed out.
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|        When the timeout argument is not present or None, the operation will
  1026|         0|            0|            0|  0.00%|        block until the thread terminates.
  1027|         0|            0|            0|  0.00%|
  1028|         0|            0|            0|  0.00%|        A thread can be join()ed many times.
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|        join() raises a RuntimeError if an attempt is made to join the current
  1031|         0|            0|            0|  0.00%|        thread as that would cause a deadlock. It is also an error to join() a
  1032|         0|            0|            0|  0.00%|        thread before it has been started and attempts to do so raises the same
  1033|         0|            0|            0|  0.00%|        exception.
  1034|         0|            0|            0|  0.00%|
  1035|         0|            0|            0|  0.00%|        """
  1036|        80|  0.000477076|  5.96344e-06|  0.04%|        if not self._initialized:
  1037|         0|            0|            0|  0.00%|            raise RuntimeError("Thread.__init__() not called")
  1038|        80|    0.0012939|  1.61737e-05|  0.12%|        if not self._started.is_set():
(call)|        80|  0.000864029|  1.08004e-05|  0.08%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:507 is_set
  1039|         0|            0|            0|  0.00%|            raise RuntimeError("cannot join thread before it is started")
  1040|        80|   0.00128198|  1.60247e-05|  0.12%|        if self is current_thread():
(call)|        80|   0.00123429|  1.54287e-05|  0.11%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1225 current_thread
  1041|         0|            0|            0|  0.00%|            raise RuntimeError("cannot join current thread")
  1042|         0|            0|            0|  0.00%|
  1043|        80|  0.000472069|  5.90086e-06|  0.04%|        if timeout is None:
  1044|        80|   0.00145173|  1.81466e-05|  0.13%|            self._wait_for_tstate_lock()
(call)|        80|     0.549976|    0.0068747| 50.97%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:1050 _wait_for_tstate_lock
  1045|         0|            0|            0|  0.00%|        else:
  1046|         0|            0|            0|  0.00%|            # the behavior of a negative timeout isn't documented, but
  1047|         0|            0|            0|  0.00%|            # historically .join(timeout=x) for x<0 has acted as if timeout=0
  1048|         0|            0|            0|  0.00%|            self._wait_for_tstate_lock(timeout=max(timeout, 0))
  1049|         0|            0|            0|  0.00%|
  1050|        80|  0.000363111|  4.53889e-06|  0.03%|    def _wait_for_tstate_lock(self, block=True, timeout=-1):
  1051|         0|            0|            0|  0.00%|        # Issue #18808: wait for the thread state to be gone.
  1052|         0|            0|            0|  0.00%|        # At the end of the thread's life, after all knowledge of the thread
  1053|         0|            0|            0|  0.00%|        # is removed from C data structures, C code releases our _tstate_lock.
  1054|         0|            0|            0|  0.00%|        # This method passes its arguments to _tstate_lock.acquire().
  1055|         0|            0|            0|  0.00%|        # If the lock is acquired, the C code is done, and self._stop() is
  1056|         0|            0|            0|  0.00%|        # called.  That sets ._is_stopped to True, and ._tstate_lock to None.
  1057|        80|  0.000505686|  6.32107e-06|  0.05%|        lock = self._tstate_lock
  1058|        80|  0.000463486|  5.79357e-06|  0.04%|        if lock is None:  # already determined that the C code is done
  1059|         0|            0|            0|  0.00%|            assert self._is_stopped
  1060|        80|     0.541357|   0.00676697| 50.17%|        elif lock.acquire(block, timeout):
  1061|        80|  0.000592947|  7.41184e-06|  0.05%|            lock.release()
  1062|        80|   0.00136328|   1.7041e-05|  0.13%|            self._stop()
(call)|        80|   0.00532985|  6.66231e-05|  0.49%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:977 _stop
  1063|         0|            0|            0|  0.00%|
  1064|         0|            0|            0|  0.00%|    @property
  1065|         0|            0|            0|  0.00%|    def name(self):
  1066|         0|            0|            0|  0.00%|        """A string used for identification purposes only.
  1067|         0|            0|            0|  0.00%|
  1068|         0|            0|            0|  0.00%|        It has no semantics. Multiple threads may be given the same name. The
  1069|         0|            0|            0|  0.00%|        initial name is set by the constructor.
  1070|         0|            0|            0|  0.00%|
  1071|         0|            0|            0|  0.00%|        """
  1072|         0|            0|            0|  0.00%|        assert self._initialized, "Thread.__init__() not called"
  1073|         0|            0|            0|  0.00%|        return self._name
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    @name.setter
  1076|         0|            0|            0|  0.00%|    def name(self, name):
  1077|         0|            0|            0|  0.00%|        assert self._initialized, "Thread.__init__() not called"
  1078|         0|            0|            0|  0.00%|        self._name = str(name)
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|    @property
  1081|         0|            0|            0|  0.00%|    def ident(self):
  1082|         0|            0|            0|  0.00%|        """Thread identifier of this thread or None if it has not been started.
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|        This is a nonzero integer. See the get_ident() function. Thread
  1085|         0|            0|            0|  0.00%|        identifiers may be recycled when a thread exits and another thread is
  1086|         0|            0|            0|  0.00%|        created. The identifier is available even after the thread has exited.
  1087|         0|            0|            0|  0.00%|
  1088|         0|            0|            0|  0.00%|        """
  1089|         0|            0|            0|  0.00%|        assert self._initialized, "Thread.__init__() not called"
  1090|         0|            0|            0|  0.00%|        return self._ident
  1091|         0|            0|            0|  0.00%|
  1092|         0|            0|            0|  0.00%|    def is_alive(self):
  1093|         0|            0|            0|  0.00%|        """Return whether the thread is alive.
  1094|         0|            0|            0|  0.00%|
  1095|         0|            0|            0|  0.00%|        This method returns True just before the run() method starts until just
  1096|         0|            0|            0|  0.00%|        after the run() method terminates. The module function enumerate()
  1097|         0|            0|            0|  0.00%|        returns a list of all alive threads.
  1098|         0|            0|            0|  0.00%|
  1099|         0|            0|            0|  0.00%|        """
  1100|         0|            0|            0|  0.00%|        assert self._initialized, "Thread.__init__() not called"
  1101|         0|            0|            0|  0.00%|        if self._is_stopped or not self._started.is_set():
  1102|         0|            0|            0|  0.00%|            return False
  1103|         0|            0|            0|  0.00%|        self._wait_for_tstate_lock(False)
  1104|         0|            0|            0|  0.00%|        return not self._is_stopped
  1105|         0|            0|            0|  0.00%|
  1106|         0|            0|            0|  0.00%|    def isAlive(self):
  1107|         0|            0|            0|  0.00%|        """Return whether the thread is alive.
  1108|         0|            0|            0|  0.00%|
  1109|         0|            0|            0|  0.00%|        This method is deprecated, use is_alive() instead.
  1110|         0|            0|            0|  0.00%|        """
  1111|         0|            0|            0|  0.00%|        import warnings
  1112|         0|            0|            0|  0.00%|        warnings.warn('isAlive() is deprecated, use is_alive() instead',
  1113|         0|            0|            0|  0.00%|                      PendingDeprecationWarning, stacklevel=2)
  1114|         0|            0|            0|  0.00%|        return self.is_alive()
  1115|         0|            0|            0|  0.00%|
  1116|       160|  0.000669241|  4.18276e-06|  0.06%|    @property
  1117|         0|            0|            0|  0.00%|    def daemon(self):
  1118|         0|            0|            0|  0.00%|        """A boolean value indicating whether this thread is a daemon thread.
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|        This must be set before start() is called, otherwise RuntimeError is
  1121|         0|            0|            0|  0.00%|        raised. Its initial value is inherited from the creating thread; the
  1122|         0|            0|            0|  0.00%|        main thread is not a daemon thread and therefore all threads created in
  1123|         0|            0|            0|  0.00%|        the main thread default to daemon = False.
  1124|         0|            0|            0|  0.00%|
  1125|         0|            0|            0|  0.00%|        The entire Python program exits when only daemon threads are left.
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|        """
  1128|       160|  0.000929832|  5.81145e-06|  0.09%|        assert self._initialized, "Thread.__init__() not called"
  1129|       160|  0.000934839|  5.84275e-06|  0.09%|        return self._daemonic
  1130|         0|            0|            0|  0.00%|
  1131|        80|  0.000352144|   4.4018e-06|  0.03%|    @daemon.setter
  1132|         0|            0|            0|  0.00%|    def daemon(self, daemonic):
  1133|        80|  0.000452757|  5.65946e-06|  0.04%|        if not self._initialized:
  1134|         0|            0|            0|  0.00%|            raise RuntimeError("Thread.__init__() not called")
  1135|        80|   0.00126362|  1.57952e-05|  0.12%|        if self._started.is_set():
(call)|        80|  0.000815153|  1.01894e-05|  0.08%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:507 is_set
  1136|         0|            0|            0|  0.00%|            raise RuntimeError("cannot set daemon status of active thread")
  1137|        80|  0.000471592|   5.8949e-06|  0.04%|        self._daemonic = daemonic
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|    def isDaemon(self):
  1140|         0|            0|            0|  0.00%|        return self.daemon
  1141|         0|            0|            0|  0.00%|
  1142|         0|            0|            0|  0.00%|    def setDaemon(self, daemonic):
  1143|         0|            0|            0|  0.00%|        self.daemon = daemonic
  1144|         0|            0|            0|  0.00%|
  1145|         0|            0|            0|  0.00%|    def getName(self):
  1146|         0|            0|            0|  0.00%|        return self.name
  1147|         0|            0|            0|  0.00%|
  1148|         0|            0|            0|  0.00%|    def setName(self, name):
  1149|         0|            0|            0|  0.00%|        self.name = name
  1150|         0|            0|            0|  0.00%|
  1151|         0|            0|            0|  0.00%|# The timer class was contributed by Itamar Shtull-Trauring
  1152|         0|            0|            0|  0.00%|
  1153|         0|            0|            0|  0.00%|class Timer(Thread):
  1154|         0|            0|            0|  0.00%|    """Call a function after a specified number of seconds:
  1155|         0|            0|            0|  0.00%|
  1156|         0|            0|            0|  0.00%|            t = Timer(30.0, f, args=None, kwargs=None)
  1157|         0|            0|            0|  0.00%|            t.start()
  1158|         0|            0|            0|  0.00%|            t.cancel()     # stop the timer's action if it's still waiting
  1159|         0|            0|            0|  0.00%|
  1160|         0|            0|            0|  0.00%|    """
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|    def __init__(self, interval, function, args=None, kwargs=None):
  1163|         0|            0|            0|  0.00%|        Thread.__init__(self)
  1164|         0|            0|            0|  0.00%|        self.interval = interval
  1165|         0|            0|            0|  0.00%|        self.function = function
  1166|         0|            0|            0|  0.00%|        self.args = args if args is not None else []
  1167|         0|            0|            0|  0.00%|        self.kwargs = kwargs if kwargs is not None else {}
  1168|         0|            0|            0|  0.00%|        self.finished = Event()
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|    def cancel(self):
  1171|         0|            0|            0|  0.00%|        """Stop the timer if it hasn't finished yet."""
  1172|         0|            0|            0|  0.00%|        self.finished.set()
  1173|         0|            0|            0|  0.00%|
  1174|         0|            0|            0|  0.00%|    def run(self):
  1175|         0|            0|            0|  0.00%|        self.finished.wait(self.interval)
  1176|         0|            0|            0|  0.00%|        if not self.finished.is_set():
  1177|         0|            0|            0|  0.00%|            self.function(*self.args, **self.kwargs)
  1178|         0|            0|            0|  0.00%|        self.finished.set()
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|
  1181|         0|            0|            0|  0.00%|# Special thread class to represent the main thread
  1182|         0|            0|            0|  0.00%|
  1183|         0|            0|            0|  0.00%|class _MainThread(Thread):
  1184|         0|            0|            0|  0.00%|
  1185|         0|            0|            0|  0.00%|    def __init__(self):
  1186|         0|            0|            0|  0.00%|        Thread.__init__(self, name="MainThread", daemon=False)
  1187|         0|            0|            0|  0.00%|        self._set_tstate_lock()
  1188|         0|            0|            0|  0.00%|        self._started.set()
  1189|         0|            0|            0|  0.00%|        self._set_ident()
  1190|         0|            0|            0|  0.00%|        with _active_limbo_lock:
  1191|         0|            0|            0|  0.00%|            _active[self._ident] = self
  1192|         0|            0|            0|  0.00%|
  1193|         0|            0|            0|  0.00%|
  1194|         0|            0|            0|  0.00%|# Dummy thread class to represent threads not started here.
  1195|         0|            0|            0|  0.00%|# These aren't garbage collected when they die, nor can they be waited for.
  1196|         0|            0|            0|  0.00%|# If they invoke anything in threading.py that calls current_thread(), they
  1197|         0|            0|            0|  0.00%|# leave an entry in the _active dict forever after.
  1198|         0|            0|            0|  0.00%|# Their purpose is to return *something* from current_thread().
  1199|         0|            0|            0|  0.00%|# They are marked as daemon threads so we won't wait for them
  1200|         0|            0|            0|  0.00%|# when we exit (conform previous semantics).
  1201|         0|            0|            0|  0.00%|
  1202|         0|            0|            0|  0.00%|class _DummyThread(Thread):
  1203|         0|            0|            0|  0.00%|
  1204|         0|            0|            0|  0.00%|    def __init__(self):
  1205|         0|            0|            0|  0.00%|        Thread.__init__(self, name=_newname("Dummy-%d"), daemon=True)
  1206|         0|            0|            0|  0.00%|
  1207|         0|            0|            0|  0.00%|        self._started.set()
  1208|         0|            0|            0|  0.00%|        self._set_ident()
  1209|         0|            0|            0|  0.00%|        with _active_limbo_lock:
  1210|         0|            0|            0|  0.00%|            _active[self._ident] = self
  1211|         0|            0|            0|  0.00%|
  1212|         0|            0|            0|  0.00%|    def _stop(self):
  1213|         0|            0|            0|  0.00%|        pass
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    def is_alive(self):
  1216|         0|            0|            0|  0.00%|        assert not self._is_stopped and self._started.is_set()
  1217|         0|            0|            0|  0.00%|        return True
  1218|         0|            0|            0|  0.00%|
  1219|         0|            0|            0|  0.00%|    def join(self, timeout=None):
  1220|         0|            0|            0|  0.00%|        assert False, "cannot join a dummy thread"
  1221|         0|            0|            0|  0.00%|
  1222|         0|            0|            0|  0.00%|
  1223|         0|            0|            0|  0.00%|# Global API functions
  1224|         0|            0|            0|  0.00%|
  1225|       160|  0.000683546|  4.27216e-06|  0.06%|def current_thread():
  1226|         0|            0|            0|  0.00%|    """Return the current Thread object, corresponding to the caller's thread of control.
  1227|         0|            0|            0|  0.00%|
  1228|         0|            0|            0|  0.00%|    If the caller's thread of control was not created through the threading
  1229|         0|            0|            0|  0.00%|    module, a dummy thread object with limited functionality is returned.
  1230|         0|            0|            0|  0.00%|
  1231|         0|            0|            0|  0.00%|    """
  1232|       160|  0.000896692|  5.60433e-06|  0.08%|    try:
  1233|       160|   0.00100064|  6.25402e-06|  0.09%|        return _active[get_ident()]
  1234|         0|            0|            0|  0.00%|    except KeyError:
  1235|         0|            0|            0|  0.00%|        return _DummyThread()
  1236|         0|            0|            0|  0.00%|
  1237|         0|            0|            0|  0.00%|currentThread = current_thread
  1238|         0|            0|            0|  0.00%|
  1239|         0|            0|            0|  0.00%|def active_count():
  1240|         0|            0|            0|  0.00%|    """Return the number of Thread objects currently alive.
  1241|         0|            0|            0|  0.00%|
  1242|         0|            0|            0|  0.00%|    The returned count is equal to the length of the list returned by
  1243|         0|            0|            0|  0.00%|    enumerate().
  1244|         0|            0|            0|  0.00%|
  1245|         0|            0|            0|  0.00%|    """
  1246|         0|            0|            0|  0.00%|    with _active_limbo_lock:
  1247|         0|            0|            0|  0.00%|        return len(_active) + len(_limbo)
  1248|         0|            0|            0|  0.00%|
  1249|         0|            0|            0|  0.00%|activeCount = active_count
  1250|         0|            0|            0|  0.00%|
  1251|         0|            0|            0|  0.00%|def _enumerate():
  1252|         0|            0|            0|  0.00%|    # Same as enumerate(), but without the lock. Internal use only.
  1253|         0|            0|            0|  0.00%|    return list(_active.values()) + list(_limbo.values())
  1254|         0|            0|            0|  0.00%|
  1255|         0|            0|            0|  0.00%|def enumerate():
  1256|         0|            0|            0|  0.00%|    """Return a list of all Thread objects currently alive.
  1257|         0|            0|            0|  0.00%|
  1258|         0|            0|            0|  0.00%|    The list includes daemonic threads, dummy thread objects created by
  1259|         0|            0|            0|  0.00%|    current_thread(), and the main thread. It excludes terminated threads and
  1260|         0|            0|            0|  0.00%|    threads that have not yet been started.
  1261|         0|            0|            0|  0.00%|
  1262|         0|            0|            0|  0.00%|    """
  1263|         0|            0|            0|  0.00%|    with _active_limbo_lock:
  1264|         0|            0|            0|  0.00%|        return list(_active.values()) + list(_limbo.values())
  1265|         0|            0|            0|  0.00%|
  1266|         0|            0|            0|  0.00%|from _thread import stack_size
  1267|         0|            0|            0|  0.00%|
  1268|         0|            0|            0|  0.00%|# Create the main thread object,
  1269|         0|            0|            0|  0.00%|# and make it available for the interpreter
  1270|         0|            0|            0|  0.00%|# (Py_Main) as threading._shutdown.
  1271|         0|            0|            0|  0.00%|
  1272|         0|            0|            0|  0.00%|_main_thread = _MainThread()
  1273|         0|            0|            0|  0.00%|
  1274|         0|            0|            0|  0.00%|def _shutdown():
  1275|         0|            0|            0|  0.00%|    """
  1276|         0|            0|            0|  0.00%|    Wait until the Python thread state of all non-daemon threads get deleted.
  1277|         0|            0|            0|  0.00%|    """
  1278|         0|            0|            0|  0.00%|    # Obscure:  other threads may be waiting to join _main_thread.  That's
  1279|         0|            0|            0|  0.00%|    # dubious, but some code does it.  We can't wait for C code to release
  1280|         0|            0|            0|  0.00%|    # the main thread's tstate_lock - that won't happen until the interpreter
  1281|         0|            0|            0|  0.00%|    # is nearly dead.  So we release it here.  Note that just calling _stop()
  1282|         0|            0|            0|  0.00%|    # isn't enough:  other threads may already be waiting on _tstate_lock.
  1283|         0|            0|            0|  0.00%|    if _main_thread._is_stopped:
  1284|         0|            0|            0|  0.00%|        # _shutdown() was already called
  1285|         0|            0|            0|  0.00%|        return
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    # Main thread
  1288|         0|            0|            0|  0.00%|    tlock = _main_thread._tstate_lock
  1289|         0|            0|            0|  0.00%|    # The main thread isn't finished yet, so its thread state lock can't have
  1290|         0|            0|            0|  0.00%|    # been released.
  1291|         0|            0|            0|  0.00%|    assert tlock is not None
  1292|         0|            0|            0|  0.00%|    assert tlock.locked()
  1293|         0|            0|            0|  0.00%|    tlock.release()
  1294|         0|            0|            0|  0.00%|    _main_thread._stop()
  1295|         0|            0|            0|  0.00%|
  1296|         0|            0|            0|  0.00%|    # Join all non-deamon threads
  1297|         0|            0|            0|  0.00%|    while True:
  1298|         0|            0|            0|  0.00%|        with _shutdown_locks_lock:
  1299|         0|            0|            0|  0.00%|            locks = list(_shutdown_locks)
  1300|         0|            0|            0|  0.00%|            _shutdown_locks.clear()
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|        if not locks:
  1303|         0|            0|            0|  0.00%|            break
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|        for lock in locks:
  1306|         0|            0|            0|  0.00%|            # mimick Thread.join()
  1307|         0|            0|            0|  0.00%|            lock.acquire()
  1308|         0|            0|            0|  0.00%|            lock.release()
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|        # new threads can be spawned while we were waiting for the other
  1311|         0|            0|            0|  0.00%|        # threads to complete
  1312|         0|            0|            0|  0.00%|
  1313|         0|            0|            0|  0.00%|
  1314|         0|            0|            0|  0.00%|def main_thread():
  1315|         0|            0|            0|  0.00%|    """Return the main thread object.
  1316|         0|            0|            0|  0.00%|
  1317|         0|            0|            0|  0.00%|    In normal conditions, the main thread is the thread from which the
  1318|         0|            0|            0|  0.00%|    Python interpreter was started.
  1319|         0|            0|            0|  0.00%|    """
  1320|         0|            0|            0|  0.00%|    return _main_thread
  1321|         0|            0|            0|  0.00%|
  1322|         0|            0|            0|  0.00%|# get thread-local implementation, either from the thread
  1323|         0|            0|            0|  0.00%|# module, or from the python fallback
  1324|         0|            0|            0|  0.00%|
  1325|         0|            0|            0|  0.00%|try:
  1326|         0|            0|            0|  0.00%|    from _thread import _local as local
  1327|         0|            0|            0|  0.00%|except ImportError:
  1328|         0|            0|            0|  0.00%|    from _threading_local import local
  1329|         0|            0|            0|  0.00%|
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|def _after_fork():
  1332|         0|            0|            0|  0.00%|    """
  1333|         0|            0|            0|  0.00%|    Cleanup threading module state that should not exist after a fork.
  1334|         0|            0|            0|  0.00%|    """
  1335|         0|            0|            0|  0.00%|    # Reset _active_limbo_lock, in case we forked while the lock was held
  1336|         0|            0|            0|  0.00%|    # by another (non-forked) thread.  http://bugs.python.org/issue874900
  1337|         0|            0|            0|  0.00%|    global _active_limbo_lock, _main_thread
  1338|         0|            0|            0|  0.00%|    global _shutdown_locks_lock, _shutdown_locks
  1339|         0|            0|            0|  0.00%|    _active_limbo_lock = _allocate_lock()
  1340|         0|            0|            0|  0.00%|
  1341|         0|            0|            0|  0.00%|    # fork() only copied the current thread; clear references to others.
  1342|         0|            0|            0|  0.00%|    new_active = {}
  1343|         0|            0|            0|  0.00%|
  1344|         0|            0|            0|  0.00%|    try:
  1345|         0|            0|            0|  0.00%|        current = _active[get_ident()]
  1346|         0|            0|            0|  0.00%|    except KeyError:
  1347|         0|            0|            0|  0.00%|        # fork() was called in a thread which was not spawned
  1348|         0|            0|            0|  0.00%|        # by threading.Thread. For example, a thread spawned
  1349|         0|            0|            0|  0.00%|        # by thread.start_new_thread().
  1350|         0|            0|            0|  0.00%|        current = _MainThread()
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|    _main_thread = current
  1353|         0|            0|            0|  0.00%|
  1354|         0|            0|            0|  0.00%|    # reset _shutdown() locks: threads re-register their _tstate_lock below
  1355|         0|            0|            0|  0.00%|    _shutdown_locks_lock = _allocate_lock()
  1356|         0|            0|            0|  0.00%|    _shutdown_locks = set()
  1357|         0|            0|            0|  0.00%|
  1358|         0|            0|            0|  0.00%|    with _active_limbo_lock:
  1359|         0|            0|            0|  0.00%|        # Dangling thread instances must still have their locks reset,
  1360|         0|            0|            0|  0.00%|        # because someone may join() them.
  1361|         0|            0|            0|  0.00%|        threads = set(_enumerate())
  1362|         0|            0|            0|  0.00%|        threads.update(_dangling)
  1363|         0|            0|            0|  0.00%|        for thread in threads:
  1364|         0|            0|            0|  0.00%|            # Any lock/condition variable may be currently locked or in an
  1365|         0|            0|            0|  0.00%|            # invalid state, so we reinitialize them.
  1366|         0|            0|            0|  0.00%|            if thread is current:
  1367|         0|            0|            0|  0.00%|                # There is only one active thread. We reset the ident to
  1368|         0|            0|            0|  0.00%|                # its new value since it can have changed.
  1369|         0|            0|            0|  0.00%|                thread._reset_internal_locks(True)
  1370|         0|            0|            0|  0.00%|                ident = get_ident()
  1371|         0|            0|            0|  0.00%|                thread._ident = ident
  1372|         0|            0|            0|  0.00%|                new_active[ident] = thread
  1373|         0|            0|            0|  0.00%|            else:
  1374|         0|            0|            0|  0.00%|                # All the others are already stopped.
  1375|         0|            0|            0|  0.00%|                thread._reset_internal_locks(False)
  1376|         0|            0|            0|  0.00%|                thread._stop()
  1377|         0|            0|            0|  0.00%|
  1378|         0|            0|            0|  0.00%|        _limbo.clear()
  1379|         0|            0|            0|  0.00%|        _active.clear()
  1380|         0|            0|            0|  0.00%|        _active.update(new_active)
  1381|         0|            0|            0|  0.00%|        assert len(_active) == 1
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|
  1384|         0|            0|            0|  0.00%|if hasattr(_os, "register_at_fork"):
  1385|         0|            0|            0|  0.00%|    _os.register_at_fork(after_in_child=_after_fork)
File: /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py
File duration: 0.224801s (20.83%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Copyright 2009 Brian Quinlan. All Rights Reserved.
     2|         0|            0|            0|  0.00%|# Licensed to PSF under a Contributor Agreement.
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|__author__ = 'Brian Quinlan (brian@sweetapp.com)'
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|import collections
     7|         0|            0|            0|  0.00%|import logging
     8|         0|            0|            0|  0.00%|import threading
     9|         0|            0|            0|  0.00%|import time
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|FIRST_COMPLETED = 'FIRST_COMPLETED'
    12|         0|            0|            0|  0.00%|FIRST_EXCEPTION = 'FIRST_EXCEPTION'
    13|         0|            0|            0|  0.00%|ALL_COMPLETED = 'ALL_COMPLETED'
    14|         0|            0|            0|  0.00%|_AS_COMPLETED = '_AS_COMPLETED'
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|# Possible future states (for internal use by the futures package).
    17|         0|            0|            0|  0.00%|PENDING = 'PENDING'
    18|         0|            0|            0|  0.00%|RUNNING = 'RUNNING'
    19|         0|            0|            0|  0.00%|# The future was cancelled by the user...
    20|         0|            0|            0|  0.00%|CANCELLED = 'CANCELLED'
    21|         0|            0|            0|  0.00%|# ...and _Waiter.add_cancelled() was called by a worker.
    22|         0|            0|            0|  0.00%|CANCELLED_AND_NOTIFIED = 'CANCELLED_AND_NOTIFIED'
    23|         0|            0|            0|  0.00%|FINISHED = 'FINISHED'
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|_FUTURE_STATES = [
    26|         0|            0|            0|  0.00%|    PENDING,
    27|         0|            0|            0|  0.00%|    RUNNING,
    28|         0|            0|            0|  0.00%|    CANCELLED,
    29|         0|            0|            0|  0.00%|    CANCELLED_AND_NOTIFIED,
    30|         0|            0|            0|  0.00%|    FINISHED
    31|         0|            0|            0|  0.00%|]
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|_STATE_TO_DESCRIPTION_MAP = {
    34|         0|            0|            0|  0.00%|    PENDING: "pending",
    35|         0|            0|            0|  0.00%|    RUNNING: "running",
    36|         0|            0|            0|  0.00%|    CANCELLED: "cancelled",
    37|         0|            0|            0|  0.00%|    CANCELLED_AND_NOTIFIED: "cancelled",
    38|         0|            0|            0|  0.00%|    FINISHED: "finished"
    39|         0|            0|            0|  0.00%|}
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|# Logger for internal use by the futures package.
    42|         0|            0|            0|  0.00%|LOGGER = logging.getLogger("concurrent.futures")
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|class Error(Exception):
    45|         0|            0|            0|  0.00%|    """Base class for all future-related exceptions."""
    46|         0|            0|            0|  0.00%|    pass
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|class CancelledError(Error):
    49|         0|            0|            0|  0.00%|    """The Future was cancelled."""
    50|         0|            0|            0|  0.00%|    pass
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|class TimeoutError(Error):
    53|         0|            0|            0|  0.00%|    """The operation exceeded the given deadline."""
    54|         0|            0|            0|  0.00%|    pass
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|class _Waiter(object):
    57|         0|            0|            0|  0.00%|    """Provides the event that wait() and as_completed() block on."""
    58|         0|            0|            0|  0.00%|    def __init__(self):
    59|         0|            0|            0|  0.00%|        self.event = threading.Event()
    60|         0|            0|            0|  0.00%|        self.finished_futures = []
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|    def add_result(self, future):
    63|         0|            0|            0|  0.00%|        self.finished_futures.append(future)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    def add_exception(self, future):
    66|         0|            0|            0|  0.00%|        self.finished_futures.append(future)
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|    def add_cancelled(self, future):
    69|         0|            0|            0|  0.00%|        self.finished_futures.append(future)
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|class _AsCompletedWaiter(_Waiter):
    72|         0|            0|            0|  0.00%|    """Used by as_completed()."""
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|    def __init__(self):
    75|         0|            0|            0|  0.00%|        super(_AsCompletedWaiter, self).__init__()
    76|         0|            0|            0|  0.00%|        self.lock = threading.Lock()
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    def add_result(self, future):
    79|         0|            0|            0|  0.00%|        with self.lock:
    80|         0|            0|            0|  0.00%|            super(_AsCompletedWaiter, self).add_result(future)
    81|         0|            0|            0|  0.00%|            self.event.set()
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|    def add_exception(self, future):
    84|         0|            0|            0|  0.00%|        with self.lock:
    85|         0|            0|            0|  0.00%|            super(_AsCompletedWaiter, self).add_exception(future)
    86|         0|            0|            0|  0.00%|            self.event.set()
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|    def add_cancelled(self, future):
    89|         0|            0|            0|  0.00%|        with self.lock:
    90|         0|            0|            0|  0.00%|            super(_AsCompletedWaiter, self).add_cancelled(future)
    91|         0|            0|            0|  0.00%|            self.event.set()
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|class _FirstCompletedWaiter(_Waiter):
    94|         0|            0|            0|  0.00%|    """Used by wait(return_when=FIRST_COMPLETED)."""
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|    def add_result(self, future):
    97|         0|            0|            0|  0.00%|        super().add_result(future)
    98|         0|            0|            0|  0.00%|        self.event.set()
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|    def add_exception(self, future):
   101|         0|            0|            0|  0.00%|        super().add_exception(future)
   102|         0|            0|            0|  0.00%|        self.event.set()
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|    def add_cancelled(self, future):
   105|         0|            0|            0|  0.00%|        super().add_cancelled(future)
   106|         0|            0|            0|  0.00%|        self.event.set()
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|class _AllCompletedWaiter(_Waiter):
   109|         0|            0|            0|  0.00%|    """Used by wait(return_when=FIRST_EXCEPTION and ALL_COMPLETED)."""
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|    def __init__(self, num_pending_calls, stop_on_exception):
   112|         0|            0|            0|  0.00%|        self.num_pending_calls = num_pending_calls
   113|         0|            0|            0|  0.00%|        self.stop_on_exception = stop_on_exception
   114|         0|            0|            0|  0.00%|        self.lock = threading.Lock()
   115|         0|            0|            0|  0.00%|        super().__init__()
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|    def _decrement_pending_calls(self):
   118|         0|            0|            0|  0.00%|        with self.lock:
   119|         0|            0|            0|  0.00%|            self.num_pending_calls -= 1
   120|         0|            0|            0|  0.00%|            if not self.num_pending_calls:
   121|         0|            0|            0|  0.00%|                self.event.set()
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|    def add_result(self, future):
   124|         0|            0|            0|  0.00%|        super().add_result(future)
   125|         0|            0|            0|  0.00%|        self._decrement_pending_calls()
   126|         0|            0|            0|  0.00%|
   127|         0|            0|            0|  0.00%|    def add_exception(self, future):
   128|         0|            0|            0|  0.00%|        super().add_exception(future)
   129|         0|            0|            0|  0.00%|        if self.stop_on_exception:
   130|         0|            0|            0|  0.00%|            self.event.set()
   131|         0|            0|            0|  0.00%|        else:
   132|         0|            0|            0|  0.00%|            self._decrement_pending_calls()
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|    def add_cancelled(self, future):
   135|         0|            0|            0|  0.00%|        super().add_cancelled(future)
   136|         0|            0|            0|  0.00%|        self._decrement_pending_calls()
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|class _AcquireFutures(object):
   139|         0|            0|            0|  0.00%|    """A context manager that does an ordered acquire of Future conditions."""
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|    def __init__(self, futures):
   142|         0|            0|            0|  0.00%|        self.futures = sorted(futures, key=id)
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|    def __enter__(self):
   145|         0|            0|            0|  0.00%|        for future in self.futures:
   146|         0|            0|            0|  0.00%|            future._condition.acquire()
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|    def __exit__(self, *args):
   149|         0|            0|            0|  0.00%|        for future in self.futures:
   150|         0|            0|            0|  0.00%|            future._condition.release()
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|def _create_and_install_waiters(fs, return_when):
   153|         0|            0|            0|  0.00%|    if return_when == _AS_COMPLETED:
   154|         0|            0|            0|  0.00%|        waiter = _AsCompletedWaiter()
   155|         0|            0|            0|  0.00%|    elif return_when == FIRST_COMPLETED:
   156|         0|            0|            0|  0.00%|        waiter = _FirstCompletedWaiter()
   157|         0|            0|            0|  0.00%|    else:
   158|         0|            0|            0|  0.00%|        pending_count = sum(
   159|         0|            0|            0|  0.00%|                f._state not in [CANCELLED_AND_NOTIFIED, FINISHED] for f in fs)
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|        if return_when == FIRST_EXCEPTION:
   162|         0|            0|            0|  0.00%|            waiter = _AllCompletedWaiter(pending_count, stop_on_exception=True)
   163|         0|            0|            0|  0.00%|        elif return_when == ALL_COMPLETED:
   164|         0|            0|            0|  0.00%|            waiter = _AllCompletedWaiter(pending_count, stop_on_exception=False)
   165|         0|            0|            0|  0.00%|        else:
   166|         0|            0|            0|  0.00%|            raise ValueError("Invalid return condition: %r" % return_when)
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|    for f in fs:
   169|         0|            0|            0|  0.00%|        f._waiters.append(waiter)
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|    return waiter
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|def _yield_finished_futures(fs, waiter, ref_collect):
   175|         0|            0|            0|  0.00%|    """
   176|         0|            0|            0|  0.00%|    Iterate on the list *fs*, yielding finished futures one by one in
   177|         0|            0|            0|  0.00%|    reverse order.
   178|         0|            0|            0|  0.00%|    Before yielding a future, *waiter* is removed from its waiters
   179|         0|            0|            0|  0.00%|    and the future is removed from each set in the collection of sets
   180|         0|            0|            0|  0.00%|    *ref_collect*.
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|    The aim of this function is to avoid keeping stale references after
   183|         0|            0|            0|  0.00%|    the future is yielded and before the iterator resumes.
   184|         0|            0|            0|  0.00%|    """
   185|         0|            0|            0|  0.00%|    while fs:
   186|         0|            0|            0|  0.00%|        f = fs[-1]
   187|         0|            0|            0|  0.00%|        for futures_set in ref_collect:
   188|         0|            0|            0|  0.00%|            futures_set.remove(f)
   189|         0|            0|            0|  0.00%|        with f._condition:
   190|         0|            0|            0|  0.00%|            f._waiters.remove(waiter)
   191|         0|            0|            0|  0.00%|        del f
   192|         0|            0|            0|  0.00%|        # Careful not to keep a reference to the popped value
   193|         0|            0|            0|  0.00%|        yield fs.pop()
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|def as_completed(fs, timeout=None):
   197|         0|            0|            0|  0.00%|    """An iterator over the given futures that yields each as it completes.
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|    Args:
   200|         0|            0|            0|  0.00%|        fs: The sequence of Futures (possibly created by different Executors) to
   201|         0|            0|            0|  0.00%|            iterate over.
   202|         0|            0|            0|  0.00%|        timeout: The maximum number of seconds to wait. If None, then there
   203|         0|            0|            0|  0.00%|            is no limit on the wait time.
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|    Returns:
   206|         0|            0|            0|  0.00%|        An iterator that yields the given Futures as they complete (finished or
   207|         0|            0|            0|  0.00%|        cancelled). If any given Futures are duplicated, they will be returned
   208|         0|            0|            0|  0.00%|        once.
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|    Raises:
   211|         0|            0|            0|  0.00%|        TimeoutError: If the entire result iterator could not be generated
   212|         0|            0|            0|  0.00%|            before the given timeout.
   213|         0|            0|            0|  0.00%|    """
   214|         0|            0|            0|  0.00%|    if timeout is not None:
   215|         0|            0|            0|  0.00%|        end_time = timeout + time.monotonic()
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|    fs = set(fs)
   218|         0|            0|            0|  0.00%|    total_futures = len(fs)
   219|         0|            0|            0|  0.00%|    with _AcquireFutures(fs):
   220|         0|            0|            0|  0.00%|        finished = set(
   221|         0|            0|            0|  0.00%|                f for f in fs
   222|         0|            0|            0|  0.00%|                if f._state in [CANCELLED_AND_NOTIFIED, FINISHED])
   223|         0|            0|            0|  0.00%|        pending = fs - finished
   224|         0|            0|            0|  0.00%|        waiter = _create_and_install_waiters(fs, _AS_COMPLETED)
   225|         0|            0|            0|  0.00%|    finished = list(finished)
   226|         0|            0|            0|  0.00%|    try:
   227|         0|            0|            0|  0.00%|        yield from _yield_finished_futures(finished, waiter,
   228|         0|            0|            0|  0.00%|                                           ref_collect=(fs,))
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|        while pending:
   231|         0|            0|            0|  0.00%|            if timeout is None:
   232|         0|            0|            0|  0.00%|                wait_timeout = None
   233|         0|            0|            0|  0.00%|            else:
   234|         0|            0|            0|  0.00%|                wait_timeout = end_time - time.monotonic()
   235|         0|            0|            0|  0.00%|                if wait_timeout < 0:
   236|         0|            0|            0|  0.00%|                    raise TimeoutError(
   237|         0|            0|            0|  0.00%|                            '%d (of %d) futures unfinished' % (
   238|         0|            0|            0|  0.00%|                            len(pending), total_futures))
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|            waiter.event.wait(wait_timeout)
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|            with waiter.lock:
   243|         0|            0|            0|  0.00%|                finished = waiter.finished_futures
   244|         0|            0|            0|  0.00%|                waiter.finished_futures = []
   245|         0|            0|            0|  0.00%|                waiter.event.clear()
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|            # reverse to keep finishing order
   248|         0|            0|            0|  0.00%|            finished.reverse()
   249|         0|            0|            0|  0.00%|            yield from _yield_finished_futures(finished, waiter,
   250|         0|            0|            0|  0.00%|                                               ref_collect=(fs, pending))
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|    finally:
   253|         0|            0|            0|  0.00%|        # Remove waiter from unfinished futures
   254|         0|            0|            0|  0.00%|        for f in fs:
   255|         0|            0|            0|  0.00%|            with f._condition:
   256|         0|            0|            0|  0.00%|                f._waiters.remove(waiter)
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|DoneAndNotDoneFutures = collections.namedtuple(
   259|         0|            0|            0|  0.00%|        'DoneAndNotDoneFutures', 'done not_done')
   260|         0|            0|            0|  0.00%|def wait(fs, timeout=None, return_when=ALL_COMPLETED):
   261|         0|            0|            0|  0.00%|    """Wait for the futures in the given sequence to complete.
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    Args:
   264|         0|            0|            0|  0.00%|        fs: The sequence of Futures (possibly created by different Executors) to
   265|         0|            0|            0|  0.00%|            wait upon.
   266|         0|            0|            0|  0.00%|        timeout: The maximum number of seconds to wait. If None, then there
   267|         0|            0|            0|  0.00%|            is no limit on the wait time.
   268|         0|            0|            0|  0.00%|        return_when: Indicates when this function should return. The options
   269|         0|            0|            0|  0.00%|            are:
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|            FIRST_COMPLETED - Return when any future finishes or is
   272|         0|            0|            0|  0.00%|                              cancelled.
   273|         0|            0|            0|  0.00%|            FIRST_EXCEPTION - Return when any future finishes by raising an
   274|         0|            0|            0|  0.00%|                              exception. If no future raises an exception
   275|         0|            0|            0|  0.00%|                              then it is equivalent to ALL_COMPLETED.
   276|         0|            0|            0|  0.00%|            ALL_COMPLETED -   Return when all futures finish or are cancelled.
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|    Returns:
   279|         0|            0|            0|  0.00%|        A named 2-tuple of sets. The first set, named 'done', contains the
   280|         0|            0|            0|  0.00%|        futures that completed (is finished or cancelled) before the wait
   281|         0|            0|            0|  0.00%|        completed. The second set, named 'not_done', contains uncompleted
   282|         0|            0|            0|  0.00%|        futures.
   283|         0|            0|            0|  0.00%|    """
   284|         0|            0|            0|  0.00%|    with _AcquireFutures(fs):
   285|         0|            0|            0|  0.00%|        done = set(f for f in fs
   286|         0|            0|            0|  0.00%|                   if f._state in [CANCELLED_AND_NOTIFIED, FINISHED])
   287|         0|            0|            0|  0.00%|        not_done = set(fs) - done
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|        if (return_when == FIRST_COMPLETED) and done:
   290|         0|            0|            0|  0.00%|            return DoneAndNotDoneFutures(done, not_done)
   291|         0|            0|            0|  0.00%|        elif (return_when == FIRST_EXCEPTION) and done:
   292|         0|            0|            0|  0.00%|            if any(f for f in done
   293|         0|            0|            0|  0.00%|                   if not f.cancelled() and f.exception() is not None):
   294|         0|            0|            0|  0.00%|                return DoneAndNotDoneFutures(done, not_done)
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|        if len(done) == len(fs):
   297|         0|            0|            0|  0.00%|            return DoneAndNotDoneFutures(done, not_done)
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|        waiter = _create_and_install_waiters(fs, return_when)
   300|         0|            0|            0|  0.00%|
   301|         0|            0|            0|  0.00%|    waiter.event.wait(timeout)
   302|         0|            0|            0|  0.00%|    for f in fs:
   303|         0|            0|            0|  0.00%|        with f._condition:
   304|         0|            0|            0|  0.00%|            f._waiters.remove(waiter)
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|    done.update(waiter.finished_futures)
   307|         0|            0|            0|  0.00%|    return DoneAndNotDoneFutures(done, set(fs) - done)
   308|         0|            0|            0|  0.00%|
   309|         0|            0|            0|  0.00%|class Future(object):
   310|         0|            0|            0|  0.00%|    """Represents the result of an asynchronous computation."""
   311|         0|            0|            0|  0.00%|
   312|      1001|   0.00450397|  4.49947e-06|  0.42%|    def __init__(self):
   313|         0|            0|            0|  0.00%|        """Initializes the future. Should not be called by clients."""
   314|      1001|    0.0186808|  1.86621e-05|  1.73%|        self._condition = threading.Condition()
(call)|      1001|     0.110968|  0.000110857| 10.28%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:216 __init__
   315|      1001|    0.0058949|  5.88901e-06|  0.55%|        self._state = PENDING
   316|      1001|   0.00577903|  5.77325e-06|  0.54%|        self._result = None
   317|      1001|   0.00567412|  5.66846e-06|  0.53%|        self._exception = None
   318|      1001|   0.00572491|  5.71919e-06|  0.53%|        self._waiters = []
   319|      1001|   0.00605059|  6.04454e-06|  0.56%|        self._done_callbacks = []
   320|         0|            0|            0|  0.00%|
   321|      1001|    0.0047338|  4.72907e-06|  0.44%|    def _invoke_callbacks(self):
   322|      1001|   0.00720644|  7.19924e-06|  0.67%|        for callback in self._done_callbacks:
   323|         0|            0|            0|  0.00%|            try:
   324|         0|            0|            0|  0.00%|                callback(self)
   325|         0|            0|            0|  0.00%|            except Exception:
   326|         0|            0|            0|  0.00%|                LOGGER.exception('exception calling callback for %r', self)
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|    def __repr__(self):
   329|         0|            0|            0|  0.00%|        with self._condition:
   330|         0|            0|            0|  0.00%|            if self._state == FINISHED:
   331|         0|            0|            0|  0.00%|                if self._exception:
   332|         0|            0|            0|  0.00%|                    return '<%s at %#x state=%s raised %s>' % (
   333|         0|            0|            0|  0.00%|                        self.__class__.__name__,
   334|         0|            0|            0|  0.00%|                        id(self),
   335|         0|            0|            0|  0.00%|                        _STATE_TO_DESCRIPTION_MAP[self._state],
   336|         0|            0|            0|  0.00%|                        self._exception.__class__.__name__)
   337|         0|            0|            0|  0.00%|                else:
   338|         0|            0|            0|  0.00%|                    return '<%s at %#x state=%s returned %s>' % (
   339|         0|            0|            0|  0.00%|                        self.__class__.__name__,
   340|         0|            0|            0|  0.00%|                        id(self),
   341|         0|            0|            0|  0.00%|                        _STATE_TO_DESCRIPTION_MAP[self._state],
   342|         0|            0|            0|  0.00%|                        self._result.__class__.__name__)
   343|         0|            0|            0|  0.00%|            return '<%s at %#x state=%s>' % (
   344|         0|            0|            0|  0.00%|                    self.__class__.__name__,
   345|         0|            0|            0|  0.00%|                    id(self),
   346|         0|            0|            0|  0.00%|                   _STATE_TO_DESCRIPTION_MAP[self._state])
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|    def cancel(self):
   349|         0|            0|            0|  0.00%|        """Cancel the future if possible.
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|        Returns True if the future was cancelled, False otherwise. A future
   352|         0|            0|            0|  0.00%|        cannot be cancelled if it is running or has already completed.
   353|         0|            0|            0|  0.00%|        """
   354|         0|            0|            0|  0.00%|        with self._condition:
   355|         0|            0|            0|  0.00%|            if self._state in [RUNNING, FINISHED]:
   356|         0|            0|            0|  0.00%|                return False
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:
   359|         0|            0|            0|  0.00%|                return True
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|            self._state = CANCELLED
   362|         0|            0|            0|  0.00%|            self._condition.notify_all()
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|        self._invoke_callbacks()
   365|         0|            0|            0|  0.00%|        return True
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|    def cancelled(self):
   368|         0|            0|            0|  0.00%|        """Return True if the future was cancelled."""
   369|         0|            0|            0|  0.00%|        with self._condition:
   370|         0|            0|            0|  0.00%|            return self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|    def running(self):
   373|         0|            0|            0|  0.00%|        """Return True if the future is currently executing."""
   374|         0|            0|            0|  0.00%|        with self._condition:
   375|         0|            0|            0|  0.00%|            return self._state == RUNNING
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|    def done(self):
   378|         0|            0|            0|  0.00%|        """Return True of the future was cancelled or finished executing."""
   379|         0|            0|            0|  0.00%|        with self._condition:
   380|         0|            0|            0|  0.00%|            return self._state in [CANCELLED, CANCELLED_AND_NOTIFIED, FINISHED]
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|    def __get_result(self):
   383|         0|            0|            0|  0.00%|        if self._exception:
   384|         0|            0|            0|  0.00%|            raise self._exception
   385|         0|            0|            0|  0.00%|        else:
   386|         0|            0|            0|  0.00%|            return self._result
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|    def add_done_callback(self, fn):
   389|         0|            0|            0|  0.00%|        """Attaches a callable that will be called when the future finishes.
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|        Args:
   392|         0|            0|            0|  0.00%|            fn: A callable that will be called with this future as its only
   393|         0|            0|            0|  0.00%|                argument when the future completes or is cancelled. The callable
   394|         0|            0|            0|  0.00%|                will always be called by a thread in the same process in which
   395|         0|            0|            0|  0.00%|                it was added. If the future has already completed or been
   396|         0|            0|            0|  0.00%|                cancelled then the callable will be called immediately. These
   397|         0|            0|            0|  0.00%|                callables are called in the order that they were added.
   398|         0|            0|            0|  0.00%|        """
   399|         0|            0|            0|  0.00%|        with self._condition:
   400|         0|            0|            0|  0.00%|            if self._state not in [CANCELLED, CANCELLED_AND_NOTIFIED, FINISHED]:
   401|         0|            0|            0|  0.00%|                self._done_callbacks.append(fn)
   402|         0|            0|            0|  0.00%|                return
   403|         0|            0|            0|  0.00%|        try:
   404|         0|            0|            0|  0.00%|            fn(self)
   405|         0|            0|            0|  0.00%|        except Exception:
   406|         0|            0|            0|  0.00%|            LOGGER.exception('exception calling callback for %r', self)
   407|         0|            0|            0|  0.00%|
   408|         0|            0|            0|  0.00%|    def result(self, timeout=None):
   409|         0|            0|            0|  0.00%|        """Return the result of the call that the future represents.
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|        Args:
   412|         0|            0|            0|  0.00%|            timeout: The number of seconds to wait for the result if the future
   413|         0|            0|            0|  0.00%|                isn't done. If None, then there is no limit on the wait time.
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|        Returns:
   416|         0|            0|            0|  0.00%|            The result of the call that the future represents.
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|        Raises:
   419|         0|            0|            0|  0.00%|            CancelledError: If the future was cancelled.
   420|         0|            0|            0|  0.00%|            TimeoutError: If the future didn't finish executing before the given
   421|         0|            0|            0|  0.00%|                timeout.
   422|         0|            0|            0|  0.00%|            Exception: If the call raised then that exception will be raised.
   423|         0|            0|            0|  0.00%|        """
   424|         0|            0|            0|  0.00%|        with self._condition:
   425|         0|            0|            0|  0.00%|            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:
   426|         0|            0|            0|  0.00%|                raise CancelledError()
   427|         0|            0|            0|  0.00%|            elif self._state == FINISHED:
   428|         0|            0|            0|  0.00%|                return self.__get_result()
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|            self._condition.wait(timeout)
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:
   433|         0|            0|            0|  0.00%|                raise CancelledError()
   434|         0|            0|            0|  0.00%|            elif self._state == FINISHED:
   435|         0|            0|            0|  0.00%|                return self.__get_result()
   436|         0|            0|            0|  0.00%|            else:
   437|         0|            0|            0|  0.00%|                raise TimeoutError()
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|    def exception(self, timeout=None):
   440|         0|            0|            0|  0.00%|        """Return the exception raised by the call that the future represents.
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|        Args:
   443|         0|            0|            0|  0.00%|            timeout: The number of seconds to wait for the exception if the
   444|         0|            0|            0|  0.00%|                future isn't done. If None, then there is no limit on the wait
   445|         0|            0|            0|  0.00%|                time.
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|        Returns:
   448|         0|            0|            0|  0.00%|            The exception raised by the call that the future represents or None
   449|         0|            0|            0|  0.00%|            if the call completed without raising.
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|        Raises:
   452|         0|            0|            0|  0.00%|            CancelledError: If the future was cancelled.
   453|         0|            0|            0|  0.00%|            TimeoutError: If the future didn't finish executing before the given
   454|         0|            0|            0|  0.00%|                timeout.
   455|         0|            0|            0|  0.00%|        """
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|        with self._condition:
   458|         0|            0|            0|  0.00%|            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:
   459|         0|            0|            0|  0.00%|                raise CancelledError()
   460|         0|            0|            0|  0.00%|            elif self._state == FINISHED:
   461|         0|            0|            0|  0.00%|                return self._exception
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|            self._condition.wait(timeout)
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|            if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:
   466|         0|            0|            0|  0.00%|                raise CancelledError()
   467|         0|            0|            0|  0.00%|            elif self._state == FINISHED:
   468|         0|            0|            0|  0.00%|                return self._exception
   469|         0|            0|            0|  0.00%|            else:
   470|         0|            0|            0|  0.00%|                raise TimeoutError()
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|    # The following methods should only be used by Executors and in tests.
   473|      1001|   0.00492072|  4.91581e-06|  0.46%|    def set_running_or_notify_cancel(self):
   474|         0|            0|            0|  0.00%|        """Mark the future as running or process any cancel notifications.
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|        Should only be used by Executor implementations and unit tests.
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|        If the future has been cancelled (cancel() was called and returned
   479|         0|            0|            0|  0.00%|        True) then any threads waiting on the future completing (though calls
   480|         0|            0|            0|  0.00%|        to as_completed() or wait()) are notified and False is returned.
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|        If the future was not cancelled then it is put in the running state
   483|         0|            0|            0|  0.00%|        (future calls to running() will return True) and True is returned.
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|        This method should be called by Executor implementations before
   486|         0|            0|            0|  0.00%|        executing the work associated with this future. If this method returns
   487|         0|            0|            0|  0.00%|        False then the work should not be executed.
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|        Returns:
   490|         0|            0|            0|  0.00%|            False if the Future was cancelled, True otherwise.
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|        Raises:
   493|         0|            0|            0|  0.00%|            RuntimeError: if this method was already called or if set_result()
   494|         0|            0|            0|  0.00%|                or set_exception() was called.
   495|         0|            0|            0|  0.00%|        """
   496|      1001|    0.0196369|  1.96173e-05|  1.82%|        with self._condition:
(call)|      1001|     0.011853|  1.18411e-05|  1.10%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:240 __enter__
   497|      1001|   0.00698972|  6.98273e-06|  0.65%|            if self._state == CANCELLED:
   498|         0|            0|            0|  0.00%|                self._state = CANCELLED_AND_NOTIFIED
   499|         0|            0|            0|  0.00%|                for waiter in self._waiters:
   500|         0|            0|            0|  0.00%|                    waiter.add_cancelled(self)
   501|         0|            0|            0|  0.00%|                # self._condition.notify_all() is not necessary because
   502|         0|            0|            0|  0.00%|                # self.cancel() triggers a notification.
   503|         0|            0|            0|  0.00%|                return False
   504|      1001|   0.00688577|  6.87889e-06|  0.64%|            elif self._state == PENDING:
   505|      1001|   0.00701761|   7.0106e-06|  0.65%|                self._state = RUNNING
   506|      1001|    0.0190265|  1.90075e-05|  1.76%|                return True
(call)|      1001|    0.0117755|  1.17637e-05|  1.09%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:243 __exit__
   507|         0|            0|            0|  0.00%|            else:
   508|         0|            0|            0|  0.00%|                LOGGER.critical('Future %s in unexpected state: %s',
   509|         0|            0|            0|  0.00%|                                id(self),
   510|         0|            0|            0|  0.00%|                                self._state)
   511|         0|            0|            0|  0.00%|                raise RuntimeError('Future in unexpected state')
   512|         0|            0|            0|  0.00%|
   513|      1001|   0.00568557|  5.67989e-06|  0.53%|    def set_result(self, result):
   514|         0|            0|            0|  0.00%|        """Sets the return value of work associated with the future.
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|        Should only be used by Executor implementations and unit tests.
   517|         0|            0|            0|  0.00%|        """
   518|      1001|    0.0198984|  1.98785e-05|  1.84%|        with self._condition:
(call)|      1001|    0.0124643|  1.24518e-05|  1.16%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:240 __enter__
   519|      1001|   0.00716424|  7.15708e-06|  0.66%|            self._result = result
   520|      1001|    0.0069592|  6.95225e-06|  0.64%|            self._state = FINISHED
   521|      1001|   0.00719714|  7.18995e-06|  0.67%|            for waiter in self._waiters:
   522|         0|            0|            0|  0.00%|                waiter.add_result(self)
   523|      1001|    0.0303037|  3.02734e-05|  2.81%|            self._condition.notify_all()
(call)|      1001|    0.0669379|  6.68711e-05|  6.20%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:358 notify_all
(call)|      1001|    0.0114129|  1.14015e-05|  1.06%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/threading.py:243 __exit__
   524|      1001|    0.0187819|  1.87631e-05|  1.74%|        self._invoke_callbacks()
(call)|      1001|    0.0119402|  1.19283e-05|  1.11%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/_base.py:321 _invoke_callbacks
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|    def set_exception(self, exception):
   527|         0|            0|            0|  0.00%|        """Sets the result of the future as being the given exception.
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|        Should only be used by Executor implementations and unit tests.
   530|         0|            0|            0|  0.00%|        """
   531|         0|            0|            0|  0.00%|        with self._condition:
   532|         0|            0|            0|  0.00%|            self._exception = exception
   533|         0|            0|            0|  0.00%|            self._state = FINISHED
   534|         0|            0|            0|  0.00%|            for waiter in self._waiters:
   535|         0|            0|            0|  0.00%|                waiter.add_exception(self)
   536|         0|            0|            0|  0.00%|            self._condition.notify_all()
   537|         0|            0|            0|  0.00%|        self._invoke_callbacks()
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|class Executor(object):
   540|         0|            0|            0|  0.00%|    """This is an abstract base class for concrete asynchronous executors."""
   541|         0|            0|            0|  0.00%|
   542|         0|            0|            0|  0.00%|    def submit(*args, **kwargs):
   543|         0|            0|            0|  0.00%|        """Submits a callable to be executed with the given arguments.
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|        Schedules the callable to be executed as fn(*args, **kwargs) and returns
   546|         0|            0|            0|  0.00%|        a Future instance representing the execution of the callable.
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|        Returns:
   549|         0|            0|            0|  0.00%|            A Future representing the given call.
   550|         0|            0|            0|  0.00%|        """
   551|         0|            0|            0|  0.00%|        if len(args) >= 2:
   552|         0|            0|            0|  0.00%|            pass
   553|         0|            0|            0|  0.00%|        elif not args:
   554|         0|            0|            0|  0.00%|            raise TypeError("descriptor 'submit' of 'Executor' object "
   555|         0|            0|            0|  0.00%|                            "needs an argument")
   556|         0|            0|            0|  0.00%|        elif 'fn' not in kwargs:
   557|         0|            0|            0|  0.00%|            raise TypeError('submit expected at least 1 positional argument, '
   558|         0|            0|            0|  0.00%|                            'got %d' % (len(args)-1))
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|        raise NotImplementedError()
   561|         0|            0|            0|  0.00%|
   562|         0|            0|            0|  0.00%|    def map(self, fn, *iterables, timeout=None, chunksize=1):
   563|         0|            0|            0|  0.00%|        """Returns an iterator equivalent to map(fn, iter).
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|        Args:
   566|         0|            0|            0|  0.00%|            fn: A callable that will take as many arguments as there are
   567|         0|            0|            0|  0.00%|                passed iterables.
   568|         0|            0|            0|  0.00%|            timeout: The maximum number of seconds to wait. If None, then there
   569|         0|            0|            0|  0.00%|                is no limit on the wait time.
   570|         0|            0|            0|  0.00%|            chunksize: The size of the chunks the iterable will be broken into
   571|         0|            0|            0|  0.00%|                before being passed to a child process. This argument is only
   572|         0|            0|            0|  0.00%|                used by ProcessPoolExecutor; it is ignored by
   573|         0|            0|            0|  0.00%|                ThreadPoolExecutor.
   574|         0|            0|            0|  0.00%|
   575|         0|            0|            0|  0.00%|        Returns:
   576|         0|            0|            0|  0.00%|            An iterator equivalent to: map(func, *iterables) but the calls may
   577|         0|            0|            0|  0.00%|            be evaluated out-of-order.
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|        Raises:
   580|         0|            0|            0|  0.00%|            TimeoutError: If the entire result iterator could not be generated
   581|         0|            0|            0|  0.00%|                before the given timeout.
   582|         0|            0|            0|  0.00%|            Exception: If fn(*args) raises for any values.
   583|         0|            0|            0|  0.00%|        """
   584|         0|            0|            0|  0.00%|        if timeout is not None:
   585|         0|            0|            0|  0.00%|            end_time = timeout + time.monotonic()
   586|         0|            0|            0|  0.00%|
   587|         0|            0|            0|  0.00%|        fs = [self.submit(fn, *args) for args in zip(*iterables)]
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|        # Yield must be hidden in closure so that the futures are submitted
   590|         0|            0|            0|  0.00%|        # before the first iterator value is required.
   591|         0|            0|            0|  0.00%|        def result_iterator():
   592|         0|            0|            0|  0.00%|            try:
   593|         0|            0|            0|  0.00%|                # reverse to keep finishing order
   594|         0|            0|            0|  0.00%|                fs.reverse()
   595|         0|            0|            0|  0.00%|                while fs:
   596|         0|            0|            0|  0.00%|                    # Careful not to keep a reference to the popped future
   597|         0|            0|            0|  0.00%|                    if timeout is None:
   598|         0|            0|            0|  0.00%|                        yield fs.pop().result()
   599|         0|            0|            0|  0.00%|                    else:
   600|         0|            0|            0|  0.00%|                        yield fs.pop().result(end_time - time.monotonic())
   601|         0|            0|            0|  0.00%|            finally:
   602|         0|            0|            0|  0.00%|                for future in fs:
   603|         0|            0|            0|  0.00%|                    future.cancel()
   604|         0|            0|            0|  0.00%|        return result_iterator()
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|    def shutdown(self, wait=True):
   607|         0|            0|            0|  0.00%|        """Clean-up the resources associated with the Executor.
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|        It is safe to call this method several times. Otherwise, no other
   610|         0|            0|            0|  0.00%|        methods can be called after this one.
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|        Args:
   613|         0|            0|            0|  0.00%|            wait: If True then shutdown will not return until all running
   614|         0|            0|            0|  0.00%|                futures have finished executing and the resources used by the
   615|         0|            0|            0|  0.00%|                executor have been reclaimed.
   616|         0|            0|            0|  0.00%|        """
   617|         0|            0|            0|  0.00%|        pass
   618|         0|            0|            0|  0.00%|
   619|         1|  7.86781e-06|  7.86781e-06|  0.00%|    def __enter__(self):
   620|         1|  2.71797e-05|  2.71797e-05|  0.00%|        return self
   621|         0|            0|            0|  0.00%|
   622|         1|  1.00136e-05|  1.00136e-05|  0.00%|    def __exit__(self, exc_type, exc_val, exc_tb):
   623|         1|  3.00407e-05|  3.00407e-05|  0.00%|        self.shutdown(wait=True)
(call)|         1|     0.559275|     0.559275| 51.83%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:210 shutdown
   624|         1|  9.77516e-06|  9.77516e-06|  0.00%|        return False
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|class BrokenExecutor(RuntimeError):
   628|         0|            0|            0|  0.00%|    """
   629|         0|            0|            0|  0.00%|    Raised when a executor has become non-functional after a severe failure.
   630|         0|            0|            0|  0.00%|    """
File: /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/_weakrefset.py
File duration: 0.00377488s (0.35%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Access WeakSet through the weakref module.
     2|         0|            0|            0|  0.00%|# This code is separated-out because it is needed
     3|         0|            0|            0|  0.00%|# by abc.py to load everything else at startup.
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|from _weakref import ref
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|__all__ = ['WeakSet']
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|class _IterationGuard:
    11|         0|            0|            0|  0.00%|    # This context manager registers itself in the current iterators of the
    12|         0|            0|            0|  0.00%|    # weak container, such as to delay all removals until the context manager
    13|         0|            0|            0|  0.00%|    # exits.
    14|         0|            0|            0|  0.00%|    # This technique should be relatively thread-safe (since sets are).
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|    def __init__(self, weakcontainer):
    17|         0|            0|            0|  0.00%|        # Don't create cycles
    18|         0|            0|            0|  0.00%|        self.weakcontainer = ref(weakcontainer)
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|    def __enter__(self):
    21|         0|            0|            0|  0.00%|        w = self.weakcontainer()
    22|         0|            0|            0|  0.00%|        if w is not None:
    23|         0|            0|            0|  0.00%|            w._iterating.add(self)
    24|         0|            0|            0|  0.00%|        return self
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|    def __exit__(self, e, t, b):
    27|         0|            0|            0|  0.00%|        w = self.weakcontainer()
    28|         0|            0|            0|  0.00%|        if w is not None:
    29|         0|            0|            0|  0.00%|            s = w._iterating
    30|         0|            0|            0|  0.00%|            s.remove(self)
    31|         0|            0|            0|  0.00%|            if not s:
    32|         0|            0|            0|  0.00%|                w._commit_removals()
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|class WeakSet:
    36|         0|            0|            0|  0.00%|    def __init__(self, data=None):
    37|         0|            0|            0|  0.00%|        self.data = set()
    38|        80|  0.000401974|  5.02467e-06|  0.04%|        def _remove(item, selfref=ref(self)):
    39|        80|  0.000527143|  6.58929e-06|  0.05%|            self = selfref()
    40|        80|  0.000453949|  5.67436e-06|  0.04%|            if self is not None:
    41|        80|  0.000494719|  6.18398e-06|  0.05%|                if self._iterating:
    42|         0|            0|            0|  0.00%|                    self._pending_removals.append(item)
    43|         0|            0|            0|  0.00%|                else:
    44|        80|  0.000494003|  6.17504e-06|  0.05%|                    self.data.discard(item)
    45|         0|            0|            0|  0.00%|        self._remove = _remove
    46|         0|            0|            0|  0.00%|        # A list of keys to be removed
    47|         0|            0|            0|  0.00%|        self._pending_removals = []
    48|         0|            0|            0|  0.00%|        self._iterating = set()
    49|         0|            0|            0|  0.00%|        if data is not None:
    50|         0|            0|            0|  0.00%|            self.update(data)
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|    def _commit_removals(self):
    53|         0|            0|            0|  0.00%|        l = self._pending_removals
    54|         0|            0|            0|  0.00%|        discard = self.data.discard
    55|         0|            0|            0|  0.00%|        while l:
    56|         0|            0|            0|  0.00%|            discard(l.pop())
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|    def __iter__(self):
    59|         0|            0|            0|  0.00%|        with _IterationGuard(self):
    60|         0|            0|            0|  0.00%|            for itemref in self.data:
    61|         0|            0|            0|  0.00%|                item = itemref()
    62|         0|            0|            0|  0.00%|                if item is not None:
    63|         0|            0|            0|  0.00%|                    # Caveat: the iterator will keep a strong reference to
    64|         0|            0|            0|  0.00%|                    # `item` until it is resumed or closed.
    65|         0|            0|            0|  0.00%|                    yield item
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|    def __len__(self):
    68|         0|            0|            0|  0.00%|        return len(self.data) - len(self._pending_removals)
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|    def __contains__(self, item):
    71|         0|            0|            0|  0.00%|        try:
    72|         0|            0|            0|  0.00%|            wr = ref(item)
    73|         0|            0|            0|  0.00%|        except TypeError:
    74|         0|            0|            0|  0.00%|            return False
    75|         0|            0|            0|  0.00%|        return wr in self.data
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|    def __reduce__(self):
    78|         0|            0|            0|  0.00%|        return (self.__class__, (list(self),),
    79|         0|            0|            0|  0.00%|                getattr(self, '__dict__', None))
    80|         0|            0|            0|  0.00%|
    81|        80|  0.000371218|  4.64022e-06|  0.03%|    def add(self, item):
    82|        80|   0.00046134|  5.76675e-06|  0.04%|        if self._pending_removals:
    83|         0|            0|            0|  0.00%|            self._commit_removals()
    84|        80|  0.000570536|   7.1317e-06|  0.05%|        self.data.add(ref(item, self._remove))
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|    def clear(self):
    87|         0|            0|            0|  0.00%|        if self._pending_removals:
    88|         0|            0|            0|  0.00%|            self._commit_removals()
    89|         0|            0|            0|  0.00%|        self.data.clear()
    90|         0|            0|            0|  0.00%|
    91|         0|            0|            0|  0.00%|    def copy(self):
    92|         0|            0|            0|  0.00%|        return self.__class__(self)
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|    def pop(self):
    95|         0|            0|            0|  0.00%|        if self._pending_removals:
    96|         0|            0|            0|  0.00%|            self._commit_removals()
    97|         0|            0|            0|  0.00%|        while True:
    98|         0|            0|            0|  0.00%|            try:
    99|         0|            0|            0|  0.00%|                itemref = self.data.pop()
   100|         0|            0|            0|  0.00%|            except KeyError:
   101|         0|            0|            0|  0.00%|                raise KeyError('pop from empty WeakSet') from None
   102|         0|            0|            0|  0.00%|            item = itemref()
   103|         0|            0|            0|  0.00%|            if item is not None:
   104|         0|            0|            0|  0.00%|                return item
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|    def remove(self, item):
   107|         0|            0|            0|  0.00%|        if self._pending_removals:
   108|         0|            0|            0|  0.00%|            self._commit_removals()
   109|         0|            0|            0|  0.00%|        self.data.remove(ref(item))
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|    def discard(self, item):
   112|         0|            0|            0|  0.00%|        if self._pending_removals:
   113|         0|            0|            0|  0.00%|            self._commit_removals()
   114|         0|            0|            0|  0.00%|        self.data.discard(ref(item))
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|    def update(self, other):
   117|         0|            0|            0|  0.00%|        if self._pending_removals:
   118|         0|            0|            0|  0.00%|            self._commit_removals()
   119|         0|            0|            0|  0.00%|        for element in other:
   120|         0|            0|            0|  0.00%|            self.add(element)
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|    def __ior__(self, other):
   123|         0|            0|            0|  0.00%|        self.update(other)
   124|         0|            0|            0|  0.00%|        return self
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|    def difference(self, other):
   127|         0|            0|            0|  0.00%|        newset = self.copy()
   128|         0|            0|            0|  0.00%|        newset.difference_update(other)
   129|         0|            0|            0|  0.00%|        return newset
   130|         0|            0|            0|  0.00%|    __sub__ = difference
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|    def difference_update(self, other):
   133|         0|            0|            0|  0.00%|        self.__isub__(other)
   134|         0|            0|            0|  0.00%|    def __isub__(self, other):
   135|         0|            0|            0|  0.00%|        if self._pending_removals:
   136|         0|            0|            0|  0.00%|            self._commit_removals()
   137|         0|            0|            0|  0.00%|        if self is other:
   138|         0|            0|            0|  0.00%|            self.data.clear()
   139|         0|            0|            0|  0.00%|        else:
   140|         0|            0|            0|  0.00%|            self.data.difference_update(ref(item) for item in other)
   141|         0|            0|            0|  0.00%|        return self
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|    def intersection(self, other):
   144|         0|            0|            0|  0.00%|        return self.__class__(item for item in other if item in self)
   145|         0|            0|            0|  0.00%|    __and__ = intersection
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|    def intersection_update(self, other):
   148|         0|            0|            0|  0.00%|        self.__iand__(other)
   149|         0|            0|            0|  0.00%|    def __iand__(self, other):
   150|         0|            0|            0|  0.00%|        if self._pending_removals:
   151|         0|            0|            0|  0.00%|            self._commit_removals()
   152|         0|            0|            0|  0.00%|        self.data.intersection_update(ref(item) for item in other)
   153|         0|            0|            0|  0.00%|        return self
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|    def issubset(self, other):
   156|         0|            0|            0|  0.00%|        return self.data.issubset(ref(item) for item in other)
   157|         0|            0|            0|  0.00%|    __le__ = issubset
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|    def __lt__(self, other):
   160|         0|            0|            0|  0.00%|        return self.data < set(map(ref, other))
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|    def issuperset(self, other):
   163|         0|            0|            0|  0.00%|        return self.data.issuperset(ref(item) for item in other)
   164|         0|            0|            0|  0.00%|    __ge__ = issuperset
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|    def __gt__(self, other):
   167|         0|            0|            0|  0.00%|        return self.data > set(map(ref, other))
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|    def __eq__(self, other):
   170|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   171|         0|            0|            0|  0.00%|            return NotImplemented
   172|         0|            0|            0|  0.00%|        return self.data == set(map(ref, other))
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|    def symmetric_difference(self, other):
   175|         0|            0|            0|  0.00%|        newset = self.copy()
   176|         0|            0|            0|  0.00%|        newset.symmetric_difference_update(other)
   177|         0|            0|            0|  0.00%|        return newset
   178|         0|            0|            0|  0.00%|    __xor__ = symmetric_difference
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|    def symmetric_difference_update(self, other):
   181|         0|            0|            0|  0.00%|        self.__ixor__(other)
   182|         0|            0|            0|  0.00%|    def __ixor__(self, other):
   183|         0|            0|            0|  0.00%|        if self._pending_removals:
   184|         0|            0|            0|  0.00%|            self._commit_removals()
   185|         0|            0|            0|  0.00%|        if self is other:
   186|         0|            0|            0|  0.00%|            self.data.clear()
   187|         0|            0|            0|  0.00%|        else:
   188|         0|            0|            0|  0.00%|            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)
   189|         0|            0|            0|  0.00%|        return self
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|    def union(self, other):
   192|         0|            0|            0|  0.00%|        return self.__class__(e for s in (self, other) for e in s)
   193|         0|            0|            0|  0.00%|    __or__ = union
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|    def isdisjoint(self, other):
   196|         0|            0|            0|  0.00%|        return len(self.intersection(other)) == 0
File: <frozen importlib._bootstrap_external>
File duration: 0.00362635s (0.34%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|         1|  8.10623e-06|  8.10623e-06|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         1|  7.86781e-06|  7.86781e-06|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         3|   1.4782e-05|  4.92732e-06|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         3|  2.36034e-05|  7.86781e-06|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         6|  3.19481e-05|  5.32468e-06|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|        32|  0.000192881|  6.02752e-06|  0.02%|
    59|        20|   0.00019145|  9.57251e-06|  0.02%|
(call)|         6|  0.000239611|  3.99351e-05|  0.02%|# <frozen importlib._bootstrap_external>:58 <listcomp>
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|
    62|         2|  1.26362e-05|  6.31809e-06|  0.00%|
    63|         0|            0|            0|  0.00%|
    64|         2|  3.33786e-05|  1.66893e-05|  0.00%|
    65|         2|  1.69277e-05|  8.46386e-06|  0.00%|
    66|         2|   1.4782e-05|  7.39098e-06|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         3|  2.21729e-05|  7.39098e-06|  0.00%|
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         3|  9.98974e-05|  3.32991e-05|  0.01%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         1|  6.19888e-06|  6.19888e-06|  0.00%|
    85|         0|            0|            0|  0.00%|
    86|         1|  7.86781e-06|  7.86781e-06|  0.00%|
    87|         1|  3.05176e-05|  3.05176e-05|  0.00%|
(call)|         1|  3.71933e-05|  3.71933e-05|  0.00%|# <frozen importlib._bootstrap_external>:74 _path_stat
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|
    90|         1|  9.29832e-06|  9.29832e-06|  0.00%|
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|
    93|         1|  5.96046e-06|  5.96046e-06|  0.00%|
    94|         0|            0|            0|  0.00%|
    95|         1|  2.28882e-05|  2.28882e-05|  0.00%|
(call)|         1|  9.10759e-05|  9.10759e-05|  0.01%|# <frozen importlib._bootstrap_external>:84 _path_is_mode_type
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         2|  1.52588e-05|  7.62939e-06|  0.00%|
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|
   289|         2|  1.78814e-05|   8.9407e-06|  0.00%|
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|
   296|         2|  1.81198e-05|  9.05991e-06|  0.00%|
   297|         2|  4.41074e-05|  2.20537e-05|  0.00%|
(call)|         2|  7.77245e-05|  3.88622e-05|  0.01%|# <frozen importlib._bootstrap_external>:62 _path_split
   298|         2|  2.16961e-05|   1.0848e-05|  0.00%|
   299|         2|  1.71661e-05|  8.58307e-06|  0.00%|
   300|         2|  1.62125e-05|  8.10623e-06|  0.00%|
   301|         0|            0|            0|  0.00%|
   302|         2|  1.78814e-05|   8.9407e-06|  0.00%|
   303|         2|  2.19345e-05|  1.09673e-05|  0.00%|
   304|         2|  1.69277e-05|  8.46386e-06|  0.00%|
   305|         2|  1.54972e-05|   7.7486e-06|  0.00%|
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|
   308|         2|  1.57356e-05|  7.86781e-06|  0.00%|
   309|         2|  1.50204e-05|  7.51019e-06|  0.00%|
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|
   313|         2|  5.14984e-05|  2.57492e-05|  0.00%|
(call)|         2|   0.00014925|   7.4625e-05|  0.01%|# <frozen importlib._bootstrap_external>:56 _path_join
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|
   329|         0|            0|            0|  0.00%|
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|
   369|         1|  4.76837e-06|  4.76837e-06|  0.00%|
   370|         1|  9.29832e-06|  9.29832e-06|  0.00%|
   371|         1|  1.19209e-05|  1.19209e-05|  0.00%|
   372|         1|  2.47955e-05|  2.47955e-05|  0.00%|
(call)|         1|  0.000301123|  0.000301123|  0.03%|# <frozen importlib._bootstrap_external>:271 cache_from_source
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|         0|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|
   401|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   402|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   403|         0|            0|            0|  0.00%|
   404|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|
   407|         1|  2.28882e-05|  2.28882e-05|  0.00%|
(call)|         1|   1.3113e-05|   1.3113e-05|  0.00%|# <frozen importlib._bootstrap_external>:909 get_filename
   408|         0|            0|            0|  0.00%|
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|
   420|         0|            0|            0|  0.00%|
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|
   438|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|
   454|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   455|         1|  9.29832e-06|  9.29832e-06|  0.00%|
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|
   459|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|
   462|         0|            0|            0|  0.00%|
   463|         1|  2.43187e-05|  2.43187e-05|  0.00%|
(call)|         1|   1.4782e-05|   1.4782e-05|  0.00%|# <frozen importlib._bootstrap_external>:51 _r_long
   464|         0|            0|            0|  0.00%|
   465|         1|  9.77516e-06|  9.77516e-06|  0.00%|
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|
   471|         1|  1.50204e-05|  1.50204e-05|  0.00%|
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|
   490|         1|   2.3365e-05|   2.3365e-05|  0.00%|
(call)|         1|  1.26362e-05|  1.26362e-05|  0.00%|# <frozen importlib._bootstrap_external>:51 _r_long
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|
   493|         0|            0|            0|  0.00%|
   494|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   495|         1|   2.6226e-05|   2.6226e-05|  0.00%|
(call)|         1|  1.09673e-05|  1.09673e-05|  0.00%|# <frozen importlib._bootstrap_external>:51 _r_long
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|
   509|         0|            0|            0|  0.00%|
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|
   523|         1|  7.15256e-06|  7.15256e-06|  0.00%|
   524|         0|            0|            0|  0.00%|
   525|         1|   8.2016e-05|   8.2016e-05|  0.01%|
   526|         1|  1.19209e-05|  1.19209e-05|  0.00%|
   527|         1|  3.09944e-05|  3.09944e-05|  0.00%|
(call)|         1|  1.40667e-05|  1.40667e-05|  0.00%|# <frozen importlib._bootstrap>:222 _verbose_message
   528|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   529|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   530|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|
   533|         0|            0|            0|  0.00%|
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|
   540|         0|            0|            0|  0.00%|
   541|         0|            0|            0|  0.00%|
   542|         0|            0|            0|  0.00%|
   543|         0|            0|            0|  0.00%|
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|
   549|         0|            0|            0|  0.00%|
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|
   562|         0|            0|            0|  0.00%|
   563|         0|            0|            0|  0.00%|
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|
   568|         0|            0|            0|  0.00%|
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|
   571|         0|            0|            0|  0.00%|
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|
   574|         1|  1.69277e-05|  1.69277e-05|  0.00%|
   575|         0|            0|            0|  0.00%|
   576|         0|            0|            0|  0.00%|
   577|         0|            0|            0|  0.00%|
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|
   580|         0|            0|            0|  0.00%|
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|
   585|         0|            0|            0|  0.00%|
   586|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   587|         0|            0|            0|  0.00%|
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|
   590|         0|            0|            0|  0.00%|
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|
   606|         1|   2.6226e-05|   2.6226e-05|  0.00%|
(call)|         1|  7.58171e-05|  7.58171e-05|  0.01%|# <frozen importlib._bootstrap>:369 __init__
   607|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|
   610|         1|  1.28746e-05|  1.28746e-05|  0.00%|
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|
   620|         1|  9.77516e-06|  9.77516e-06|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|
   630|         0|            0|            0|  0.00%|
   631|         1|  9.29832e-06|  9.29832e-06|  0.00%|
   632|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|
   637|         1|  1.19209e-05|  1.19209e-05|  0.00%|
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|
   646|         0|            0|            0|  0.00%|
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|
   654|         0|            0|            0|  0.00%|
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|
   663|         0|            0|            0|  0.00%|
   664|         0|            0|            0|  0.00%|
   665|         0|            0|            0|  0.00%|
   666|         0|            0|            0|  0.00%|
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|
   671|         0|            0|            0|  0.00%|
   672|         0|            0|            0|  0.00%|
   673|         0|            0|            0|  0.00%|
   674|         0|            0|            0|  0.00%|
   675|         0|            0|            0|  0.00%|
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|
   682|         0|            0|            0|  0.00%|
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|
   719|         1|  5.96046e-06|  5.96046e-06|  0.00%|
   720|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   721|         0|            0|            0|  0.00%|
   722|         1|  1.09673e-05|  1.09673e-05|  0.00%|
   723|         0|            0|            0|  0.00%|
   724|         1|  3.19481e-05|  3.19481e-05|  0.00%|
(call)|         1|   0.00172901|   0.00172901|  0.16%|# <frozen importlib._bootstrap_external>:793 get_code
   725|         1|  1.40667e-05|  1.40667e-05|  0.00%|
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|
   728|         1|  2.31266e-05|  2.31266e-05|  0.00%|
(call)|         1|  0.000844002|  0.000844002|  0.08%|# <frozen importlib._bootstrap>:211 _call_with_frames_removed
   729|         0|            0|            0|  0.00%|
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|
   746|         0|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|
   753|         0|            0|            0|  0.00%|
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|
   760|         0|            0|            0|  0.00%|
   761|         0|            0|            0|  0.00%|
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|
   771|         0|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|
   775|         0|            0|            0|  0.00%|
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|
   790|         0|            0|            0|  0.00%|
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|
   793|         1|  1.21593e-05|  1.21593e-05|  0.00%|
   794|         0|            0|            0|  0.00%|
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|
   797|         0|            0|            0|  0.00%|
   798|         0|            0|            0|  0.00%|
   799|         0|            0|            0|  0.00%|
   800|         1|  2.59876e-05|  2.59876e-05|  0.00%|
(call)|         1|  5.88894e-05|  5.88894e-05|  0.01%|# <frozen importlib._bootstrap_external>:401 _check_name_wrapper
   801|         1|  1.09673e-05|  1.09673e-05|  0.00%|
   802|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   803|         1|  1.40667e-05|  1.40667e-05|  0.00%|
   804|         1|  1.07288e-05|  1.07288e-05|  0.00%|
   805|         1|   1.0252e-05|   1.0252e-05|  0.00%|
   806|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   807|         1|   2.5034e-05|   2.5034e-05|  0.00%|
(call)|         1|  0.000230789|  0.000230789|  0.02%|# <frozen importlib._bootstrap_external>:271 cache_from_source
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         1|  1.12057e-05|  1.12057e-05|  0.00%|
   812|         1|  2.67029e-05|  2.67029e-05|  0.00%|
(call)|         1|  8.70228e-05|  8.70228e-05|  0.01%|# <frozen importlib._bootstrap_external>:951 path_stats
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|
   816|         1|  1.12057e-05|  1.12057e-05|  0.00%|
   817|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   818|         1|    4.673e-05|    4.673e-05|  0.00%|
(call)|         1|  0.000449181|  0.000449181|  0.04%|# <frozen importlib._bootstrap_external>:914 get_data
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|
   823|         1|  1.50204e-05|  1.50204e-05|  0.00%|
   824|         1|  1.19209e-05|  1.19209e-05|  0.00%|
   825|         0|            0|            0|  0.00%|
   826|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   827|         1|  6.69956e-05|  6.69956e-05|  0.01%|
(call)|         1|  9.48906e-05|  9.48906e-05|  0.01%|# <frozen importlib._bootstrap_external>:438 _classify_pyc
   828|         1|  1.40667e-05|  1.40667e-05|  0.00%|
   829|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   830|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   831|         0|            0|            0|  0.00%|
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|
   843|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   844|         1|  9.77516e-06|  9.77516e-06|  0.00%|
   845|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   846|         1|  1.71661e-05|  1.71661e-05|  0.00%|
   847|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   848|         1|  2.47955e-05|  2.47955e-05|  0.00%|
(call)|         1|  9.60827e-05|  9.60827e-05|  0.01%|# <frozen importlib._bootstrap_external>:471 _validate_timestamp_pyc
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         1|  9.77516e-06|  9.77516e-06|  0.00%|
   854|         1|  2.31266e-05|  2.31266e-05|  0.00%|
(call)|         1|  1.40667e-05|  1.40667e-05|  0.00%|# <frozen importlib._bootstrap>:222 _verbose_message
   855|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   856|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   857|         1|  2.38419e-05|  2.38419e-05|  0.00%|
(call)|         1|  0.000172138|  0.000172138|  0.02%|# <frozen importlib._bootstrap_external>:523 _compile_bytecode
   858|         0|            0|            0|  0.00%|
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|
   863|         0|            0|            0|  0.00%|
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|
   869|         0|            0|            0|  0.00%|
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|
   874|         0|            0|            0|  0.00%|
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|
   878|         0|            0|            0|  0.00%|
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|
   881|         0|            0|            0|  0.00%|
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         1|  5.00679e-06|  5.00679e-06|  0.00%|
   885|         0|            0|            0|  0.00%|
   886|         0|            0|            0|  0.00%|
   887|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   888|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   889|         0|            0|            0|  0.00%|
   890|         0|            0|            0|  0.00%|
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|
   896|         0|            0|            0|  0.00%|
   897|         0|            0|            0|  0.00%|
   898|         0|            0|            0|  0.00%|
   899|         0|            0|            0|  0.00%|
   900|         0|            0|            0|  0.00%|
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|
   909|         1|  4.76837e-06|  4.76837e-06|  0.00%|
   910|         0|            0|            0|  0.00%|
   911|         0|            0|            0|  0.00%|
   912|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   913|         0|            0|            0|  0.00%|
   914|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   915|         0|            0|            0|  0.00%|
   916|         1|  6.03199e-05|  6.03199e-05|  0.01%|
   917|         1|  0.000381947|  0.000381947|  0.04%|
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|
   926|         0|            0|            0|  0.00%|
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|
   939|         0|            0|            0|  0.00%|
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|
   948|         0|            0|            0|  0.00%|
   949|         0|            0|            0|  0.00%|
   950|         0|            0|            0|  0.00%|
   951|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   952|         0|            0|            0|  0.00%|
   953|         1|  2.88486e-05|  2.88486e-05|  0.00%|
(call)|         1|  3.60012e-05|  3.60012e-05|  0.00%|# <frozen importlib._bootstrap_external>:74 _path_stat
   954|         1|  1.52588e-05|  1.52588e-05|  0.00%|
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|
   957|         0|            0|            0|  0.00%|
   958|         0|            0|            0|  0.00%|
   959|         0|            0|            0|  0.00%|
   960|         0|            0|            0|  0.00%|
   961|         0|            0|            0|  0.00%|
   962|         0|            0|            0|  0.00%|
   963|         0|            0|            0|  0.00%|
   964|         0|            0|            0|  0.00%|
   965|         0|            0|            0|  0.00%|
   966|         0|            0|            0|  0.00%|
   967|         0|            0|            0|  0.00%|
   968|         0|            0|            0|  0.00%|
   969|         0|            0|            0|  0.00%|
   970|         0|            0|            0|  0.00%|
   971|         0|            0|            0|  0.00%|
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|
   974|         0|            0|            0|  0.00%|
   975|         0|            0|            0|  0.00%|
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|
   978|         0|            0|            0|  0.00%|
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|
   981|         0|            0|            0|  0.00%|
   982|         0|            0|            0|  0.00%|
   983|         0|            0|            0|  0.00%|
   984|         0|            0|            0|  0.00%|
   985|         0|            0|            0|  0.00%|
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|
   988|         0|            0|            0|  0.00%|
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|
   991|         0|            0|            0|  0.00%|
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|
   994|         0|            0|            0|  0.00%|
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|
   997|         0|            0|            0|  0.00%|
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|
  1008|         0|            0|            0|  0.00%|
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|
  1013|         0|            0|            0|  0.00%|
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|
  1019|         0|            0|            0|  0.00%|
  1020|         0|            0|            0|  0.00%|
  1021|         0|            0|            0|  0.00%|
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|
  1035|         0|            0|            0|  0.00%|
  1036|         0|            0|            0|  0.00%|
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|
  1043|         0|            0|            0|  0.00%|
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|
  1046|         0|            0|            0|  0.00%|
  1047|         0|            0|            0|  0.00%|
  1048|         0|            0|            0|  0.00%|
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|
  1052|         0|            0|            0|  0.00%|
  1053|         0|            0|            0|  0.00%|
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|
  1056|         0|            0|            0|  0.00%|
  1057|         0|            0|            0|  0.00%|
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|
  1060|         0|            0|            0|  0.00%|
  1061|         0|            0|            0|  0.00%|
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|
  1064|         0|            0|            0|  0.00%|
  1065|         0|            0|            0|  0.00%|
  1066|         0|            0|            0|  0.00%|
  1067|         0|            0|            0|  0.00%|
  1068|         0|            0|            0|  0.00%|
  1069|         0|            0|            0|  0.00%|
  1070|         0|            0|            0|  0.00%|
  1071|         0|            0|            0|  0.00%|
  1072|         0|            0|            0|  0.00%|
  1073|         0|            0|            0|  0.00%|
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|
  1076|         0|            0|            0|  0.00%|
  1077|         0|            0|            0|  0.00%|
  1078|         0|            0|            0|  0.00%|
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|
  1081|         0|            0|            0|  0.00%|
  1082|         0|            0|            0|  0.00%|
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|
  1087|         0|            0|            0|  0.00%|
  1088|         0|            0|            0|  0.00%|
  1089|         0|            0|            0|  0.00%|
  1090|         0|            0|            0|  0.00%|
  1091|         0|            0|            0|  0.00%|
  1092|         0|            0|            0|  0.00%|
  1093|         0|            0|            0|  0.00%|
  1094|         0|            0|            0|  0.00%|
  1095|         0|            0|            0|  0.00%|
  1096|         0|            0|            0|  0.00%|
  1097|         0|            0|            0|  0.00%|
  1098|         0|            0|            0|  0.00%|
  1099|         0|            0|            0|  0.00%|
  1100|         0|            0|            0|  0.00%|
  1101|         0|            0|            0|  0.00%|
  1102|         0|            0|            0|  0.00%|
  1103|         0|            0|            0|  0.00%|
  1104|         0|            0|            0|  0.00%|
  1105|         0|            0|            0|  0.00%|
  1106|         0|            0|            0|  0.00%|
  1107|         0|            0|            0|  0.00%|
  1108|         0|            0|            0|  0.00%|
  1109|         0|            0|            0|  0.00%|
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|
  1112|         0|            0|            0|  0.00%|
  1113|         0|            0|            0|  0.00%|
  1114|         0|            0|            0|  0.00%|
  1115|         0|            0|            0|  0.00%|
  1116|         0|            0|            0|  0.00%|
  1117|         0|            0|            0|  0.00%|
  1118|         0|            0|            0|  0.00%|
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|
  1121|         0|            0|            0|  0.00%|
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|
  1124|         0|            0|            0|  0.00%|
  1125|         0|            0|            0|  0.00%|
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|
  1128|         0|            0|            0|  0.00%|
  1129|         0|            0|            0|  0.00%|
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|
  1132|         0|            0|            0|  0.00%|
  1133|         0|            0|            0|  0.00%|
  1134|         0|            0|            0|  0.00%|
  1135|         0|            0|            0|  0.00%|
  1136|         0|            0|            0|  0.00%|
  1137|         0|            0|            0|  0.00%|
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|
  1140|         0|            0|            0|  0.00%|
  1141|         0|            0|            0|  0.00%|
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|
  1144|         0|            0|            0|  0.00%|
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|
  1147|         0|            0|            0|  0.00%|
  1148|         0|            0|            0|  0.00%|
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|
  1151|         0|            0|            0|  0.00%|
  1152|         0|            0|            0|  0.00%|
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|
  1155|         0|            0|            0|  0.00%|
  1156|         0|            0|            0|  0.00%|
  1157|         0|            0|            0|  0.00%|
  1158|         0|            0|            0|  0.00%|
  1159|         0|            0|            0|  0.00%|
  1160|         0|            0|            0|  0.00%|
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|
  1163|         0|            0|            0|  0.00%|
  1164|         0|            0|            0|  0.00%|
  1165|         0|            0|            0|  0.00%|
  1166|         0|            0|            0|  0.00%|
  1167|         0|            0|            0|  0.00%|
  1168|         0|            0|            0|  0.00%|
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|
  1171|         0|            0|            0|  0.00%|
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|
  1174|         0|            0|            0|  0.00%|
  1175|         0|            0|            0|  0.00%|
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|
  1178|         0|            0|            0|  0.00%|
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|
  1181|         0|            0|            0|  0.00%|
  1182|         0|            0|            0|  0.00%|
  1183|         0|            0|            0|  0.00%|
  1184|         0|            0|            0|  0.00%|
  1185|         0|            0|            0|  0.00%|
  1186|         0|            0|            0|  0.00%|
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|
  1189|         0|            0|            0|  0.00%|
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|
  1192|         0|            0|            0|  0.00%|
  1193|         0|            0|            0|  0.00%|
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|
  1197|         0|            0|            0|  0.00%|
  1198|         0|            0|            0|  0.00%|
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|
  1201|         0|            0|            0|  0.00%|
  1202|         0|            0|            0|  0.00%|
  1203|         1|  6.91414e-06|  6.91414e-06|  0.00%|
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|
  1206|         0|            0|            0|  0.00%|
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|
  1209|         0|            0|            0|  0.00%|
  1210|         0|            0|            0|  0.00%|
  1211|         1|  7.86781e-06|  7.86781e-06|  0.00%|
  1212|         0|            0|            0|  0.00%|
  1213|         0|            0|            0|  0.00%|
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|
  1216|         0|            0|            0|  0.00%|
  1217|         0|            0|            0|  0.00%|
  1218|         1|  8.10623e-06|  8.10623e-06|  0.00%|
  1219|         1|  9.05991e-06|  9.05991e-06|  0.00%|
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|
  1222|         0|            0|            0|  0.00%|
  1223|         1|  8.10623e-06|  8.10623e-06|  0.00%|
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|
  1226|         0|            0|            0|  0.00%|
  1227|         0|            0|            0|  0.00%|
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|
  1230|         0|            0|            0|  0.00%|
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|
  1233|         0|            0|            0|  0.00%|
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|
  1236|         0|            0|            0|  0.00%|
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|
  1239|         0|            0|            0|  0.00%|
  1240|         1|  1.09673e-05|  1.09673e-05|  0.00%|
  1241|         0|            0|            0|  0.00%|
  1242|         0|            0|            0|  0.00%|
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|
  1245|         1|  8.79765e-05|  8.79765e-05|  0.01%|
  1246|         1|  1.21593e-05|  1.21593e-05|  0.00%|
  1247|         1|  1.00136e-05|  1.00136e-05|  0.00%|
  1248|         0|            0|            0|  0.00%|
  1249|         1|  2.98023e-05|  2.98023e-05|  0.00%|
(call)|         1|  4.00543e-05|  4.00543e-05|  0.00%|# <frozen importlib._bootstrap_external>:1203 _path_importer_cache
  1250|         1|  9.29832e-06|  9.29832e-06|  0.00%|
  1251|         1|  1.38283e-05|  1.38283e-05|  0.00%|
  1252|         1|  2.59876e-05|  2.59876e-05|  0.00%|
(call)|         1|   0.00127006|   0.00127006|  0.12%|# <frozen importlib._bootstrap_external>:1356 find_spec
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|
  1255|         1|  8.82149e-06|  8.82149e-06|  0.00%|
  1256|         0|            0|            0|  0.00%|
  1257|         1|  9.05991e-06|  9.05991e-06|  0.00%|
  1258|         1|  7.86781e-06|  7.86781e-06|  0.00%|
  1259|         0|            0|            0|  0.00%|
  1260|         0|            0|            0|  0.00%|
  1261|         0|            0|            0|  0.00%|
  1262|         0|            0|            0|  0.00%|
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|
  1265|         0|            0|            0|  0.00%|
  1266|         0|            0|            0|  0.00%|
  1267|         0|            0|            0|  0.00%|
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|
  1272|         1|  6.19888e-06|  6.19888e-06|  0.00%|
  1273|         0|            0|            0|  0.00%|
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|
  1276|         0|            0|            0|  0.00%|
  1277|         0|            0|            0|  0.00%|
  1278|         1|   1.4782e-05|   1.4782e-05|  0.00%|
  1279|         0|            0|            0|  0.00%|
  1280|         1|  2.43187e-05|  2.43187e-05|  0.00%|
(call)|         1|   0.00153589|   0.00153589|  0.14%|# <frozen importlib._bootstrap_external>:1240 _get_spec
  1281|         1|  7.86781e-06|  7.86781e-06|  0.00%|
  1282|         0|            0|            0|  0.00%|
  1283|         1|  7.86781e-06|  7.86781e-06|  0.00%|
  1284|         0|            0|            0|  0.00%|
  1285|         0|            0|            0|  0.00%|
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|
  1288|         0|            0|            0|  0.00%|
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|
  1291|         0|            0|            0|  0.00%|
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         1|  9.29832e-06|  9.29832e-06|  0.00%|
  1295|         0|            0|            0|  0.00%|
  1296|         0|            0|            0|  0.00%|
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|
  1303|         0|            0|            0|  0.00%|
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|
  1306|         0|            0|            0|  0.00%|
  1307|         0|            0|            0|  0.00%|
  1308|         0|            0|            0|  0.00%|
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|
  1311|         0|            0|            0|  0.00%|
  1312|         0|            0|            0|  0.00%|
  1313|         0|            0|            0|  0.00%|
  1314|         0|            0|            0|  0.00%|
  1315|         0|            0|            0|  0.00%|
  1316|         0|            0|            0|  0.00%|
  1317|         0|            0|            0|  0.00%|
  1318|         0|            0|            0|  0.00%|
  1319|         0|            0|            0|  0.00%|
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|
  1322|         0|            0|            0|  0.00%|
  1323|         0|            0|            0|  0.00%|
  1324|         0|            0|            0|  0.00%|
  1325|         0|            0|            0|  0.00%|
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|
  1328|         0|            0|            0|  0.00%|
  1329|         0|            0|            0|  0.00%|
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|
  1332|         0|            0|            0|  0.00%|
  1333|         0|            0|            0|  0.00%|
  1334|         0|            0|            0|  0.00%|
  1335|         0|            0|            0|  0.00%|
  1336|         0|            0|            0|  0.00%|
  1337|         0|            0|            0|  0.00%|
  1338|         0|            0|            0|  0.00%|
  1339|         0|            0|            0|  0.00%|
  1340|         0|            0|            0|  0.00%|
  1341|         0|            0|            0|  0.00%|
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|
  1344|         0|            0|            0|  0.00%|
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|
  1347|         0|            0|            0|  0.00%|
  1348|         0|            0|            0|  0.00%|
  1349|         0|            0|            0|  0.00%|
  1350|         0|            0|            0|  0.00%|
  1351|         1|  6.91414e-06|  6.91414e-06|  0.00%|
  1352|         1|  2.31266e-05|  2.31266e-05|  0.00%|
(call)|         1|  2.09808e-05|  2.09808e-05|  0.00%|# <frozen importlib._bootstrap_external>:884 __init__
  1353|         1|  7.86781e-06|  7.86781e-06|  0.00%|
  1354|         1|  2.83718e-05|  2.83718e-05|  0.00%|
(call)|         1|  0.000201941|  0.000201941|  0.02%|# <frozen importlib._bootstrap_external>:574 spec_from_file_location
  1355|         0|            0|            0|  0.00%|
  1356|         1|   1.3113e-05|   1.3113e-05|  0.00%|
  1357|         0|            0|            0|  0.00%|
  1358|         0|            0|            0|  0.00%|
  1359|         0|            0|            0|  0.00%|
  1360|         0|            0|            0|  0.00%|
  1361|         1|  1.00136e-05|  1.00136e-05|  0.00%|
  1362|         1|  1.09673e-05|  1.09673e-05|  0.00%|
  1363|         1|  1.40667e-05|  1.40667e-05|  0.00%|
  1364|         1|  3.40939e-05|  3.40939e-05|  0.00%|
(call)|         1|  4.88758e-05|  4.88758e-05|  0.00%|# <frozen importlib._bootstrap_external>:74 _path_stat
  1365|         0|            0|            0|  0.00%|
  1366|         0|            0|            0|  0.00%|
  1367|         1|  3.50475e-05|  3.50475e-05|  0.00%|
  1368|         0|            0|            0|  0.00%|
  1369|         0|            0|            0|  0.00%|
  1370|         0|            0|            0|  0.00%|
  1371|         1|  3.09944e-05|  3.09944e-05|  0.00%|
(call)|         1|   1.5974e-05|   1.5974e-05|  0.00%|# <frozen importlib._bootstrap_external>:36 _relax_case
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|
  1374|         0|            0|            0|  0.00%|
  1375|         1|   1.3113e-05|   1.3113e-05|  0.00%|
  1376|         1|  1.09673e-05|  1.09673e-05|  0.00%|
  1377|         0|            0|            0|  0.00%|
  1378|         1|  1.00136e-05|  1.00136e-05|  0.00%|
  1379|         0|            0|            0|  0.00%|
  1380|         0|            0|            0|  0.00%|
  1381|         0|            0|            0|  0.00%|
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|
  1384|         0|            0|            0|  0.00%|
  1385|         0|            0|            0|  0.00%|
  1386|         0|            0|            0|  0.00%|
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|
  1389|         0|            0|            0|  0.00%|
  1390|         4|   3.8147e-05|  9.53674e-06|  0.00%|
  1391|         4|  8.22544e-05|  2.05636e-05|  0.01%|
(call)|         4|  0.000267029|  6.67572e-05|  0.02%|# <frozen importlib._bootstrap_external>:56 _path_join
  1392|         4|  8.53539e-05|  2.13385e-05|  0.01%|
(call)|         4|  5.10216e-05|  1.27554e-05|  0.00%|# <frozen importlib._bootstrap>:222 _verbose_message
  1393|         4|  3.21865e-05|  8.04663e-06|  0.00%|
  1394|         1|  2.09808e-05|  2.09808e-05|  0.00%|
(call)|         1|  0.000119925|  0.000119925|  0.01%|# <frozen importlib._bootstrap_external>:93 _path_isfile
  1395|         1|  1.00136e-05|  1.00136e-05|  0.00%|
  1396|         1|  2.67029e-05|  2.67029e-05|  0.00%|
(call)|         1|  0.000289202|  0.000289202|  0.03%|# <frozen importlib._bootstrap_external>:1351 _get_spec
File: /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/weakref.py
File duration: 0.00360727s (0.33%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""Weak reference support for Python.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|This module is an implementation of PEP 205:
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|http://www.python.org/dev/peps/pep-0205/
     6|         0|            0|            0|  0.00%|"""
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|# Naming convention: Variables named "wr" are weak reference objects;
     9|         0|            0|            0|  0.00%|# they are called this instead of "ref" to avoid name collisions with
    10|         0|            0|            0|  0.00%|# the module-global ref() function imported from _weakref.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|from _weakref import (
    13|         0|            0|            0|  0.00%|     getweakrefcount,
    14|         0|            0|            0|  0.00%|     getweakrefs,
    15|         0|            0|            0|  0.00%|     ref,
    16|         0|            0|            0|  0.00%|     proxy,
    17|         0|            0|            0|  0.00%|     CallableProxyType,
    18|         0|            0|            0|  0.00%|     ProxyType,
    19|         0|            0|            0|  0.00%|     ReferenceType,
    20|         0|            0|            0|  0.00%|     _remove_dead_weakref)
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|from _weakrefset import WeakSet, _IterationGuard
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|import _collections_abc  # Import after _weakref to avoid circular import.
    25|         0|            0|            0|  0.00%|import sys
    26|         0|            0|            0|  0.00%|import itertools
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|ProxyTypes = (ProxyType, CallableProxyType)
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|__all__ = ["ref", "proxy", "getweakrefcount", "getweakrefs",
    31|         0|            0|            0|  0.00%|           "WeakKeyDictionary", "ReferenceType", "ProxyType",
    32|         0|            0|            0|  0.00%|           "CallableProxyType", "ProxyTypes", "WeakValueDictionary",
    33|         0|            0|            0|  0.00%|           "WeakSet", "WeakMethod", "finalize"]
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|class WeakMethod(ref):
    37|         0|            0|            0|  0.00%|    """
    38|         0|            0|            0|  0.00%|    A custom `weakref.ref` subclass which simulates a weak reference to
    39|         0|            0|            0|  0.00%|    a bound method, working around the lifetime problem of bound methods.
    40|         0|            0|            0|  0.00%|    """
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    __slots__ = "_func_ref", "_meth_type", "_alive", "__weakref__"
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|    def __new__(cls, meth, callback=None):
    45|         0|            0|            0|  0.00%|        try:
    46|         0|            0|            0|  0.00%|            obj = meth.__self__
    47|         0|            0|            0|  0.00%|            func = meth.__func__
    48|         0|            0|            0|  0.00%|        except AttributeError:
    49|         0|            0|            0|  0.00%|            raise TypeError("argument should be a bound method, not {}"
    50|         0|            0|            0|  0.00%|                            .format(type(meth))) from None
    51|         0|            0|            0|  0.00%|        def _cb(arg):
    52|         0|            0|            0|  0.00%|            # The self-weakref trick is needed to avoid creating a reference
    53|         0|            0|            0|  0.00%|            # cycle.
    54|         0|            0|            0|  0.00%|            self = self_wr()
    55|         0|            0|            0|  0.00%|            if self._alive:
    56|         0|            0|            0|  0.00%|                self._alive = False
    57|         0|            0|            0|  0.00%|                if callback is not None:
    58|         0|            0|            0|  0.00%|                    callback(self)
    59|         0|            0|            0|  0.00%|        self = ref.__new__(cls, obj, _cb)
    60|         0|            0|            0|  0.00%|        self._func_ref = ref(func, _cb)
    61|         0|            0|            0|  0.00%|        self._meth_type = type(meth)
    62|         0|            0|            0|  0.00%|        self._alive = True
    63|         0|            0|            0|  0.00%|        self_wr = ref(self)
    64|         0|            0|            0|  0.00%|        return self
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|    def __call__(self):
    67|         0|            0|            0|  0.00%|        obj = super().__call__()
    68|         0|            0|            0|  0.00%|        func = self._func_ref()
    69|         0|            0|            0|  0.00%|        if obj is None or func is None:
    70|         0|            0|            0|  0.00%|            return None
    71|         0|            0|            0|  0.00%|        return self._meth_type(func, obj)
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|    def __eq__(self, other):
    74|         0|            0|            0|  0.00%|        if isinstance(other, WeakMethod):
    75|         0|            0|            0|  0.00%|            if not self._alive or not other._alive:
    76|         0|            0|            0|  0.00%|                return self is other
    77|         0|            0|            0|  0.00%|            return ref.__eq__(self, other) and self._func_ref == other._func_ref
    78|         0|            0|            0|  0.00%|        return False
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|    def __ne__(self, other):
    81|         0|            0|            0|  0.00%|        if isinstance(other, WeakMethod):
    82|         0|            0|            0|  0.00%|            if not self._alive or not other._alive:
    83|         0|            0|            0|  0.00%|                return self is not other
    84|         0|            0|            0|  0.00%|            return ref.__ne__(self, other) or self._func_ref != other._func_ref
    85|         0|            0|            0|  0.00%|        return True
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    __hash__ = ref.__hash__
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|
    90|         0|            0|            0|  0.00%|class WeakValueDictionary(_collections_abc.MutableMapping):
    91|         0|            0|            0|  0.00%|    """Mapping class that references values weakly.
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|    Entries in the dictionary will be discarded when no strong
    94|         0|            0|            0|  0.00%|    reference to the value exists anymore
    95|         0|            0|            0|  0.00%|    """
    96|         0|            0|            0|  0.00%|    # We inherit the constructor without worrying about the input
    97|         0|            0|            0|  0.00%|    # dictionary; since it uses our .update() method, we get the right
    98|         0|            0|            0|  0.00%|    # checks (if the other dictionary is a WeakValueDictionary,
    99|         0|            0|            0|  0.00%|    # objects are unwrapped on the way out, and we always wrap on the
   100|         0|            0|            0|  0.00%|    # way in).
   101|         0|            0|            0|  0.00%|
   102|         0|            0|            0|  0.00%|    def __init__(*args, **kw):
   103|         0|            0|            0|  0.00%|        if not args:
   104|         0|            0|            0|  0.00%|            raise TypeError("descriptor '__init__' of 'WeakValueDictionary' "
   105|         0|            0|            0|  0.00%|                            "object needs an argument")
   106|         0|            0|            0|  0.00%|        self, *args = args
   107|         0|            0|            0|  0.00%|        if len(args) > 1:
   108|         0|            0|            0|  0.00%|            raise TypeError('expected at most 1 arguments, got %d' % len(args))
   109|         0|            0|            0|  0.00%|        def remove(wr, selfref=ref(self), _atomic_removal=_remove_dead_weakref):
   110|         0|            0|            0|  0.00%|            self = selfref()
   111|         0|            0|            0|  0.00%|            if self is not None:
   112|         0|            0|            0|  0.00%|                if self._iterating:
   113|         0|            0|            0|  0.00%|                    self._pending_removals.append(wr.key)
   114|         0|            0|            0|  0.00%|                else:
   115|         0|            0|            0|  0.00%|                    # Atomic removal is necessary since this function
   116|         0|            0|            0|  0.00%|                    # can be called asynchronously by the GC
   117|         0|            0|            0|  0.00%|                    _atomic_removal(self.data, wr.key)
   118|         0|            0|            0|  0.00%|        self._remove = remove
   119|         0|            0|            0|  0.00%|        # A list of keys to be removed
   120|         0|            0|            0|  0.00%|        self._pending_removals = []
   121|         0|            0|            0|  0.00%|        self._iterating = set()
   122|         0|            0|            0|  0.00%|        self.data = {}
   123|         0|            0|            0|  0.00%|        self.update(*args, **kw)
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|    def _commit_removals(self):
   126|         0|            0|            0|  0.00%|        l = self._pending_removals
   127|         0|            0|            0|  0.00%|        d = self.data
   128|         0|            0|            0|  0.00%|        # We shouldn't encounter any KeyError, because this method should
   129|         0|            0|            0|  0.00%|        # always be called *before* mutating the dict.
   130|         0|            0|            0|  0.00%|        while l:
   131|         0|            0|            0|  0.00%|            key = l.pop()
   132|         0|            0|            0|  0.00%|            _remove_dead_weakref(d, key)
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|    def __getitem__(self, key):
   135|         0|            0|            0|  0.00%|        if self._pending_removals:
   136|         0|            0|            0|  0.00%|            self._commit_removals()
   137|         0|            0|            0|  0.00%|        o = self.data[key]()
   138|         0|            0|            0|  0.00%|        if o is None:
   139|         0|            0|            0|  0.00%|            raise KeyError(key)
   140|         0|            0|            0|  0.00%|        else:
   141|         0|            0|            0|  0.00%|            return o
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|    def __delitem__(self, key):
   144|         0|            0|            0|  0.00%|        if self._pending_removals:
   145|         0|            0|            0|  0.00%|            self._commit_removals()
   146|         0|            0|            0|  0.00%|        del self.data[key]
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|    def __len__(self):
   149|         0|            0|            0|  0.00%|        if self._pending_removals:
   150|         0|            0|            0|  0.00%|            self._commit_removals()
   151|         0|            0|            0|  0.00%|        return len(self.data)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|    def __contains__(self, key):
   154|         0|            0|            0|  0.00%|        if self._pending_removals:
   155|         0|            0|            0|  0.00%|            self._commit_removals()
   156|         0|            0|            0|  0.00%|        try:
   157|         0|            0|            0|  0.00%|            o = self.data[key]()
   158|         0|            0|            0|  0.00%|        except KeyError:
   159|         0|            0|            0|  0.00%|            return False
   160|         0|            0|            0|  0.00%|        return o is not None
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|    def __repr__(self):
   163|         0|            0|            0|  0.00%|        return "<%s at %#x>" % (self.__class__.__name__, id(self))
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|    def __setitem__(self, key, value):
   166|         0|            0|            0|  0.00%|        if self._pending_removals:
   167|         0|            0|            0|  0.00%|            self._commit_removals()
   168|         0|            0|            0|  0.00%|        self.data[key] = KeyedRef(value, self._remove, key)
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|    def copy(self):
   171|         0|            0|            0|  0.00%|        if self._pending_removals:
   172|         0|            0|            0|  0.00%|            self._commit_removals()
   173|         0|            0|            0|  0.00%|        new = WeakValueDictionary()
   174|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   175|         0|            0|            0|  0.00%|            for key, wr in self.data.items():
   176|         0|            0|            0|  0.00%|                o = wr()
   177|         0|            0|            0|  0.00%|                if o is not None:
   178|         0|            0|            0|  0.00%|                    new[key] = o
   179|         0|            0|            0|  0.00%|        return new
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|    __copy__ = copy
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|    def __deepcopy__(self, memo):
   184|         0|            0|            0|  0.00%|        from copy import deepcopy
   185|         0|            0|            0|  0.00%|        if self._pending_removals:
   186|         0|            0|            0|  0.00%|            self._commit_removals()
   187|         0|            0|            0|  0.00%|        new = self.__class__()
   188|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   189|         0|            0|            0|  0.00%|            for key, wr in self.data.items():
   190|         0|            0|            0|  0.00%|                o = wr()
   191|         0|            0|            0|  0.00%|                if o is not None:
   192|         0|            0|            0|  0.00%|                    new[deepcopy(key, memo)] = o
   193|         0|            0|            0|  0.00%|        return new
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|    def get(self, key, default=None):
   196|         0|            0|            0|  0.00%|        if self._pending_removals:
   197|         0|            0|            0|  0.00%|            self._commit_removals()
   198|         0|            0|            0|  0.00%|        try:
   199|         0|            0|            0|  0.00%|            wr = self.data[key]
   200|         0|            0|            0|  0.00%|        except KeyError:
   201|         0|            0|            0|  0.00%|            return default
   202|         0|            0|            0|  0.00%|        else:
   203|         0|            0|            0|  0.00%|            o = wr()
   204|         0|            0|            0|  0.00%|            if o is None:
   205|         0|            0|            0|  0.00%|                # This should only happen
   206|         0|            0|            0|  0.00%|                return default
   207|         0|            0|            0|  0.00%|            else:
   208|         0|            0|            0|  0.00%|                return o
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|    def items(self):
   211|         0|            0|            0|  0.00%|        if self._pending_removals:
   212|         0|            0|            0|  0.00%|            self._commit_removals()
   213|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   214|         0|            0|            0|  0.00%|            for k, wr in self.data.items():
   215|         0|            0|            0|  0.00%|                v = wr()
   216|         0|            0|            0|  0.00%|                if v is not None:
   217|         0|            0|            0|  0.00%|                    yield k, v
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|    def keys(self):
   220|         0|            0|            0|  0.00%|        if self._pending_removals:
   221|         0|            0|            0|  0.00%|            self._commit_removals()
   222|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   223|         0|            0|            0|  0.00%|            for k, wr in self.data.items():
   224|         0|            0|            0|  0.00%|                if wr() is not None:
   225|         0|            0|            0|  0.00%|                    yield k
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|    __iter__ = keys
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|    def itervaluerefs(self):
   230|         0|            0|            0|  0.00%|        """Return an iterator that yields the weak references to the values.
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|        The references are not guaranteed to be 'live' at the time
   233|         0|            0|            0|  0.00%|        they are used, so the result of calling the references needs
   234|         0|            0|            0|  0.00%|        to be checked before being used.  This can be used to avoid
   235|         0|            0|            0|  0.00%|        creating references that will cause the garbage collector to
   236|         0|            0|            0|  0.00%|        keep the values around longer than needed.
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|        """
   239|         0|            0|            0|  0.00%|        if self._pending_removals:
   240|         0|            0|            0|  0.00%|            self._commit_removals()
   241|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   242|         0|            0|            0|  0.00%|            yield from self.data.values()
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|    def values(self):
   245|         0|            0|            0|  0.00%|        if self._pending_removals:
   246|         0|            0|            0|  0.00%|            self._commit_removals()
   247|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   248|         0|            0|            0|  0.00%|            for wr in self.data.values():
   249|         0|            0|            0|  0.00%|                obj = wr()
   250|         0|            0|            0|  0.00%|                if obj is not None:
   251|         0|            0|            0|  0.00%|                    yield obj
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|    def popitem(self):
   254|         0|            0|            0|  0.00%|        if self._pending_removals:
   255|         0|            0|            0|  0.00%|            self._commit_removals()
   256|         0|            0|            0|  0.00%|        while True:
   257|         0|            0|            0|  0.00%|            key, wr = self.data.popitem()
   258|         0|            0|            0|  0.00%|            o = wr()
   259|         0|            0|            0|  0.00%|            if o is not None:
   260|         0|            0|            0|  0.00%|                return key, o
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|    def pop(self, key, *args):
   263|         0|            0|            0|  0.00%|        if self._pending_removals:
   264|         0|            0|            0|  0.00%|            self._commit_removals()
   265|         0|            0|            0|  0.00%|        try:
   266|         0|            0|            0|  0.00%|            o = self.data.pop(key)()
   267|         0|            0|            0|  0.00%|        except KeyError:
   268|         0|            0|            0|  0.00%|            o = None
   269|         0|            0|            0|  0.00%|        if o is None:
   270|         0|            0|            0|  0.00%|            if args:
   271|         0|            0|            0|  0.00%|                return args[0]
   272|         0|            0|            0|  0.00%|            else:
   273|         0|            0|            0|  0.00%|                raise KeyError(key)
   274|         0|            0|            0|  0.00%|        else:
   275|         0|            0|            0|  0.00%|            return o
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|    def setdefault(self, key, default=None):
   278|         0|            0|            0|  0.00%|        try:
   279|         0|            0|            0|  0.00%|            o = self.data[key]()
   280|         0|            0|            0|  0.00%|        except KeyError:
   281|         0|            0|            0|  0.00%|            o = None
   282|         0|            0|            0|  0.00%|        if o is None:
   283|         0|            0|            0|  0.00%|            if self._pending_removals:
   284|         0|            0|            0|  0.00%|                self._commit_removals()
   285|         0|            0|            0|  0.00%|            self.data[key] = KeyedRef(default, self._remove, key)
   286|         0|            0|            0|  0.00%|            return default
   287|         0|            0|            0|  0.00%|        else:
   288|         0|            0|            0|  0.00%|            return o
   289|         0|            0|            0|  0.00%|
   290|         0|            0|            0|  0.00%|    def update(*args, **kwargs):
   291|         0|            0|            0|  0.00%|        if not args:
   292|         0|            0|            0|  0.00%|            raise TypeError("descriptor 'update' of 'WeakValueDictionary' "
   293|         0|            0|            0|  0.00%|                            "object needs an argument")
   294|         0|            0|            0|  0.00%|        self, *args = args
   295|         0|            0|            0|  0.00%|        if len(args) > 1:
   296|         0|            0|            0|  0.00%|            raise TypeError('expected at most 1 arguments, got %d' % len(args))
   297|         0|            0|            0|  0.00%|        dict = args[0] if args else None
   298|         0|            0|            0|  0.00%|        if self._pending_removals:
   299|         0|            0|            0|  0.00%|            self._commit_removals()
   300|         0|            0|            0|  0.00%|        d = self.data
   301|         0|            0|            0|  0.00%|        if dict is not None:
   302|         0|            0|            0|  0.00%|            if not hasattr(dict, "items"):
   303|         0|            0|            0|  0.00%|                dict = type({})(dict)
   304|         0|            0|            0|  0.00%|            for key, o in dict.items():
   305|         0|            0|            0|  0.00%|                d[key] = KeyedRef(o, self._remove, key)
   306|         0|            0|            0|  0.00%|        if len(kwargs):
   307|         0|            0|            0|  0.00%|            self.update(kwargs)
   308|         0|            0|            0|  0.00%|
   309|         0|            0|            0|  0.00%|    def valuerefs(self):
   310|         0|            0|            0|  0.00%|        """Return a list of weak references to the values.
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|        The references are not guaranteed to be 'live' at the time
   313|         0|            0|            0|  0.00%|        they are used, so the result of calling the references needs
   314|         0|            0|            0|  0.00%|        to be checked before being used.  This can be used to avoid
   315|         0|            0|            0|  0.00%|        creating references that will cause the garbage collector to
   316|         0|            0|            0|  0.00%|        keep the values around longer than needed.
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|        """
   319|         0|            0|            0|  0.00%|        if self._pending_removals:
   320|         0|            0|            0|  0.00%|            self._commit_removals()
   321|         0|            0|            0|  0.00%|        return list(self.data.values())
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|class KeyedRef(ref):
   325|         0|            0|            0|  0.00%|    """Specialized reference that includes a key corresponding to the value.
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|    This is used in the WeakValueDictionary to avoid having to create
   328|         0|            0|            0|  0.00%|    a function object for each key stored in the mapping.  A shared
   329|         0|            0|            0|  0.00%|    callback object can use the 'key' attribute of a KeyedRef instead
   330|         0|            0|            0|  0.00%|    of getting a reference to the key from an enclosing scope.
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|    """
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|    __slots__ = "key",
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|    def __new__(type, ob, callback, key):
   337|         0|            0|            0|  0.00%|        self = ref.__new__(type, ob, callback)
   338|         0|            0|            0|  0.00%|        self.key = key
   339|         0|            0|            0|  0.00%|        return self
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|    def __init__(self, ob, callback, key):
   342|         0|            0|            0|  0.00%|        super().__init__(ob, callback)
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|class WeakKeyDictionary(_collections_abc.MutableMapping):
   346|         0|            0|            0|  0.00%|    """ Mapping class that references keys weakly.
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|    Entries in the dictionary will be discarded when there is no
   349|         0|            0|            0|  0.00%|    longer a strong reference to the key. This can be used to
   350|         0|            0|            0|  0.00%|    associate additional data with an object owned by other parts of
   351|         0|            0|            0|  0.00%|    an application without adding attributes to those objects. This
   352|         0|            0|            0|  0.00%|    can be especially useful with objects that override attribute
   353|         0|            0|            0|  0.00%|    accesses.
   354|         0|            0|            0|  0.00%|    """
   355|         0|            0|            0|  0.00%|
   356|         1|  1.78814e-05|  1.78814e-05|  0.00%|    def __init__(self, dict=None):
   357|         1|  2.21729e-05|  2.21729e-05|  0.00%|        self.data = {}
   358|        81|   0.00045228|   5.5837e-06|  0.04%|        def remove(k, selfref=ref(self)):
   359|        80|  0.000495434|  6.19292e-06|  0.05%|            self = selfref()
   360|        80|  0.000477314|  5.96642e-06|  0.04%|            if self is not None:
   361|        80|  0.000512123|  6.40154e-06|  0.05%|                if self._iterating:
   362|         0|            0|            0|  0.00%|                    self._pending_removals.append(k)
   363|         0|            0|            0|  0.00%|                else:
   364|        80|  0.000512123|  6.40154e-06|  0.05%|                    del self.data[k]
   365|         1|  1.28746e-05|  1.28746e-05|  0.00%|        self._remove = remove
   366|         0|            0|            0|  0.00%|        # A list of dead weakrefs (keys to be removed)
   367|         1|  9.05991e-06|  9.05991e-06|  0.00%|        self._pending_removals = []
   368|         1|  8.82149e-06|  8.82149e-06|  0.00%|        self._iterating = set()
   369|         1|  8.10623e-06|  8.10623e-06|  0.00%|        self._dirty_len = False
   370|         1|  8.10623e-06|  8.10623e-06|  0.00%|        if dict is not None:
   371|         0|            0|            0|  0.00%|            self.update(dict)
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|    def _commit_removals(self):
   374|         0|            0|            0|  0.00%|        # NOTE: We don't need to call this method before mutating the dict,
   375|         0|            0|            0|  0.00%|        # because a dead weakref never compares equal to a live weakref,
   376|         0|            0|            0|  0.00%|        # even if they happened to refer to equal objects.
   377|         0|            0|            0|  0.00%|        # However, it means keys may already have been removed.
   378|         0|            0|            0|  0.00%|        l = self._pending_removals
   379|         0|            0|            0|  0.00%|        d = self.data
   380|         0|            0|            0|  0.00%|        while l:
   381|         0|            0|            0|  0.00%|            try:
   382|         0|            0|            0|  0.00%|                del d[l.pop()]
   383|         0|            0|            0|  0.00%|            except KeyError:
   384|         0|            0|            0|  0.00%|                pass
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|    def _scrub_removals(self):
   387|         0|            0|            0|  0.00%|        d = self.data
   388|         0|            0|            0|  0.00%|        self._pending_removals = [k for k in self._pending_removals if k in d]
   389|         0|            0|            0|  0.00%|        self._dirty_len = False
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|    def __delitem__(self, key):
   392|         0|            0|            0|  0.00%|        self._dirty_len = True
   393|         0|            0|            0|  0.00%|        del self.data[ref(key)]
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|    def __getitem__(self, key):
   396|         0|            0|            0|  0.00%|        return self.data[ref(key)]
   397|         0|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|    def __len__(self):
   399|         0|            0|            0|  0.00%|        if self._dirty_len and self._pending_removals:
   400|         0|            0|            0|  0.00%|            # self._pending_removals may still contain keys which were
   401|         0|            0|            0|  0.00%|            # explicitly removed, we have to scrub them (see issue #21173).
   402|         0|            0|            0|  0.00%|            self._scrub_removals()
   403|         0|            0|            0|  0.00%|        return len(self.data) - len(self._pending_removals)
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    def __repr__(self):
   406|         0|            0|            0|  0.00%|        return "<%s at %#x>" % (self.__class__.__name__, id(self))
   407|         0|            0|            0|  0.00%|
   408|        80|  0.000383615|  4.79519e-06|  0.04%|    def __setitem__(self, key, value):
   409|        80|  0.000687361|  8.59201e-06|  0.06%|        self.data[ref(key, self._remove)] = value
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|    def copy(self):
   412|         0|            0|            0|  0.00%|        new = WeakKeyDictionary()
   413|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   414|         0|            0|            0|  0.00%|            for key, value in self.data.items():
   415|         0|            0|            0|  0.00%|                o = key()
   416|         0|            0|            0|  0.00%|                if o is not None:
   417|         0|            0|            0|  0.00%|                    new[o] = value
   418|         0|            0|            0|  0.00%|        return new
   419|         0|            0|            0|  0.00%|
   420|         0|            0|            0|  0.00%|    __copy__ = copy
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    def __deepcopy__(self, memo):
   423|         0|            0|            0|  0.00%|        from copy import deepcopy
   424|         0|            0|            0|  0.00%|        new = self.__class__()
   425|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   426|         0|            0|            0|  0.00%|            for key, value in self.data.items():
   427|         0|            0|            0|  0.00%|                o = key()
   428|         0|            0|            0|  0.00%|                if o is not None:
   429|         0|            0|            0|  0.00%|                    new[o] = deepcopy(value, memo)
   430|         0|            0|            0|  0.00%|        return new
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|    def get(self, key, default=None):
   433|         0|            0|            0|  0.00%|        return self.data.get(ref(key),default)
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|    def __contains__(self, key):
   436|         0|            0|            0|  0.00%|        try:
   437|         0|            0|            0|  0.00%|            wr = ref(key)
   438|         0|            0|            0|  0.00%|        except TypeError:
   439|         0|            0|            0|  0.00%|            return False
   440|         0|            0|            0|  0.00%|        return wr in self.data
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|    def items(self):
   443|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   444|         0|            0|            0|  0.00%|            for wr, value in self.data.items():
   445|         0|            0|            0|  0.00%|                key = wr()
   446|         0|            0|            0|  0.00%|                if key is not None:
   447|         0|            0|            0|  0.00%|                    yield key, value
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|    def keys(self):
   450|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   451|         0|            0|            0|  0.00%|            for wr in self.data:
   452|         0|            0|            0|  0.00%|                obj = wr()
   453|         0|            0|            0|  0.00%|                if obj is not None:
   454|         0|            0|            0|  0.00%|                    yield obj
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|    __iter__ = keys
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|    def values(self):
   459|         0|            0|            0|  0.00%|        with _IterationGuard(self):
   460|         0|            0|            0|  0.00%|            for wr, value in self.data.items():
   461|         0|            0|            0|  0.00%|                if wr() is not None:
   462|         0|            0|            0|  0.00%|                    yield value
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|    def keyrefs(self):
   465|         0|            0|            0|  0.00%|        """Return a list of weak references to the keys.
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|        The references are not guaranteed to be 'live' at the time
   468|         0|            0|            0|  0.00%|        they are used, so the result of calling the references needs
   469|         0|            0|            0|  0.00%|        to be checked before being used.  This can be used to avoid
   470|         0|            0|            0|  0.00%|        creating references that will cause the garbage collector to
   471|         0|            0|            0|  0.00%|        keep the keys around longer than needed.
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|        """
   474|         0|            0|            0|  0.00%|        return list(self.data)
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|    def popitem(self):
   477|         0|            0|            0|  0.00%|        self._dirty_len = True
   478|         0|            0|            0|  0.00%|        while True:
   479|         0|            0|            0|  0.00%|            key, value = self.data.popitem()
   480|         0|            0|            0|  0.00%|            o = key()
   481|         0|            0|            0|  0.00%|            if o is not None:
   482|         0|            0|            0|  0.00%|                return o, value
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|    def pop(self, key, *args):
   485|         0|            0|            0|  0.00%|        self._dirty_len = True
   486|         0|            0|            0|  0.00%|        return self.data.pop(ref(key), *args)
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|    def setdefault(self, key, default=None):
   489|         0|            0|            0|  0.00%|        return self.data.setdefault(ref(key, self._remove),default)
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|    def update(self, dict=None, **kwargs):
   492|         0|            0|            0|  0.00%|        d = self.data
   493|         0|            0|            0|  0.00%|        if dict is not None:
   494|         0|            0|            0|  0.00%|            if not hasattr(dict, "items"):
   495|         0|            0|            0|  0.00%|                dict = type({})(dict)
   496|         0|            0|            0|  0.00%|            for key, value in dict.items():
   497|         0|            0|            0|  0.00%|                d[ref(key, self._remove)] = value
   498|         0|            0|            0|  0.00%|        if len(kwargs):
   499|         0|            0|            0|  0.00%|            self.update(kwargs)
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|class finalize:
   503|         0|            0|            0|  0.00%|    """Class for finalization of weakrefable objects
   504|         0|            0|            0|  0.00%|
   505|         0|            0|            0|  0.00%|    finalize(obj, func, *args, **kwargs) returns a callable finalizer
   506|         0|            0|            0|  0.00%|    object which will be called when obj is garbage collected. The
   507|         0|            0|            0|  0.00%|    first time the finalizer is called it evaluates func(*arg, **kwargs)
   508|         0|            0|            0|  0.00%|    and returns the result. After this the finalizer is dead, and
   509|         0|            0|            0|  0.00%|    calling it just returns None.
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|    When the program exits any remaining finalizers for which the
   512|         0|            0|            0|  0.00%|    atexit attribute is true will be run in reverse order of creation.
   513|         0|            0|            0|  0.00%|    By default atexit is true.
   514|         0|            0|            0|  0.00%|    """
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|    # Finalizer objects don't have any state of their own.  They are
   517|         0|            0|            0|  0.00%|    # just used as keys to lookup _Info objects in the registry.  This
   518|         0|            0|            0|  0.00%|    # ensures that they cannot be part of a ref-cycle.
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|    __slots__ = ()
   521|         0|            0|            0|  0.00%|    _registry = {}
   522|         0|            0|            0|  0.00%|    _shutdown = False
   523|         0|            0|            0|  0.00%|    _index_iter = itertools.count()
   524|         0|            0|            0|  0.00%|    _dirty = False
   525|         0|            0|            0|  0.00%|    _registered_with_atexit = False
   526|         0|            0|            0|  0.00%|
   527|         0|            0|            0|  0.00%|    class _Info:
   528|         0|            0|            0|  0.00%|        __slots__ = ("weakref", "func", "args", "kwargs", "atexit", "index")
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|    def __init__(*args, **kwargs):
   531|         0|            0|            0|  0.00%|        if len(args) >= 3:
   532|         0|            0|            0|  0.00%|            self, obj, func, *args = args
   533|         0|            0|            0|  0.00%|        elif not args:
   534|         0|            0|            0|  0.00%|            raise TypeError("descriptor '__init__' of 'finalize' object "
   535|         0|            0|            0|  0.00%|                            "needs an argument")
   536|         0|            0|            0|  0.00%|        else:
   537|         0|            0|            0|  0.00%|            if 'func' not in kwargs:
   538|         0|            0|            0|  0.00%|                raise TypeError('finalize expected at least 2 positional '
   539|         0|            0|            0|  0.00%|                                'arguments, got %d' % (len(args)-1))
   540|         0|            0|            0|  0.00%|            func = kwargs.pop('func')
   541|         0|            0|            0|  0.00%|            if len(args) >= 2:
   542|         0|            0|            0|  0.00%|                self, obj, *args = args
   543|         0|            0|            0|  0.00%|            else:
   544|         0|            0|            0|  0.00%|                if 'obj' not in kwargs:
   545|         0|            0|            0|  0.00%|                    raise TypeError('finalize expected at least 2 positional '
   546|         0|            0|            0|  0.00%|                                    'arguments, got %d' % (len(args)-1))
   547|         0|            0|            0|  0.00%|                obj = kwargs.pop('obj')
   548|         0|            0|            0|  0.00%|                self, *args = args
   549|         0|            0|            0|  0.00%|        args = tuple(args)
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|        if not self._registered_with_atexit:
   552|         0|            0|            0|  0.00%|            # We may register the exit function more than once because
   553|         0|            0|            0|  0.00%|            # of a thread race, but that is harmless
   554|         0|            0|            0|  0.00%|            import atexit
   555|         0|            0|            0|  0.00%|            atexit.register(self._exitfunc)
   556|         0|            0|            0|  0.00%|            finalize._registered_with_atexit = True
   557|         0|            0|            0|  0.00%|        info = self._Info()
   558|         0|            0|            0|  0.00%|        info.weakref = ref(obj, self)
   559|         0|            0|            0|  0.00%|        info.func = func
   560|         0|            0|            0|  0.00%|        info.args = args
   561|         0|            0|            0|  0.00%|        info.kwargs = kwargs or None
   562|         0|            0|            0|  0.00%|        info.atexit = True
   563|         0|            0|            0|  0.00%|        info.index = next(self._index_iter)
   564|         0|            0|            0|  0.00%|        self._registry[self] = info
   565|         0|            0|            0|  0.00%|        finalize._dirty = True
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|    def __call__(self, _=None):
   568|         0|            0|            0|  0.00%|        """If alive then mark as dead and return func(*args, **kwargs);
   569|         0|            0|            0|  0.00%|        otherwise return None"""
   570|         0|            0|            0|  0.00%|        info = self._registry.pop(self, None)
   571|         0|            0|            0|  0.00%|        if info and not self._shutdown:
   572|         0|            0|            0|  0.00%|            return info.func(*info.args, **(info.kwargs or {}))
   573|         0|            0|            0|  0.00%|
   574|         0|            0|            0|  0.00%|    def detach(self):
   575|         0|            0|            0|  0.00%|        """If alive then mark as dead and return (obj, func, args, kwargs);
   576|         0|            0|            0|  0.00%|        otherwise return None"""
   577|         0|            0|            0|  0.00%|        info = self._registry.get(self)
   578|         0|            0|            0|  0.00%|        obj = info and info.weakref()
   579|         0|            0|            0|  0.00%|        if obj is not None and self._registry.pop(self, None):
   580|         0|            0|            0|  0.00%|            return (obj, info.func, info.args, info.kwargs or {})
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|    def peek(self):
   583|         0|            0|            0|  0.00%|        """If alive then return (obj, func, args, kwargs);
   584|         0|            0|            0|  0.00%|        otherwise return None"""
   585|         0|            0|            0|  0.00%|        info = self._registry.get(self)
   586|         0|            0|            0|  0.00%|        obj = info and info.weakref()
   587|         0|            0|            0|  0.00%|        if obj is not None:
   588|         0|            0|            0|  0.00%|            return (obj, info.func, info.args, info.kwargs or {})
   589|         0|            0|            0|  0.00%|
   590|         0|            0|            0|  0.00%|    @property
   591|         0|            0|            0|  0.00%|    def alive(self):
   592|         0|            0|            0|  0.00%|        """Whether finalizer is alive"""
   593|         0|            0|            0|  0.00%|        return self in self._registry
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|    @property
   596|         0|            0|            0|  0.00%|    def atexit(self):
   597|         0|            0|            0|  0.00%|        """Whether finalizer should be called at exit"""
   598|         0|            0|            0|  0.00%|        info = self._registry.get(self)
   599|         0|            0|            0|  0.00%|        return bool(info) and info.atexit
   600|         0|            0|            0|  0.00%|
   601|         0|            0|            0|  0.00%|    @atexit.setter
   602|         0|            0|            0|  0.00%|    def atexit(self, value):
   603|         0|            0|            0|  0.00%|        info = self._registry.get(self)
   604|         0|            0|            0|  0.00%|        if info:
   605|         0|            0|            0|  0.00%|            info.atexit = bool(value)
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|    def __repr__(self):
   608|         0|            0|            0|  0.00%|        info = self._registry.get(self)
   609|         0|            0|            0|  0.00%|        obj = info and info.weakref()
   610|         0|            0|            0|  0.00%|        if obj is None:
   611|         0|            0|            0|  0.00%|            return '<%s object at %#x; dead>' % (type(self).__name__, id(self))
   612|         0|            0|            0|  0.00%|        else:
   613|         0|            0|            0|  0.00%|            return '<%s object at %#x; for %r at %#x>' % \
   614|         0|            0|            0|  0.00%|                (type(self).__name__, id(self), type(obj).__name__, id(obj))
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|    @classmethod
   617|         0|            0|            0|  0.00%|    def _select_for_exit(cls):
   618|         0|            0|            0|  0.00%|        # Return live finalizers marked for exit, oldest first
   619|         0|            0|            0|  0.00%|        L = [(f,i) for (f,i) in cls._registry.items() if i.atexit]
   620|         0|            0|            0|  0.00%|        L.sort(key=lambda item:item[1].index)
   621|         0|            0|            0|  0.00%|        return [f for (f,i) in L]
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|    @classmethod
   624|         0|            0|            0|  0.00%|    def _exitfunc(cls):
   625|         0|            0|            0|  0.00%|        # At shutdown invoke finalizers for which atexit is true.
   626|         0|            0|            0|  0.00%|        # This is called once all other non-daemonic threads have been
   627|         0|            0|            0|  0.00%|        # joined.
   628|         0|            0|            0|  0.00%|        reenable_gc = False
   629|         0|            0|            0|  0.00%|        try:
   630|         0|            0|            0|  0.00%|            if cls._registry:
   631|         0|            0|            0|  0.00%|                import gc
   632|         0|            0|            0|  0.00%|                if gc.isenabled():
   633|         0|            0|            0|  0.00%|                    reenable_gc = True
   634|         0|            0|            0|  0.00%|                    gc.disable()
   635|         0|            0|            0|  0.00%|                pending = None
   636|         0|            0|            0|  0.00%|                while True:
   637|         0|            0|            0|  0.00%|                    if pending is None or finalize._dirty:
   638|         0|            0|            0|  0.00%|                        pending = cls._select_for_exit()
   639|         0|            0|            0|  0.00%|                        finalize._dirty = False
   640|         0|            0|            0|  0.00%|                    if not pending:
   641|         0|            0|            0|  0.00%|                        break
   642|         0|            0|            0|  0.00%|                    f = pending.pop()
   643|         0|            0|            0|  0.00%|                    try:
   644|         0|            0|            0|  0.00%|                        # gc is disabled, so (assuming no daemonic
   645|         0|            0|            0|  0.00%|                        # threads) the following is the only line in
   646|         0|            0|            0|  0.00%|                        # this function which might trigger creation
   647|         0|            0|            0|  0.00%|                        # of a new finalizer
   648|         0|            0|            0|  0.00%|                        f()
   649|         0|            0|            0|  0.00%|                    except Exception:
   650|         0|            0|            0|  0.00%|                        sys.excepthook(*sys.exc_info())
   651|         0|            0|            0|  0.00%|                    assert f not in cls._registry
   652|         0|            0|            0|  0.00%|        finally:
   653|         0|            0|            0|  0.00%|            # prevent any more finalizers from executing during shutdown
   654|         0|            0|            0|  0.00%|            finalize._shutdown = True
   655|         0|            0|            0|  0.00%|            if reenable_gc:
   656|         0|            0|            0|  0.00%|                gc.enable()
File: <frozen importlib._bootstrap>
File duration: 0.00258756s (0.24%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         1|  5.24521e-06|  5.24521e-06|  0.00%|
    36|         1|  8.82149e-06|  8.82149e-06|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|         1|  5.96046e-06|  5.96046e-06|  0.00%|
    59|         1|  8.82149e-06|  8.82149e-06|  0.00%|
    60|         1|  9.05991e-06|  9.05991e-06|  0.00%|
    61|         1|  8.10623e-06|  8.10623e-06|  0.00%|
    62|         1|  7.86781e-06|  7.86781e-06|  0.00%|
    63|         1|  6.91414e-06|  6.91414e-06|  0.00%|
    64|         1|  8.34465e-06|  8.34465e-06|  0.00%|
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|
    78|         1|  1.12057e-05|  1.12057e-05|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         1|  8.82149e-06|  8.82149e-06|  0.00%|
    85|         1|  9.05991e-06|  9.05991e-06|  0.00%|
    86|         1|  6.91414e-06|  6.91414e-06|  0.00%|
    87|         1|  8.10623e-06|  8.10623e-06|  0.00%|
    88|         1|  9.05991e-06|  9.05991e-06|  0.00%|
    89|         1|  7.86781e-06|  7.86781e-06|  0.00%|
    90|         1|  6.91414e-06|  6.91414e-06|  0.00%|
    91|         1|  1.09673e-05|  1.09673e-05|  0.00%|
    92|         1|  8.10623e-06|  8.10623e-06|  0.00%|
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|
   101|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   102|         0|            0|            0|  0.00%|
   103|         1|  5.00679e-06|  5.00679e-06|  0.00%|
   104|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   105|         1|  1.28746e-05|  1.28746e-05|  0.00%|
   106|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   107|         0|            0|            0|  0.00%|
   108|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   109|         1|  1.21593e-05|  1.21593e-05|  0.00%|
   110|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   111|         1|  1.21593e-05|  1.21593e-05|  0.00%|
   112|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|
   143|         1|  5.00679e-06|  5.00679e-06|  0.00%|
   144|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   145|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         1|  5.00679e-06|  5.00679e-06|  0.00%|
   148|         1|  2.21729e-05|  2.21729e-05|  0.00%|
(call)|         1|  0.000200033|  0.000200033|  0.02%|# <frozen importlib._bootstrap>:157 _get_module_lock
   149|         1|  2.26498e-05|  2.26498e-05|  0.00%|
(call)|         1|  9.60827e-05|  9.60827e-05|  0.01%|# <frozen importlib._bootstrap>:78 acquire
   150|         0|            0|            0|  0.00%|
   151|         1|  6.19888e-06|  6.19888e-06|  0.00%|
   152|         1|   2.7895e-05|   2.7895e-05|  0.00%|
(call)|         1|  8.60691e-05|  8.60691e-05|  0.01%|# <frozen importlib._bootstrap>:103 release
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|
   157|         1|  1.38283e-05|  1.38283e-05|  0.00%|
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|
   163|         1|  1.09673e-05|  1.09673e-05|  0.00%|
   164|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   165|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   166|         1|  1.09673e-05|  1.09673e-05|  0.00%|
   167|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   168|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   169|         0|            0|            0|  0.00%|
   170|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   171|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|         1|  2.47955e-05|  2.47955e-05|  0.00%|
(call)|         1|  5.50747e-05|  5.50747e-05|  0.01%|# <frozen importlib._bootstrap>:58 __init__
   175|         0|            0|            0|  0.00%|
   176|         2|  1.26362e-05|  6.31809e-06|  0.00%|
   177|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   178|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   183|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   184|         0|            0|            0|  0.00%|
   185|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   186|         0|            0|            0|  0.00%|
   187|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   188|         0|            0|            0|  0.00%|
   189|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   190|         0|            0|            0|  0.00%|
   191|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|
   211|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|
   219|         1|  3.48091e-05|  3.48091e-05|  0.00%|
(call)|         1|  0.000800133|  0.000800133|  0.07%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/thread.py:4 <module>
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|         7|  4.43459e-05|  6.33512e-06|  0.00%|
   223|         0|            0|            0|  0.00%|
   224|         7|  4.79221e-05|  6.84602e-06|  0.00%|
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|
   307|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   308|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   309|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   310|         0|            0|            0|  0.00%|
   311|         1|  5.96046e-06|  5.96046e-06|  0.00%|
   312|         0|            0|            0|  0.00%|
   313|         0|            0|            0|  0.00%|
   314|         0|            0|            0|  0.00%|
   315|         1|  1.19209e-05|  1.19209e-05|  0.00%|
   316|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   317|         0|            0|            0|  0.00%|
   318|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   319|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   320|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   321|         9|  0.000102997|  1.14441e-05|  0.01%|
(call)|         4|  5.10216e-05|  1.27554e-05|  0.00%|# <frozen importlib._bootstrap>:321 <genexpr>
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|
   327|         1|  1.97887e-05|  1.97887e-05|  0.00%|
(call)|         1|   1.3113e-05|   1.3113e-05|  0.00%|# <frozen importlib._bootstrap>:222 _verbose_message
   328|         0|            0|            0|  0.00%|
   329|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|
   369|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   370|         0|            0|            0|  0.00%|
   371|         1|  1.28746e-05|  1.28746e-05|  0.00%|
   372|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   373|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   374|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   375|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|
   378|         1|  1.21593e-05|  1.21593e-05|  0.00%|
   379|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|         0|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|
   403|         2|  9.29832e-06|  4.64916e-06|  0.00%|
   404|         0|            0|            0|  0.00%|
   405|         2|  1.38283e-05|  6.91414e-06|  0.00%|
   406|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   407|         1|  7.15256e-06|  7.15256e-06|  0.00%|
   408|         0|            0|            0|  0.00%|
   409|         1|   2.3365e-05|   2.3365e-05|  0.00%|
(call)|         1|  0.000351906|  0.000351906|  0.03%|# <frozen importlib._bootstrap_external>:369 _get_cached
   410|         2|  1.28746e-05|   6.4373e-06|  0.00%|
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|
   416|         2|   1.4782e-05|  7.39098e-06|  0.00%|
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|
   419|         2|  1.62125e-05|  8.10623e-06|  0.00%|
   420|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   421|         0|            0|            0|  0.00%|
   422|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   423|         0|            0|            0|  0.00%|
   424|         1|  6.19888e-06|  6.19888e-06|  0.00%|
   425|         0|            0|            0|  0.00%|
   426|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|
   504|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|
   508|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   509|         0|            0|            0|  0.00%|
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|
   514|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   515|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   516|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   517|         0|            0|            0|  0.00%|
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|
   527|         0|            0|            0|  0.00%|
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|
   533|         0|            0|            0|  0.00%|
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|
   537|         1|  1.09673e-05|  1.09673e-05|  0.00%|
   538|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   539|         0|            0|            0|  0.00%|
   540|         0|            0|            0|  0.00%|
   541|         0|            0|            0|  0.00%|
   542|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   543|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   544|         1|  2.57492e-05|  2.57492e-05|  0.00%|
(call)|         1|  2.00272e-05|  2.00272e-05|  0.00%|# <frozen importlib._bootstrap>:416 parent
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|
   548|         1|  9.29832e-06|  9.29832e-06|  0.00%|
   549|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|
   553|         1|  1.50204e-05|  1.50204e-05|  0.00%|
   554|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|
   560|         1|   2.5034e-05|   2.5034e-05|  0.00%|
(call)|         1|  1.50204e-05|  1.50204e-05|  0.00%|# <frozen importlib._bootstrap>:424 has_location
   561|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   562|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   563|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|
   567|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   568|         1|  2.31266e-05|  2.31266e-05|  0.00%|
(call)|         1|   0.00041008|   0.00041008|  0.04%|# <frozen importlib._bootstrap>:403 cached
   569|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   570|         1|  1.95503e-05|  1.95503e-05|  0.00%|
(call)|         1|  1.62125e-05|  1.62125e-05|  0.00%|# <frozen importlib._bootstrap>:403 cached
   571|         0|            0|            0|  0.00%|
   572|         0|            0|            0|  0.00%|
   573|         1|  8.34465e-06|  8.34465e-06|  0.00%|
   574|         0|            0|            0|  0.00%|
   575|         0|            0|            0|  0.00%|
   576|         1|  5.00679e-06|  5.00679e-06|  0.00%|
   577|         0|            0|            0|  0.00%|
   578|         0|            0|            0|  0.00%|
   579|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   580|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|
   583|         1|  3.48091e-05|  3.48091e-05|  0.00%|
(call)|         1|  1.40667e-05|  1.40667e-05|  0.00%|# <frozen importlib._bootstrap_external>:719 create_module
   584|         0|            0|            0|  0.00%|
   585|         0|            0|            0|  0.00%|
   586|         0|            0|            0|  0.00%|
   587|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   588|         1|  2.19345e-05|  2.19345e-05|  0.00%|
(call)|         1|  1.40667e-05|  1.40667e-05|  0.00%|# <frozen importlib._bootstrap>:35 _new_module
   589|         1|   2.7895e-05|   2.7895e-05|  0.00%|
(call)|         1|  0.000734091|  0.000734091|  0.07%|# <frozen importlib._bootstrap>:504 _init_module_attrs
   590|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|
   646|         0|            0|            0|  0.00%|
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|
   654|         0|            0|            0|  0.00%|
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|
   663|         1|  5.96046e-06|  5.96046e-06|  0.00%|
   664|         0|            0|            0|  0.00%|
   665|         1|  2.19345e-05|  2.19345e-05|  0.00%|
   666|         0|            0|            0|  0.00%|
   667|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   668|         0|            0|            0|  0.00%|
   669|         0|            0|            0|  0.00%|
   670|         1|  2.09808e-05|  2.09808e-05|  0.00%|
(call)|         1|  0.000884056|  0.000884056|  0.08%|# <frozen importlib._bootstrap>:576 module_from_spec
   671|         1|  3.60012e-05|  3.60012e-05|  0.00%|
(call)|         1|  2.57492e-05|  2.57492e-05|  0.00%|# <frozen importlib._bootstrap>:307 __init__
(call)|         1|   2.6226e-05|   2.6226e-05|  0.00%|# <frozen importlib._bootstrap>:311 __enter__
   672|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   673|         0|            0|            0|  0.00%|
   674|         0|            0|            0|  0.00%|
   675|         0|            0|            0|  0.00%|
   676|         0|            0|            0|  0.00%|
   677|         1|  5.29289e-05|  5.29289e-05|  0.00%|
(call)|         1|   0.00265312|   0.00265312|  0.25%|# <frozen importlib._bootstrap_external>:722 exec_module
(call)|         1|  0.000169039|  0.000169039|  0.02%|# <frozen importlib._bootstrap>:318 __exit__
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|
   682|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|
   719|         1|  6.19888e-06|  6.19888e-06|  0.00%|
   720|         0|            0|            0|  0.00%|
   721|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   722|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|
   728|         0|            0|            0|  0.00%|
   729|         0|            0|            0|  0.00%|
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|
   746|         0|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|
   753|         0|            0|            0|  0.00%|
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|
   760|         0|            0|            0|  0.00%|
   761|         0|            0|            0|  0.00%|
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|
   771|         0|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|
   775|         0|            0|            0|  0.00%|
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|
   790|         0|            0|            0|  0.00%|
   791|         0|            0|            0|  0.00%|
   792|         1|  5.96046e-06|  5.96046e-06|  0.00%|
   793|         0|            0|            0|  0.00%|
   794|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|
   797|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   798|         0|            0|            0|  0.00%|
   799|         0|            0|            0|  0.00%|
   800|         0|            0|            0|  0.00%|
   801|         0|            0|            0|  0.00%|
   802|         0|            0|            0|  0.00%|
   803|         0|            0|            0|  0.00%|
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|
   855|         3|  1.43051e-05|  4.76837e-06|  0.00%|
   856|         0|            0|            0|  0.00%|
   857|         3|  2.07424e-05|  6.91414e-06|  0.00%|
   858|         0|            0|            0|  0.00%|
   859|         3|  2.00272e-05|  6.67572e-06|  0.00%|
   860|         0|            0|            0|  0.00%|
   861|         3|  2.26498e-05|  7.54992e-06|  0.00%|
   862|         0|            0|            0|  0.00%|
   863|         0|            0|            0|  0.00%|
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|
   869|         0|            0|            0|  0.00%|
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|
   874|         0|            0|            0|  0.00%|
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|
   878|         0|            0|            0|  0.00%|
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|
   881|         0|            0|            0|  0.00%|
   882|         1|  6.91414e-06|  6.91414e-06|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         1|  9.29832e-06|  9.29832e-06|  0.00%|
   885|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   886|         0|            0|            0|  0.00%|
   887|         0|            0|            0|  0.00%|
   888|         0|            0|            0|  0.00%|
   889|         0|            0|            0|  0.00%|
   890|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|
   896|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   897|         3|  2.40803e-05|  8.02676e-06|  0.00%|
   898|         3|  5.88894e-05|  1.96298e-05|  0.01%|
(call)|         3|  3.50475e-05|  1.16825e-05|  0.00%|# <frozen importlib._bootstrap>:855 __enter__
   899|         3|  2.19345e-05|   7.3115e-06|  0.00%|
   900|         3|  2.21729e-05|  7.39098e-06|  0.00%|
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|
   906|         3|  0.000103235|  3.44117e-05|  0.01%|
(call)|         1|  2.21729e-05|  2.21729e-05|  0.00%|# <frozen importlib._bootstrap>:719 find_spec
(call)|         3|  4.26769e-05|  1.42256e-05|  0.00%|# <frozen importlib._bootstrap>:859 __exit__
(call)|         1|  2.19345e-05|  2.19345e-05|  0.00%|# <frozen importlib._bootstrap>:792 find_spec
(call)|         1|   0.00160623|   0.00160623|  0.15%|# <frozen importlib._bootstrap_external>:1272 find_spec
   907|         3|  2.26498e-05|  7.54992e-06|  0.00%|
   908|         0|            0|            0|  0.00%|
   909|         1|  7.15256e-06|  7.15256e-06|  0.00%|
   910|         0|            0|            0|  0.00%|
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|
   915|         0|            0|            0|  0.00%|
   916|         0|            0|            0|  0.00%|
   917|         0|            0|            0|  0.00%|
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|
   924|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   925|         0|            0|            0|  0.00%|
   926|         0|            0|            0|  0.00%|
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|
   939|         0|            0|            0|  0.00%|
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|
   948|         1|  1.09673e-05|  1.09673e-05|  0.00%|
   949|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   950|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   951|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   952|         1|  9.77516e-06|  9.77516e-06|  0.00%|
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|
   955|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   956|         0|            0|            0|  0.00%|
   957|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   958|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   959|         1|  7.86781e-06|  7.86781e-06|  0.00%|
   960|         0|            0|            0|  0.00%|
   961|         0|            0|            0|  0.00%|
   962|         0|            0|            0|  0.00%|
   963|         1|  2.59876e-05|  2.59876e-05|  0.00%|
(call)|         1|   0.00203896|   0.00203896|  0.19%|# <frozen importlib._bootstrap>:882 _find_spec
   964|         1|  9.29832e-06|  9.29832e-06|  0.00%|
   965|         0|            0|            0|  0.00%|
   966|         0|            0|            0|  0.00%|
   967|         1|  2.28882e-05|  2.28882e-05|  0.00%|
(call)|         1|   0.00392199|   0.00392199|  0.36%|# <frozen importlib._bootstrap>:663 _load_unlocked
   968|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   969|         0|            0|            0|  0.00%|
   970|         1|  8.82149e-06|  8.82149e-06|  0.00%|
   971|         1|  1.40667e-05|  1.40667e-05|  0.00%|
   972|         1|  1.00136e-05|  1.00136e-05|  0.00%|
   973|         0|            0|            0|  0.00%|
   974|         0|            0|            0|  0.00%|
   975|         0|            0|            0|  0.00%|
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|
   978|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   979|         0|            0|            0|  0.00%|
   980|         1|  3.91006e-05|  3.91006e-05|  0.00%|
(call)|         1|  2.19345e-05|  2.19345e-05|  0.00%|# <frozen importlib._bootstrap>:143 __init__
(call)|         1|  0.000345945|  0.000345945|  0.03%|# <frozen importlib._bootstrap>:147 __enter__
   981|         1|  9.05991e-06|  9.05991e-06|  0.00%|
   982|         1|  8.10623e-06|  8.10623e-06|  0.00%|
   983|         1|  5.60284e-05|  5.60284e-05|  0.01%|
(call)|         1|   0.00614285|   0.00614285|  0.57%|# <frozen importlib._bootstrap>:948 _find_and_load_unlocked
(call)|         1|  0.000120163|  0.000120163|  0.01%|# <frozen importlib._bootstrap>:151 __exit__
(call)|         1|  4.48227e-05|  4.48227e-05|  0.00%|# <frozen importlib._bootstrap>:176 cb
   984|         0|            0|            0|  0.00%|
   985|         0|            0|            0|  0.00%|
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|
   988|         0|            0|            0|  0.00%|
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|
   991|         0|            0|            0|  0.00%|
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|
   994|         0|            0|            0|  0.00%|
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|
   997|         0|            0|            0|  0.00%|
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|
  1008|         0|            0|            0|  0.00%|
  1009|         3|  3.21865e-05|  1.07288e-05|  0.00%|
  1010|         0|            0|            0|  0.00%|
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|
  1013|         0|            0|            0|  0.00%|
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|
  1019|         3|  3.48091e-05|   1.1603e-05|  0.00%|
  1020|         4|  3.50475e-05|  8.76188e-06|  0.00%|
  1021|         2|   1.5974e-05|  7.98702e-06|  0.00%|
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|
  1028|         2|   1.5974e-05|  7.98702e-06|  0.00%|
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|
  1032|         2|  3.71933e-05|  1.85966e-05|  0.00%|
(call)|         1|   0.00696182|   0.00696182|  0.65%|# /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/__init__.py:39 __getattr__
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|
  1035|         0|            0|            0|  0.00%|
  1036|         0|            0|            0|  0.00%|
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|
  1043|         0|            0|            0|  0.00%|
  1044|         3|  2.00272e-05|  6.67572e-06|  0.00%|
File: /Users/soichisumi/.pyenv/versions/3.7.10/lib/python3.7/concurrent/futures/__init__.py
File duration: 0.000114918s (0.01%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Copyright 2009 Brian Quinlan. All Rights Reserved.
     2|         0|            0|            0|  0.00%|# Licensed to PSF under a Contributor Agreement.
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|"""Execute computations asynchronously using threads or processes."""
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|__author__ = 'Brian Quinlan (brian@sweetapp.com)'
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|from concurrent.futures._base import (FIRST_COMPLETED,
     9|         0|            0|            0|  0.00%|                                      FIRST_EXCEPTION,
    10|         0|            0|            0|  0.00%|                                      ALL_COMPLETED,
    11|         0|            0|            0|  0.00%|                                      CancelledError,
    12|         0|            0|            0|  0.00%|                                      TimeoutError,
    13|         0|            0|            0|  0.00%|                                      BrokenExecutor,
    14|         0|            0|            0|  0.00%|                                      Future,
    15|         0|            0|            0|  0.00%|                                      Executor,
    16|         0|            0|            0|  0.00%|                                      wait,
    17|         0|            0|            0|  0.00%|                                      as_completed)
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|__all__ = (
    20|         0|            0|            0|  0.00%|    'FIRST_COMPLETED',
    21|         0|            0|            0|  0.00%|    'FIRST_EXCEPTION',
    22|         0|            0|            0|  0.00%|    'ALL_COMPLETED',
    23|         0|            0|            0|  0.00%|    'CancelledError',
    24|         0|            0|            0|  0.00%|    'TimeoutError',
    25|         0|            0|            0|  0.00%|    'BrokenExecutor',
    26|         0|            0|            0|  0.00%|    'Future',
    27|         0|            0|            0|  0.00%|    'Executor',
    28|         0|            0|            0|  0.00%|    'wait',
    29|         0|            0|            0|  0.00%|    'as_completed',
    30|         0|            0|            0|  0.00%|    'ProcessPoolExecutor',
    31|         0|            0|            0|  0.00%|    'ThreadPoolExecutor',
    32|         0|            0|            0|  0.00%|)
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|def __dir__():
    36|         0|            0|            0|  0.00%|    return __all__ + ('__author__', '__doc__')
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         1|  1.00136e-05|  1.00136e-05|  0.00%|def __getattr__(name):
    40|         0|            0|            0|  0.00%|    global ProcessPoolExecutor, ThreadPoolExecutor
    41|         0|            0|            0|  0.00%|
    42|         1|  1.78814e-05|  1.78814e-05|  0.00%|    if name == 'ProcessPoolExecutor':
    43|         0|            0|            0|  0.00%|        from .process import ProcessPoolExecutor as pe
    44|         0|            0|            0|  0.00%|        ProcessPoolExecutor = pe
    45|         0|            0|            0|  0.00%|        return pe
    46|         0|            0|            0|  0.00%|
    47|         1|  8.10623e-06|  8.10623e-06|  0.00%|    if name == 'ThreadPoolExecutor':
    48|         1|  6.31809e-05|  6.31809e-05|  0.01%|        from .thread import ThreadPoolExecutor as te
(call)|         1|  2.57492e-05|  2.57492e-05|  0.00%|# <frozen importlib._bootstrap>:416 parent
(call)|         1|   0.00679708|   0.00679708|  0.63%|# <frozen importlib._bootstrap>:978 _find_and_load
(call)|         1|  2.40803e-05|  2.40803e-05|  0.00%|# <frozen importlib._bootstrap>:1009 _handle_fromlist
    49|         1|  7.86781e-06|  7.86781e-06|  0.00%|        ThreadPoolExecutor = te
    50|         1|  7.86781e-06|  7.86781e-06|  0.00%|        return te
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|    raise AttributeError(f"module {__name__} has no attribute {name}")
